(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[4564],{1514:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-76952278",path:"/pages/fe-sre/vite/",title:"",lang:"zh-CN",frontmatter:{home:!1},excerpt:"",headers:[{level:2,title:"vite 使用笔记",slug:"vite-使用笔记",children:[{level:3,title:"vite 支持 require",slug:"vite-支持-require",children:[]},{level:3,title:"babel/traverse",slug:"babel-traverse",children:[]},{level:3,title:"plugin",slug:"plugin",children:[]},{level:3,title:"vite 本地开发支持 https",slug:"vite-本地开发支持-https",children:[]},{level:3,title:"使用 banner 或 footer 选项添加 import 语句",slug:"使用-banner-或-footer-选项添加-import-语句",children:[]},{level:3,title:"‌import.meta",slug:"‌import-meta",children:[]}]}],filePathRelative:"pages/fe-sre/vite/README.md",git:{updatedTime:1741591165e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:14}]}}},6499:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>x});var e=a(6252);const t=(0,e.Wm)("h2",{id:"vite-使用笔记"},[(0,e.Wm)("a",{class:"header-anchor",href:"#vite-使用笔记"},"#"),(0,e.Uk)(" vite 使用笔记")],-1),p={href:"https://segmentfault.com/a/1190000043980887",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("Vite 是如何实现 Esbuild 打包的"),r=(0,e.Wm)("br",null,null,-1),o={href:"https://juejin.cn/post/7350936959059722280?utm_source=gold_browser_extension",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("Vite 工作原理"),c=(0,e.Wm)("br",null,null,-1),u={href:"https://www.baidu.com/link?url=qSPsxiW5_Rboe-4tNN26ObiF8LoQFgnyDX8zMl7HZHYClDlr1eq37JL-4hpDSab5WUqwB7iqfo8Y4VnKAtXBla&wd=&eqid=d2f2c99500896c100000000565e43fbb",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("rollup 打包原理"),b=(0,e.Wm)("br",null,null,-1),k={href:"https://blog.csdn.net/weixin_44786530/article/details/135893697",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("Vite 配置 Https 启动服务"),g=(0,e.Wm)("br",null,null,-1),v={href:"https://juejin.cn/post/7338042858702618678?utm_source=gold_browser_extension#heading-14",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("vite 和 webpack 热更新的区别"),f={href:"https://cn.vitejs.dev/guide/",target:"_blank",rel:"noopener noreferrer"},q=(0,e.Uk)("vite 官方文档"),w=(0,e.uE)('<h3 id="vite-支持-require"><a class="header-anchor" href="#vite-支持-require">#</a> vite 支持 require</h3><p>1、安装插件 vite-plugin-require-transform</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> -D vite-plugin-require-transform\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>2、vite.config.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> requireTransform <span class="token keyword">from</span> <span class="token string">&quot;vite-plugin-require-transform&quot;</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">requireTransform</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      fileRegex<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.js$|.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="babel-traverse"><a class="header-anchor" href="#babel-traverse">#</a> babel/traverse</h3><p>不支持 es Module 可以从 babel/core 引入 traverse 没有遍历所有节点, 需要自行编写遍历代码</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>有些三方包没有默认导出 可以使用 import * as babel from &#39;babel/core&#39; 进行导入</p></div><h3 id="plugin"><a class="header-anchor" href="#plugin">#</a> plugin</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> i -D unplugin-auto-import\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>是基于 unimport 开发，这个插件可以帮助开发者在代码中直接使用 Vue 核心库的功能，而不需要显式地导入它们。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>\n<span class="token keyword">import</span> AutoImport <span class="token keyword">from</span> <span class="token string">&quot;unplugin-auto-import/vite&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">AutoImport</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">/* options */</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="vite-本地开发支持-https"><a class="header-anchor" href="#vite-本地开发支持-https">#</a> vite 本地开发支持 https</h3><p><strong>前置条件</strong></p><p>安装了 mkcert 并且添加了它的可执行文件到系统的 PATH 中。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>brew <span class="token function">install</span> mkcert\n<span class="token comment"># Homebrew安装mkcert</span>\nmkcert -install\n<span class="token comment"># 添加本地CA到系统的根证书颁发机构</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>安装插件</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> i -D vite-plugin-mkcert\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>配置 vite.config.ts</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>\n<span class="token keyword">import</span> mkcert <span class="token keyword">from</span> <span class="token string">&quot;vite-plugin-mkcert&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">mkcert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">/* options */</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="使用-banner-或-footer-选项添加-import-语句"><a class="header-anchor" href="#使用-banner-或-footer-选项添加-import-语句">#</a> 使用 banner 或 footer 选项添加 import 语句</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>config<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>config<span class="token punctuation">.</span>output<span class="token punctuation">,</span>\n  banner<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">require(&#39;./index.css&#39;);\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token comment">// 在打包的后 JS 文件顶部插入 import 语句</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="‌import-meta"><a class="header-anchor" href="#‌import-meta">#</a> ‌import.meta</h3><ul><li>‌import.meta.url‌：返回当前模块的 URL 路径。</li><li>import.meta.scriptElement‌：在浏览器中，返回加载模块的<code>&lt;script&gt;</code>元素。</li><li>import.meta.hot‌：在支持模块热更新（HMR）的环境中，如 Vite 和 Webpack，提供处理热更新的逻辑。</li><li>import.meta.env‌：用于读取环境变量，常见于 Vite 和 Rollup 等工具中。</li><li>import.meta.dir‌：提供当前文件的目录路径。</li><li>import.meta.file‌：提供当前文件的名称。</li><li>import.meta.path‌：提供当前文件的绝对路径。</li><li>‌import.meta.main‌：指示当前文件是否是入口点文件。</li><li>‌import.meta.resolve‌：用于解析模块导入符号的绝对路径 ‌</li></ul>',24),x={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)("p",null,[(0,e.Wm)("a",p,[l,(0,e.Wm)(a)]),r,(0,e.Wm)("a",o,[i,(0,e.Wm)(a)]),c,(0,e.Wm)("a",u,[m,(0,e.Wm)(a)]),b,(0,e.Wm)("a",k,[d,(0,e.Wm)(a)]),g,(0,e.Wm)("a",v,[h,(0,e.Wm)(a)]),(0,e.Wm)("a",f,[q,(0,e.Wm)(a)])]),w],64)}}}}]);