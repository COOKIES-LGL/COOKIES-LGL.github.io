(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[1683],{1667:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-f87561dc",path:"/pages/blog-daily/virtual-list/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"虚拟列表的原理与实现",slug:"虚拟列表的原理与实现",children:[]},{level:3,title:"元素不定高度",slug:"元素不定高度",children:[]},{level:3,title:"元素动态高度",slug:"元素动态高度",children:[]}],filePathRelative:"pages/blog-daily/virtual-list/README.md",git:{updatedTime:1733294272e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:3}]}}},2137:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h3 id="虚拟列表的原理与实现"><a class="header-anchor" href="#虚拟列表的原理与实现">#</a> 虚拟列表的原理与实现</h3><p>前缀知识 工具 hooks</p><h4 id="usecreation"><a class="header-anchor" href="#usecreation">#</a> useCreation</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * useCreation是useMemo或useRef的替代品。useCreation这个钩子增强了useMemo和useRef，让这个钩子可以替换这两个钩子。\n */</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> DependencyList<span class="token punctuation">,</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">const</span> depsAreSame <span class="token operator">=</span> <span class="token punctuation">(</span>oldDeps<span class="token operator">:</span> DependencyList<span class="token punctuation">,</span> deps<span class="token operator">:</span> DependencyList<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldDeps <span class="token operator">===</span> deps<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldDeps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 判断两个值是否是同一个值</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>oldDeps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">useCreation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any<span class="token punctuation">,</span> deps<span class="token operator">:</span> DependencyList<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> current <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    deps<span class="token punctuation">,</span>\n    obj<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token keyword">as</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> any<span class="token punctuation">,</span>\n    initialized<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>initialized <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">depsAreSame</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>deps<span class="token punctuation">,</span> deps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    current<span class="token punctuation">.</span>deps <span class="token operator">=</span> deps\n    current<span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    current<span class="token punctuation">.</span>initialized <span class="token operator">=</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> current<span class="token punctuation">.</span>obj <span class="token keyword">as</span> any\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> useCreation\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="useeventlistener"><a class="header-anchor" href="#useeventlistener">#</a> useEventListener</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * addEventListener事件绑定的封装\n */</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">useEventListener</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>e<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span> target<span class="token operator">:</span> any <span class="token operator">=</span> window<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> targetElement <span class="token operator">=</span> <span class="token string">&quot;current&quot;</span> <span class="token keyword">in</span> target <span class="token operator">?</span> target<span class="token punctuation">.</span>current <span class="token operator">:</span> window<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">useEventListener</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> Event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">handler</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    targetElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> useEventListener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      targetElement<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> useEventListener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> useEventListener<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="usereactive"><a class="header-anchor" href="#usereactive">#</a> useReactive</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * 一种具备响应式的useState\n */</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> useCreation <span class="token keyword">from</span> <span class="token string">&#39;./useCreation&#39;</span>\n<span class="token keyword">import</span> useUpdate <span class="token keyword">from</span> <span class="token string">&#39;./useUpdate&#39;</span>\n\n<span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Record</span><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>initialVal<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter"><span class="token constant">T</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>initialVal<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> <span class="token function">observer</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token operator">:</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> ret <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>\n      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> ret\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> proxy\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> useReactive <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Record</span><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>initialState<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter"><span class="token constant">T</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> ref <span class="token operator">=</span> useRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token function">useUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">useCreation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">observer</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> state\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> useReactive\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h4 id="useupdate"><a class="header-anchor" href="#useupdate">#</a> useUpdate</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * 组件强制更新\n */</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">useUpdate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> useUpdate<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="utils"><a class="header-anchor" href="#utils">#</a> utils</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token constant">NP</span> <span class="token keyword">from</span> <span class="token string">&quot;number-precision&quot;</span><span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n * 二分查找\n * <span class="token keyword">@param</span> <span class="token parameter">list</span> 目标数组\n * <span class="token keyword">@param</span> <span class="token parameter">value</span> 目标对象\n * <span class="token keyword">@returns</span>\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">binarySearch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">list<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> start<span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> end<span class="token operator">:</span> number <span class="token operator">=</span> list<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> tempIndex <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> midIndex <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> midValue <span class="token operator">=</span> list<span class="token punctuation">[</span>midIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>midValue <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>midIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相等时返回下一个下标</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>midValue <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      start <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>midIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>midValue <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>tempIndex <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> tempIndex <span class="token operator">&gt;</span> midIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        tempIndex <span class="token operator">=</span> midIndex<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      end <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>midIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> tempIndex<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createScheduler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token function-variable function">scheduler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> ticking <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    ticking <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">requestTick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ticking<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">scheduler</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    ticking <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> requestTick<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h3 id="元素不定高度"><a class="header-anchor" href="#元素不定高度">#</a> 元素不定高度</h3><p>定高我们只需要手动计算下列表的高度，将值传入就行，但不定高就更复杂，因为你无法计算出每个高度的情况，导致列表的整体高度、偏移量都无法正常的计算。 预算高度，我们可以假定子列表的高度也就是虚假高度（initItemHeight）,当我们渲染的时候，在更新对应高度，这样就可以解决子列表高度的问题 我们需要去维护一个公共的高度列表（positions），这个数组将会记录真实的 DOM 高度信息。 positions 需要记录的信息：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> useReactive<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token punctuation">,</span>\n    positions<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">//需要记录每一项的高度</span>\n      <span class="token comment">// index         // 当前pos对应的元素的下标</span>\n      <span class="token comment">// bottom        // 底部位置</span>\n      <span class="token comment">// height        // 元素高度</span>\n      <span class="token comment">// dHeight        // 用于判断是否需要改变</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    initItemHeight<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token comment">// 预计高度</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>需要记录元素的高度，其次可以存入距离顶部和底部的高度，方便后面计算偏移量和列表的整体高度，在设定一个参数（dHeight）判断新的高度与旧的高度是否一样，不一样的话就进行更新。 其中最重要的就是 index，它用来记录子列表真实高度的下标，原因是：在之前的讲解中，我们发现 start 和 end 的差值实际上是不变的，也就是说，最终渲染的数据，实际上是一个固定值，但里面的子列表高度却是变值,所以我们需要有一个变量来区分数据所对应的高度，所以这个 index 就变的尤为重要。 所以在这里我们设置一个 ref 用来监听子节点 node，来获取真实高度,这里我设置 id 来判断对应的索引。 注意预计高度尽量要小点，可以多加载，但不能少，防止渲染不全。 初始化计算值</p><ul><li>初始化 positions （Dom 挂载前）</li><li>根据真实 Dom 高度刷新 positions 位置信息</li><li>索引的结束位置：end</li><li>缓冲个数：bufferCount</li><li>需要渲染的节点数量（可视区能渲染几个节点）</li><li>列表高度： listHeight 滚动后计算值</li><li>索引的起始位置：start （二分查找）</li><li>索引的结束位置：end</li><li>偏移量：currentOffset</li><li>重新获取需要渲染的列表数据：data</li><li>重新根据真实 Dom 高度刷新 positions 位置信息</li><li>重新计算列表高度： listHeight 注意滚动重新计算 positions 位置信息和初始计算不一样，可以直接从 end 下标开始计算因为只有这个子元素高度是变化的。</li></ul><h4 id="完整代码"><a class="header-anchor" href="#完整代码">#</a> 完整代码</h4><p>定义 HOC</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">/* eslint-disable react-hooks/rules-of-hooks */</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> throttle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lodash-es&#39;</span>\n<span class="token keyword">import</span> <span class="token constant">NP</span> <span class="token keyword">from</span> <span class="token string">&#39;number-precision&#39;</span>\n<span class="token keyword">import</span> useCreation <span class="token keyword">from</span> <span class="token string">&#39;virtual-list/core/hooks/useCreation&#39;</span>\n<span class="token keyword">import</span> useEventListener <span class="token keyword">from</span> <span class="token string">&#39;virtual-list/core/hooks/useEventListener&#39;</span>\n<span class="token keyword">import</span> useReactive <span class="token keyword">from</span> <span class="token string">&#39;virtual-list/core/hooks/useReactive&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> binarySearch<span class="token punctuation">,</span> createScheduler <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;virtual-list/core/utils&#39;</span>\n<span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">enableBoundaryChecking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">{</span>\n  ListItem<span class="token operator">:</span> any\n  scrollAllHeight<span class="token operator">:</span> number\n  initItemHeight<span class="token operator">:</span> number\n  itemMarginBottom<span class="token operator">:</span> number\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">VirtualListHOC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>\n  ListItem<span class="token punctuation">,</span>\n  scrollAllHeight<span class="token punctuation">,</span>\n  initItemHeight<span class="token punctuation">,</span>\n  itemMarginBottom\n<span class="token punctuation">}</span><span class="token operator">:</span> IProps</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> list<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> allRef <span class="token operator">=</span> useRef<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 容器的ref</span>\n  <span class="token keyword">const</span> scrollRef <span class="token operator">=</span> useRef<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 检测滚动</span>\n  <span class="token keyword">const</span> ref <span class="token operator">=</span> useRef<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 检测滚动</span>\n\n  <span class="token keyword">const</span> state <span class="token operator">=</span> useReactive<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//渲染的数据</span>\n    scrollAllHeight<span class="token operator">:</span> scrollAllHeight <span class="token operator">||</span> <span class="token string">&#39;100vh&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 容器的初始高度</span>\n    listHeight<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 列表高度</span>\n    renderCount<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 需要渲染的数量</span>\n    bufferCount<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">// 缓冲的个数</span>\n    start<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 起始索引</span>\n    end<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 终止索引</span>\n    currentOffset<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 偏移量</span>\n    positions<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token comment">// index         // 当前pos对应的元素的下标</span>\n      <span class="token comment">// bottom        // 底部位置</span>\n      <span class="token comment">// height        // 元素高度</span>\n      <span class="token comment">// dHeight       // 用于判断是否需要改变</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    initItemHeight<span class="token operator">:</span> initItemHeight <span class="token operator">||</span> <span class="token number">50</span> <span class="token comment">// 预计高度</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 初始高度</span>\n    <span class="token function">initPositions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">initPositions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        index<span class="token operator">:</span> i<span class="token punctuation">,</span>\n        height<span class="token operator">:</span> state<span class="token punctuation">.</span>initItemHeight<span class="token punctuation">,</span>\n        bottom<span class="token operator">:</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>initItemHeight<span class="token punctuation">,</span> itemMarginBottom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        dHeight<span class="token operator">:</span> <span class="token number">0</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    state<span class="token punctuation">.</span>positions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>data<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 子列表高度：为默认的预计高度</span>\n    <span class="token keyword">const</span> ItemBoxHeight <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>initItemHeight<span class="token punctuation">,</span> itemMarginBottom<span class="token punctuation">)</span> <span class="token comment">// 子节点包含margin的高度</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> scrollAllHeight <span class="token punctuation">}</span> <span class="token operator">=</span> state <span class="token comment">// 容器的高度</span>\n    <span class="token keyword">const</span> listHeight <span class="token operator">=</span> state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>state<span class="token punctuation">.</span>positions<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token comment">// 列表高度：positions最后一项的bottom</span>\n    <span class="token keyword">const</span> renderCount <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>\n      Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>scrollAllHeight<span class="token punctuation">,</span> ItemBoxHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      state<span class="token punctuation">.</span>bufferCount\n    <span class="token punctuation">)</span> <span class="token comment">// 渲染节点的数量</span>\n    state<span class="token punctuation">.</span>renderCount <span class="token operator">=</span> renderCount\n    state<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>renderCount<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    state<span class="token punctuation">.</span>listHeight <span class="token operator">=</span> listHeight\n    state<span class="token punctuation">.</span>data <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>start<span class="token punctuation">,</span> state<span class="token punctuation">.</span>end<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>allRef<span class="token punctuation">,</span> list<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Dom挂载后计算位置信息</span>\n    <span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">setPosition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> nodes <span class="token operator">=</span> ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span>childNodes\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>nodes<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n    nodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token operator">:</span> HTMLDivElement</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span>\n      <span class="token keyword">const</span> rect <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取对应的元素信息</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token operator">+</span>node<span class="token punctuation">.</span>id <span class="token comment">// 通过id，来取到对应的索引</span>\n      <span class="token keyword">const</span> oldHeight <span class="token operator">=</span> state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>height <span class="token comment">// 旧的高度</span>\n      <span class="token keyword">const</span> dHeight <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>oldHeight<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token comment">// 差值</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>dHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 偏移高度不为0则更新</span>\n        state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>height <span class="token operator">=</span> rect<span class="token punctuation">.</span>height <span class="token comment">//真实高度</span>\n        state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom<span class="token punctuation">,</span> dHeight<span class="token punctuation">)</span>\n        state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>dHeight <span class="token operator">=</span> dHeight <span class="token comment">// 将差值保存</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">// 重新计算整体的高度</span>\n    <span class="token function">syncPositions</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token comment">// 真实渲染列表的起始下标</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">scrollSetPosition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> nodes <span class="token operator">=</span> ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span>childNodes\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>nodes<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n    <span class="token keyword">const</span> node <span class="token operator">=</span> nodes<span class="token punctuation">[</span>nodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// 只有最后一个节点需要重新计算</span>\n    <span class="token keyword">const</span> rect <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> endIndex <span class="token operator">=</span> <span class="token operator">+</span>node<span class="token punctuation">.</span>id <span class="token comment">// 通过id，来取到对应的索引</span>\n    <span class="token keyword">const</span> oldHeight <span class="token operator">=</span> state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>endIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>height <span class="token comment">// 旧的高度</span>\n    <span class="token keyword">const</span> endDHeight <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>oldHeight<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token comment">// 差值</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>endDHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 偏移高度不为0则更新</span>\n      state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>endIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>height <span class="token operator">=</span> rect<span class="token punctuation">.</span>height <span class="token comment">//真实高度</span>\n      state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>endIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>endIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom<span class="token punctuation">,</span> endDHeight<span class="token punctuation">)</span>\n      state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>endIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>dHeight <span class="token operator">=</span> endDHeight <span class="token comment">// 将差值保存</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 从最后一个渲染节点重新计算整体的高度</span>\n    <span class="token function">syncPositions</span><span class="token punctuation">(</span>endIndex<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">syncPositions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">startId<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> positionsLength <span class="token operator">=</span> state<span class="token punctuation">.</span>positions<span class="token punctuation">.</span>length\n    <span class="token keyword">let</span> <span class="token punctuation">{</span> dHeight <span class="token punctuation">}</span> <span class="token operator">=</span> state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>startId<span class="token punctuation">]</span>\n    state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>startId<span class="token punctuation">]</span><span class="token punctuation">.</span>dHeight <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 抹平差值 往上滚动时不再触发更新</span>\n    <span class="token comment">// 以真实渲染列表的起始下标的下一个节点为起点</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>startId<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> positionsLength<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom<span class="token punctuation">,</span> dHeight<span class="token punctuation">)</span> <span class="token comment">// 当前节点的bottom位置等于当前节点bottom减去差值</span>\n      <span class="token keyword">const</span> item <span class="token operator">=</span> state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>dHeight <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 偏移高度叠加</span>\n        dHeight <span class="token operator">+=</span> item<span class="token punctuation">.</span>dHeight\n        item<span class="token punctuation">.</span>dHeight <span class="token operator">=</span> <span class="token number">0</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    state<span class="token punctuation">.</span>listHeight <span class="token operator">=</span> state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span><span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>positionsLength<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token comment">// 更新列表总高度</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">useCreation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    state<span class="token punctuation">.</span>data <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>start<span class="token punctuation">,</span> state<span class="token punctuation">.</span>end<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">scrollSetPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>state<span class="token punctuation">.</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">handleScroll</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> scrollTop <span class="token punctuation">}</span> <span class="token operator">=</span> scrollRef<span class="token punctuation">.</span>current <span class="token comment">// 顶部高度</span>\n    state<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>positions<span class="token punctuation">,</span> scrollTop<span class="token punctuation">)</span> <span class="token comment">// 寻找起始索引</span>\n    state<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>start<span class="token punctuation">,</span> state<span class="token punctuation">.</span>renderCount<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token comment">// 偏移量直接从positions里获取start下标的下个子节点的bottom</span>\n    state<span class="token punctuation">.</span>currentOffset <span class="token operator">=</span> state<span class="token punctuation">.</span>start <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span><span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>start<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">:</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">useEventListener</span><span class="token punctuation">(</span>\n    <span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span>\n    <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token function">createScheduler</span><span class="token punctuation">(</span>handleScroll<span class="token punctuation">,</span> requestAnimationFrame<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    scrollRef\n  <span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>allRef<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>div\n        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token operator">:</span> state<span class="token punctuation">.</span>scrollAllHeight<span class="token punctuation">,</span> overflow<span class="token operator">:</span> <span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> position<span class="token operator">:</span> <span class="token string">&#39;relative&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        ref<span class="token operator">=</span><span class="token punctuation">{</span>scrollRef<span class="token punctuation">}</span>\n      <span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>div\n          style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token operator">:</span> state<span class="token punctuation">.</span>listHeight<span class="token punctuation">,</span> position<span class="token operator">:</span> <span class="token string">&#39;absolute&#39;</span><span class="token punctuation">,</span> left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token operator">/</span><span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>div\n          ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span>\n          style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n            transform<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translate3d(0, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>state<span class="token punctuation">.</span>currentOffset<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, 0)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n            position<span class="token operator">:</span> <span class="token string">&#39;relative&#39;</span><span class="token punctuation">,</span>\n            left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            right<span class="token operator">:</span> <span class="token number">0</span>\n          <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token operator">&gt;</span>\n          <span class="token punctuation">{</span>state<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n            <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">String</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginBottom<span class="token operator">:</span> itemMarginBottom <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n              <span class="token operator">&lt;</span>ListItem\n                id<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span>\n                heightRandom<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>heightRandom<span class="token punctuation">}</span>\n                <span class="token comment">// eslint-disable-next-line react/jsx-props-no-spreading</span>\n                <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span>\n              <span class="token operator">/</span><span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> VirtualListHOC\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br></div></div><p>使用 HOC</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> <span class="token constant">NP</span> <span class="token keyword">from</span> <span class="token string">&#39;number-precision&#39;</span>\n\n<span class="token keyword">import</span> VirtualListHOC <span class="token keyword">from</span> <span class="token string">&#39;./hoc&#39;</span>\n\n<span class="token keyword">import</span> img <span class="token keyword">from</span> <span class="token string">&#39;@assets/logo.png&#39;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">ArrayDataType</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> number\n  heightRandom<span class="token operator">:</span> number\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> ListItem<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>ArrayDataType<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> id<span class="token punctuation">,</span> heightRandom <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> display<span class="token operator">:</span> <span class="token string">&#39;flex&#39;</span><span class="token punctuation">,</span> alignItems<span class="token operator">:</span> <span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span> padding<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> backgroundColor<span class="token operator">:</span> <span class="token string">&#39;#b1f6f6&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>img<span class="token punctuation">}</span> width<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">80</span><span class="token punctuation">}</span> height<span class="token operator">=</span><span class="token punctuation">{</span><span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">,</span> heightRandom<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontSize<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> marginLeft<span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>列表<span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> ListItemHoc <span class="token operator">=</span> <span class="token function">VirtualListHOC</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  ListItem<span class="token punctuation">,</span>\n  scrollAllHeight<span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>\n  initItemHeight<span class="token operator">:</span> <span class="token number">70</span><span class="token punctuation">,</span>\n  itemMarginBottom<span class="token operator">:</span> <span class="token number">10</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> Index<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> setList<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>Array<span class="token operator">&lt;</span>ArrayDataType<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> arr<span class="token operator">:</span> ArrayDataType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> heightRandom <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>\n      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> i<span class="token punctuation">,</span> heightRandom <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">setList</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// mock数据</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>ListItemHoc list<span class="token operator">=</span><span class="token punctuation">{</span>list<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Index\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h3 id="元素动态高度"><a class="header-anchor" href="#元素动态高度">#</a> 元素动态高度</h3><p>不定高度是列表每一项是固定的不定高度，单渲染成真实 Dom 后高度是固定的，对于动态高度，场景则是渲染成了真实 Dom，Dom 还会被 JS 代码或者用户操作修改高度。对于这种场景我们需要增加监听元素高度变化事件，在某个元素发生变化的时候重新计算各种数据。 除了增加监听事件，其它步骤和不定高度一致。 可以使用 ResizeObserve 对真实渲染的列表节点进行监听。回调任务放入宏任务事件中进行异步调用，防止阻塞。 注意这里我们只需要对渲染的第一个子节点进行对比就行，因为当滚动时如果触发了下标更替，会重新计算所有高度。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> currentStartHeight <span class="token operator">=</span> entries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> preStartHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>state<span class="token punctuation">.</span>start<span class="token punctuation">]</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>currentStartHeight <span class="token operator">!==</span> preStartHeight <span class="token operator">&amp;&amp;</span> preStartHeight <span class="token operator">!==</span> initItemHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 对比新旧值</span>\n    <span class="token function">createScheduler</span><span class="token punctuation">(</span>setPosition<span class="token punctuation">,</span> requestAnimationFrame<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="完整代码-1"><a class="header-anchor" href="#完整代码-1">#</a> 完整代码</h4><p>定义 hoc</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">/* eslint-disable react-hooks/rules-of-hooks */</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> throttle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lodash-es&#39;</span>\n<span class="token keyword">import</span> <span class="token constant">NP</span> <span class="token keyword">from</span> <span class="token string">&#39;number-precision&#39;</span>\n<span class="token keyword">import</span> useCreation <span class="token keyword">from</span> <span class="token string">&#39;virtual-list/core/hooks/useCreation&#39;</span>\n<span class="token keyword">import</span> useEventListener <span class="token keyword">from</span> <span class="token string">&#39;virtual-list/core/hooks/useEventListener&#39;</span>\n<span class="token keyword">import</span> useReactive <span class="token keyword">from</span> <span class="token string">&#39;virtual-list/core/hooks/useReactive&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> binarySearch<span class="token punctuation">,</span> createScheduler <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;virtual-list/core/utils&#39;</span>\n<span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">enableBoundaryChecking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token comment">// npm install resize-observer-polyfill</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">{</span>\n  ListItem<span class="token operator">:</span> any\n  scrollAllHeight<span class="token operator">:</span> number\n  initItemHeight<span class="token operator">:</span> number\n  itemMarginBottom<span class="token operator">:</span> number\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">VirtualListHOC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>\n  ListItem<span class="token punctuation">,</span>\n  scrollAllHeight<span class="token punctuation">,</span>\n  initItemHeight<span class="token punctuation">,</span>\n  itemMarginBottom\n<span class="token punctuation">}</span><span class="token operator">:</span> IProps</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> list<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> allRef <span class="token operator">=</span> useRef<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 容器的ref</span>\n  <span class="token keyword">const</span> scrollRef <span class="token operator">=</span> useRef<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 检测滚动</span>\n  <span class="token keyword">const</span> ref <span class="token operator">=</span> useRef<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 检测滚动</span>\n\n  <span class="token keyword">const</span> state <span class="token operator">=</span> useReactive<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//渲染的数据</span>\n    scrollAllHeight<span class="token operator">:</span> scrollAllHeight <span class="token operator">||</span> <span class="token string">&#39;100vh&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 容器的初始高度</span>\n    listHeight<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 列表高度</span>\n    renderCount<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 需要渲染的数量</span>\n    bufferCount<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">// 缓冲的个数</span>\n    start<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 起始索</span>\n    end<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 终止索引</span>\n    currentOffset<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 偏移量</span>\n    positions<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token comment">// index         // 当前pos对应的元素的下标</span>\n      <span class="token comment">// bottom        // 底部位置</span>\n      <span class="token comment">// height        // 元素高度</span>\n      <span class="token comment">// dHeight       // 用于判断是否需要改变</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    initItemHeight<span class="token operator">:</span> initItemHeight <span class="token operator">||</span> <span class="token number">50</span> <span class="token comment">// 预计高度</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 初始高度</span>\n    <span class="token function">initPositions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">initPositions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        index<span class="token operator">:</span> i<span class="token punctuation">,</span>\n        height<span class="token operator">:</span> state<span class="token punctuation">.</span>initItemHeight<span class="token punctuation">,</span>\n        bottom<span class="token operator">:</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>initItemHeight<span class="token punctuation">,</span> itemMarginBottom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        dHeight<span class="token operator">:</span> <span class="token number">0</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    state<span class="token punctuation">.</span>positions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>data<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 子列表高度：为默认的预计高度</span>\n    <span class="token keyword">const</span> ItemBoxHeight <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>initItemHeight<span class="token punctuation">,</span> itemMarginBottom<span class="token punctuation">)</span> <span class="token comment">// 子节点包含margin的高度</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> scrollAllHeight <span class="token punctuation">}</span> <span class="token operator">=</span> state <span class="token comment">// 容器的高度</span>\n    <span class="token keyword">const</span> listHeight <span class="token operator">=</span> state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>state<span class="token punctuation">.</span>positions<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token comment">// 列表高度：positions最后一项的bottom</span>\n    <span class="token keyword">const</span> renderCount <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>\n      Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>scrollAllHeight<span class="token punctuation">,</span> ItemBoxHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      state<span class="token punctuation">.</span>bufferCount\n    <span class="token punctuation">)</span> <span class="token comment">// 渲染节点的数量</span>\n    state<span class="token punctuation">.</span>renderCount <span class="token operator">=</span> renderCount\n    state<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>renderCount<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    state<span class="token punctuation">.</span>listHeight <span class="token operator">=</span> listHeight\n    state<span class="token punctuation">.</span>data <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>start<span class="token punctuation">,</span> state<span class="token punctuation">.</span>end<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>allRef<span class="token punctuation">,</span> list<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Dom挂载后计算位置信息</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> myObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span><span class="token parameter">entries</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> currentStartHeight <span class="token operator">=</span> entries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientHeight\n        <span class="token keyword">const</span> preStartHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>state<span class="token punctuation">.</span>start<span class="token punctuation">]</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentStartHeight <span class="token operator">!==</span> preStartHeight <span class="token operator">&amp;&amp;</span> preStartHeight <span class="token operator">!==</span> initItemHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 对比新旧值</span>\n          <span class="token function">createScheduler</span><span class="token punctuation">(</span>setPosition<span class="token punctuation">,</span> requestAnimationFrame<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      myObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">setPosition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> nodes <span class="token operator">=</span> ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span>childNodes\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>nodes<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n    nodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token operator">:</span> HTMLDivElement</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span>\n      <span class="token keyword">const</span> rect <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取对应的元素信息</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token operator">+</span>node<span class="token punctuation">.</span>id <span class="token comment">// 通过id，来取到对应的索引</span>\n      <span class="token keyword">const</span> oldHeight <span class="token operator">=</span> state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>height <span class="token comment">// 旧的高度</span>\n      <span class="token keyword">const</span> dHeight <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>oldHeight<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token comment">// 差值</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>dHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 偏移高度不为0则更新</span>\n        state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>height <span class="token operator">=</span> rect<span class="token punctuation">.</span>height <span class="token comment">//真实高度</span>\n        state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom<span class="token punctuation">,</span> dHeight<span class="token punctuation">)</span>\n        state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>dHeight <span class="token operator">=</span> dHeight <span class="token comment">// 将差值保存</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// 重新计算整体的高度</span>\n    <span class="token keyword">const</span> startId <span class="token operator">=</span> <span class="token operator">+</span>nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token comment">// 真实渲染列表的起始下标</span>\n    <span class="token keyword">const</span> positionsLength <span class="token operator">=</span> state<span class="token punctuation">.</span>positions<span class="token punctuation">.</span>length\n    <span class="token keyword">let</span> <span class="token punctuation">{</span> dHeight <span class="token punctuation">}</span> <span class="token operator">=</span> state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>startId<span class="token punctuation">]</span>\n    state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>startId<span class="token punctuation">]</span><span class="token punctuation">.</span>dHeight <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 抹平差值 往上滚动时不再触发更新</span>\n    <span class="token comment">// 以真实渲染列表的起始下标的下一个节点为起点</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>startId<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> positionsLength<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom<span class="token punctuation">,</span> dHeight<span class="token punctuation">)</span> <span class="token comment">// 当前节点的bottom位置等于当前节点bottom减去差值</span>\n      <span class="token keyword">const</span> item <span class="token operator">=</span> state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>dHeight <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 偏移高度叠加</span>\n        dHeight <span class="token operator">+=</span> item<span class="token punctuation">.</span>dHeight\n        item<span class="token punctuation">.</span>dHeight <span class="token operator">=</span> <span class="token number">0</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    state<span class="token punctuation">.</span>listHeight <span class="token operator">=</span> state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span><span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>positionsLength<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bottom\n  <span class="token punctuation">}</span>\n\n  <span class="token function">useCreation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    state<span class="token punctuation">.</span>data <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>start<span class="token punctuation">,</span> state<span class="token punctuation">.</span>end<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>state<span class="token punctuation">.</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">handleScroll</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> scrollTop <span class="token punctuation">}</span> <span class="token operator">=</span> scrollRef<span class="token punctuation">.</span>current <span class="token comment">// 顶部高度</span>\n    state<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>positions<span class="token punctuation">,</span> scrollTop<span class="token punctuation">)</span> <span class="token comment">// 寻找起始索引</span>\n    state<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>start<span class="token punctuation">,</span> state<span class="token punctuation">.</span>renderCount<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token comment">// 偏移量直接从positions里获取start下标的下个子节点的bottom</span>\n    state<span class="token punctuation">.</span>currentOffset <span class="token operator">=</span> state<span class="token punctuation">.</span>start <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> state<span class="token punctuation">.</span>positions<span class="token punctuation">[</span><span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>start<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">:</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">useEventListener</span><span class="token punctuation">(</span>\n    <span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span>\n    <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token function">createScheduler</span><span class="token punctuation">(</span>handleScroll<span class="token punctuation">,</span> requestAnimationFrame<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    scrollRef\n  <span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>allRef<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>div\n        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token operator">:</span> state<span class="token punctuation">.</span>scrollAllHeight<span class="token punctuation">,</span> overflow<span class="token operator">:</span> <span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> position<span class="token operator">:</span> <span class="token string">&#39;relative&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        ref<span class="token operator">=</span><span class="token punctuation">{</span>scrollRef<span class="token punctuation">}</span>\n      <span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>div\n          style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token operator">:</span> state<span class="token punctuation">.</span>listHeight<span class="token punctuation">,</span> position<span class="token operator">:</span> <span class="token string">&#39;absolute&#39;</span><span class="token punctuation">,</span> left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token operator">/</span><span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>div\n          ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span>\n          style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n            transform<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translate3d(0, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>state<span class="token punctuation">.</span>currentOffset<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, 0)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n            position<span class="token operator">:</span> <span class="token string">&#39;relative&#39;</span><span class="token punctuation">,</span>\n            left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            right<span class="token operator">:</span> <span class="token number">0</span>\n          <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token operator">&gt;</span>\n          <span class="token punctuation">{</span>state<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n            <span class="token operator">&lt;</span>div\n              id<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">String</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span>\n              className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">listItem</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span>\n              key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span>\n              style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginBottom<span class="token operator">:</span> itemMarginBottom <span class="token punctuation">}</span><span class="token punctuation">}</span>\n            <span class="token operator">&gt;</span>\n              <span class="token operator">&lt;</span>ListItem\n                id<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span>\n                showDetail<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>showDetail<span class="token punctuation">}</span>\n                heightRandom<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>heightRandom<span class="token punctuation">}</span>\n                <span class="token comment">// eslint-disable-next-line react/jsx-props-no-spreading</span>\n                <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span>\n              <span class="token operator">/</span><span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> VirtualListHOC\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br></div></div><p>使用 HOC</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> <span class="token constant">NP</span> <span class="token keyword">from</span> <span class="token string">&#39;number-precision&#39;</span>\n\n<span class="token keyword">import</span> VirtualListHOC <span class="token keyword">from</span> <span class="token string">&#39;./hoc&#39;</span>\n\n<span class="token keyword">import</span> img <span class="token keyword">from</span> <span class="token string">&#39;@assets/logo.png&#39;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">ArrayDataType</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> number\n  heightRandom<span class="token operator">:</span> number\n  showDetail<span class="token operator">:</span> boolean\n  handleShowDetail<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> ListItem<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>ArrayDataType<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> heightRandom<span class="token punctuation">,</span> handleShowDetail<span class="token punctuation">,</span> showDetail <span class="token punctuation">}</span> <span class="token operator">=</span> props\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> display<span class="token operator">:</span> <span class="token string">&#39;flex&#39;</span><span class="token punctuation">,</span> alignItems<span class="token operator">:</span> <span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span> padding<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> backgroundColor<span class="token operator">:</span> <span class="token string">&#39;#f6dab1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>img<span class="token punctuation">}</span> width<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">80</span><span class="token punctuation">}</span> height<span class="token operator">=</span><span class="token punctuation">{</span><span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">,</span> heightRandom<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>details open<span class="token operator">=</span><span class="token punctuation">{</span>showDetail<span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontSize<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> marginLeft<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> cursor<span class="token operator">:</span> <span class="token string">&#39;pointer&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>summary\n          onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            handleShowDetail <span class="token operator">&amp;&amp;</span> <span class="token function">handleShowDetail</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token operator">&gt;</span>\n          第 <span class="token punctuation">{</span>id<span class="token punctuation">}</span> 章概要\n        <span class="token operator">&lt;</span><span class="token operator">/</span>summary<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontSize<span class="token operator">:</span> <span class="token number">14</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n          将进酒·君不见 李白·唐 君不见，黄河之水天上来，奔流到海不复回。\n          君不见，高堂明镜悲白发，朝如青丝暮成雪。 人生得意须尽欢，莫使金樽空对月。天生我材必有用，\n          千金散尽还复来。烹羊宰牛且为乐，会须一饮三百杯。\n          千金散尽还复来。烹羊宰牛且为乐，会须一饮三百杯。\n          千金散尽还复来。烹羊宰牛且为乐，会须一饮三百杯。\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>details<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> ListItemHoc <span class="token operator">=</span> <span class="token function">VirtualListHOC</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  ListItem<span class="token punctuation">,</span>\n  scrollAllHeight<span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>\n  initItemHeight<span class="token operator">:</span> <span class="token number">70</span><span class="token punctuation">,</span>\n  itemMarginBottom<span class="token operator">:</span> <span class="token number">10</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> Index<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> setList<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>Array<span class="token operator">&lt;</span>ArrayDataType<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> arr<span class="token operator">:</span> ArrayDataType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> heightRandom <span class="token operator">=</span> <span class="token constant">NP</span><span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>\n      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> i<span class="token punctuation">,</span> heightRandom<span class="token punctuation">,</span> showDetail<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">setList</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// mock数据</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">handleShowDetail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> listTemp <span class="token operator">=</span> list\n    listTemp<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>showDetail <span class="token operator">=</span> <span class="token operator">!</span>listTemp<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>showDetail\n    <span class="token function">setList</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>listTemp<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>ListItemHoc list<span class="token operator">=</span><span class="token punctuation">{</span>list<span class="token punctuation">}</span> handleShowDetail<span class="token operator">=</span><span class="token punctuation">{</span>handleShowDetail<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Index\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br></div></div>',30),t={render:function(n,s){return p}}}}]);