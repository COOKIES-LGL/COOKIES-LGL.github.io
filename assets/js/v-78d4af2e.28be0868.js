(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[6140],{1935:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-78d4af2e",path:"/pages/blog-daily/make-self-cli/",title:"",lang:"zh-CN",frontmatter:{sideBar:!0},excerpt:"",headers:[{level:3,title:"我们要做啥",slug:"我们要做啥",children:[]},{level:3,title:"如何打造一个自己的 cli 工具",slug:"如何打造一个自己的-cli-工具",children:[]},{level:3,title:"主流程",slug:"主流程",children:[]},{level:3,title:"看下 package.json",slug:"看下-package-json",children:[]},{level:3,title:"如何生成代码模板",slug:"如何生成代码模板",children:[]},{level:3,title:"如何通过 cli 的方式调用",slug:"如何通过-cli-的方式调用",children:[]},{level:3,title:"如何调试",slug:"如何调试",children:[]},{level:3,title:"如何发布到社区",slug:"如何发布到社区",children:[]}],filePathRelative:"pages/blog-daily/make-self-cli/README.md",git:{updatedTime:1733294272e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:3},{name:"guilin.li",email:"1344714332@qq.com",commits:1}]}}},5152:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>c});var p=a(6252);const t=(0,p.uE)('<h3 id="我们要做啥"><a class="header-anchor" href="#我们要做啥">#</a> 我们要做啥</h3><p>vue-cli 工具那样大家都使用过，通过在终端执行,<br> 可以和用户做交互，然后基于用户的选择来自动生成对应的* Vue *项目模板</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61f384a5ea7a45df853314502e3ba34f~tplv-k3u1fbpfcp-watermark.image" alt="RUNOOB 演示图"></p><h3 id="如何打造一个自己的-cli-工具"><a class="header-anchor" href="#如何打造一个自己的-cli-工具">#</a> 如何打造一个自己的 cli 工具</h3><p>先看下项目目录<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb605c86767045729fc6421930e3b845~tplv-k3u1fbpfcp-watermark.image" alt="项目目录"></p><h3 id="主流程"><a class="header-anchor" href="#主流程">#</a> 主流程</h3><p>整个程序的主流程,就是把我们之前手动创建 Vue 的过程给自动化 我们先看看手动是需要几个步骤 先创建一个项目（也就是创建文件夹） 在创建 index.js 程序入口文件 编写对应的 Vue 代码 接着创建 package.json (也有可能是用 npm init 来生成的) 编写对应的 package.json 的配置 安装依赖 那怎么自动化呢？其实就是把上面的过程翻译成代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// # index.js 入口文件</span>\n<span class="token comment">// 1. 创建项目文件夹</span>\nfs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span><span class="token function">getRootPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 2. 创建 index.js</span>\nfs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getRootPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/index.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 3. 创建 package.json</span>\nfs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getRootPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/package.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token string">&quot;package&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 4. 安装依赖</span>\n<span class="token constant">TODO</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这里直接使用 fs 创建对应的文件夹、index.js、package.json 文件就可以了<br> 最后一步给了一个 TODO, 是因为我们的 package.json 的内容还没有定义好，所以也安装不了依赖，<br> 等到我们解决了 package.json 内容的问题后，在来处理这个点。<br> 好，到目前为止，我们程序的主流程就已经定义好了<br> 接下来就是一个逐步完善的过程了</p><h3 id="看下-package-json"><a class="header-anchor" href="#看下-package-json">#</a> 看下 package.json</h3><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// # package.json 配置文件</span>\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;teach-setup-koa&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件</span>\n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./bin/index.js&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;bin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;package.json&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rm -rf ./hei &amp;&amp; node ./bin/index.js&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;chalk&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.1.1&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 美化输出使输出有颜色有辨识度</span>\n    <span class="token property">&quot;ejs&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.1.6&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 项目模版引擎</span>\n    <span class="token property">&quot;execa&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.1.1&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 执行命令的node包,也可用node的内置模块 child_process</span>\n    <span class="token property">&quot;inquirer&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^8.1.0&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 用户交互插件用来询问用户的配置</span>\n    <span class="token property">&quot;prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.3.1&quot;</span> <span class="token comment">// 格式化代码输出,移除空白行</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="如何生成代码模板"><a class="header-anchor" href="#如何生成代码模板">#</a> 如何生成代码模板</h3><p>index.js 和 package.json 其实都是代码模板，我们只需要基于动态的数据生成就可以了<br> 而在模板技术选型上，我选择了 ejs ，当然你也可以使用你熟悉的或者你喜欢的库来生成<br> createIndexTemplate.js 模块的职责就是基于 template/index.ejs 来生成 index.js 的代码</p><h3 id="如何通过-cli-的方式调用"><a class="header-anchor" href="#如何通过-cli-的方式调用">#</a> 如何通过 cli 的方式调用</h3><p>那我们想让用户通过 cli 的方式调用的话，还应该做什么事呢？<br> 还需要处理 2 个事<br> 在 package.json 里面配置 bin 字段，然后创建 bin 文件夹，把之前所有的代码都放到 bin 文件夹内<br> 在 bin/index.js 文件夹的头部写上以下注释</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bin/index.js</span>\n#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="如何调试"><a class="header-anchor" href="#如何调试">#</a> 如何调试</h3><p>我们在本地调用 node bin/index.js 执行起来肯定是没有任何问题了，<br> 但是我们这个程序到时候是需要让用户通过 cli 直接执行的，<br> 那我们怎么可以模拟一下测试一下呢？ 我们只需要在当前的这个项目路径下，执行 npm link 即可<br> npm 会帮助我们把这个项目链接到 root 下，可以执行 npm root -g 来查看</p><p>cli-demo 通过软连接的方式指向了你的代码库</p><p>然后我们就可以像调用全局的 cli 命令一样来调用自己的这个库了<br> 比如说，你在 package.json 里面 name 是 cli-demo ,<br> 那么在你执行完 npm link 后，就可以在终端执行 cli-demo 命令了</p><h3 id="如何发布到社区"><a class="header-anchor" href="#如何发布到社区">#</a> 如何发布到社区</h3><p>辛辛苦苦做完的程序，光自己用肯定不行，必须 show 出来，让其他的小伙伴也都用上， 那怎么办呢？<br> 我们只要把程序发布到 npm 上就可以啦。<br> 而发布到 npm 也很简单，只需要执行:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 先登录</span>\nnpm login\n<span class="token comment">// 在发布</span>\nnpm publish\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>如果你只是为了测试，希望你发布完可以把包删除掉 npm unpublish --force</p></div>',24),e={href:"https://juejin.cn/post/7051851544391598094/",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("参考"),c={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("p",null,[(0,p.Wm)("a",e,[o,(0,p.Wm)(a)])])],64)}}}}]);