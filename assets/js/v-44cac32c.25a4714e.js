(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[5852],{7194:(e,i,r)=>{"use strict";r.r(i),r.d(i,{data:()=>a});const a={key:"v-44cac32c",path:"/pages/redis-kafaka-elastic/",title:"",lang:"zh-CN",frontmatter:{sidebar:!1},excerpt:"",headers:[{level:3,title:"日常使用",slug:"日常使用",children:[]},{level:3,title:"Elasticsearch",slug:"elasticsearch",children:[]},{level:3,title:"Redis",slug:"redis",children:[]},{level:3,title:"介绍下缓存击穿和穿透：",slug:"介绍下缓存击穿和穿透",children:[]}],filePathRelative:"pages/redis-kafaka-elastic/README.md",git:{updatedTime:1725951026e3,contributors:[{name:"guilin.li",email:"1344714332@qq.com",commits:3},{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:1}]}}},2914:(e,i,r)=>{"use strict";r.r(i),r.d(i,{default:()=>o});var a=r(6252);const s=(0,a.uE)('<h3 id="日常使用"><a class="header-anchor" href="#日常使用">#</a> 日常使用</h3><ul><li><a href="./usefulTips">usefulTips</a> <span style="color:#bbb;float:right;">2021-06-20</span></li></ul><h3 id="elasticsearch"><a class="header-anchor" href="#elasticsearch">#</a> Elasticsearch</h3><p>Elasticsearch 是一个实时的分布式搜索分析引擎，它能让你以前所未有的速度和规模，去探索你的数据。 它被用作全文检索、结构化搜索、分析以及这三个功能的组合：</p><ul><li>Wikipedia 使用 Elasticsearch 提供带有高亮片段的全文搜索，还有 search-as-you-type 和 did-you-mean 的建议。 卫报 使用 Elasticsearch 将网络社交数据结合到访客日志中，为它的编辑们提供公众对于新文章的实时反馈。 Stack Overflow 将地理位置查询融入全文检索中去，并且使用 more-like-this 接口去查找相关的问题和回答。</li><li>GitHub 使用 Elasticsearch 对 1300 亿行代码进行查询。</li></ul>',5),l={href:"https://www.elastic.co/guide/cn/elasticsearch/guide/current/getting-started.html",target:"_blank",rel:"noopener noreferrer"},d=(0,a.Uk)("Elastic 官方文档"),h=(0,a.uE)('<h3 id="redis"><a class="header-anchor" href="#redis">#</a> Redis</h3><h4 id="redis-简介"><a class="header-anchor" href="#redis-简介">#</a> redis 简介</h4><p>redis（Remote Dictionary Server ，即远程字典服务)，是使用 C 语言编写的，基于内存存储，Key-Value 类型的数据库。它支持网络，亦可持久化。可用作数据库，高速缓存和消息队列代理。是为了解决高并发、高扩展，大数据存储等一系列的问题而产生的数据库解决方案。</p><h4 id="redis-概述"><a class="header-anchor" href="#redis-概述">#</a> redis 概述</h4><p>在我们日常的 Web 开发中，都是使用数据库来进行数据的存储，可是一旦涉及大数据量的需求，比如一些商品抢购的情景，或者是主页访问量瞬间较大的时候，单一使用数据库来保存数据的系统会因为面向磁盘，磁盘读/写速度比较慢的问题而存在严重的性能弊端，一瞬间成千上万的请求到来，需要系统在极短的时间内完成成千上万次的读/写操作，这个时候往往不是数据库能够承受的，极其容易造成数据库系统瘫痪，最终导致服务宕机的严重生产问题。 为了克服上述的问题，通常会引入 NoSQL 技术，这是一种基于内存的数据库，并且提供一定的持久化功能。 Redis 和 MongoDB 是当前使用最广泛的 NoSQL，而就 Redis 技术而言，它的性能十分优越，可以支持每秒十几万此的读/写操作，其性能远超数据库，并且还支持集群、分布式、主从同步等配置，原则上可以无限扩展，让更多的数据存储在内存中，更让人欣慰的是它还支持一定的事务能力，这保证了高并发的场景下数据的安全和一致性</p><ul><li>reids 支持的数据结构，如字符串（strings），散列（hashes），列表（lists），集合（sets），有序集合（sorted sets），数据流（steam)。</li><li>redis 支持的范围查询，如 bitmaps， hyperloglogs 和地理空间（geospatial）索引半径查询。</li><li>redis 支持的数据备份，有一种是 RDB，一种是 AOF</li><li>redis 支持的运行模式，有哨兵模式（Sentinel）和自动分区的集群模式（Cluster），来提供高可用性（high availability）。</li><li>redis 支持的运行功能，如复制（replication）， LUA 脚本（Lua scripting）， LRU 驱动事件（LRU eviction），事务（transactions）。</li></ul><h4 id="redis-的应用场景"><a class="header-anchor" href="#redis-的应用场景">#</a> redis 的应用场景</h4><ul><li>redis 由于数据的读取和操作都在内存当中操作，读写的效率较高，所以经常被用来做数据的缓存。把一些需要频繁访问的数据，而且在短时间之内不会发生变化的，放入 redis 中进行操作。从而提高用户的请求速度和降低网站的负载，降低数据库的读写次数，就把这些数据放到缓存中。</li><li>一些常用的实时计算的功能。需要实时变化和展示的功能，就可以把相关数据放在 redis 中进行操作。大大提高效率。</li><li>消息队列，经常用来构建类似实时聊天系统的功能，大大提高应用的可用性。</li></ul><h4 id="redis-与其他-key-value-存储有什么不同"><a class="header-anchor" href="#redis-与其他-key-value-存储有什么不同">#</a> Redis 与其他 key-value 存储有什么不同</h4><p>Redis 有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis 的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。 Redis 运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样 Redis 可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</p><h4 id="redis-优势"><a class="header-anchor" href="#redis-优势">#</a> Redis 优势</h4><ol><li>速度快性能极高</li><li>丰富的数据类型</li><li>支持操作原子性</li><li>主从操作，发布订阅</li></ol><h4 id="redis-缺点"><a class="header-anchor" href="#redis-缺点">#</a> Redis 缺点</h4><p>是数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此 Redis 适合的场景主要局限在较小数据量的高性能操作和运算上。</p><h4 id="rdb-与-aof-持久化"><a class="header-anchor" href="#rdb-与-aof-持久化">#</a> RDB 与 AOF 持久化</h4><p>RDB 持久化是指在指定的时间间隔内将内存中的数据集快照写入磁盘，实际操作过程是 fork 一个子进程，先将数据集写入临时文件，写入成功后，再替换之前的文件，用二进制压缩存储。RDB 是 Redis 默认的持久化方式，会在对应的目录下生产一个 dump.rdb 文件，重启会通过加载 dump.rdb 文件恢复数据。</p><p>优点：</p><p>1）只有一个文件 dump.rdb，方便持久化； 2）容灾性好，一个文件可以保存到安全的磁盘； 3）性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO 最大化（使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能) ； 4）如果数据集偏大，RDB 的启动效率会比 AOF 更高。</p><p>缺点：</p><p>1）数据安全性低。（RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不是特别严格的时候） 2）由于 RDB 是通过 fork 子进程来协助完成数据持久化工作的，因此，如果当数据集较大时，可能会导致整个服务器停止服务几百毫秒，甚至是 1 秒钟。</p><p>AOF 持久化是以日志的形式记录服务器所处理的每一个写、删除操作，查询操作不会记录，以文本的方式记录，文件中可以看到详细的操作记录。她的出现是为了弥补 RDB 的不足（数据的不一致性），所以它采用日志的形式来记录每个写操作，并追加到文件中。Redis 重启的会根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><p>优点：</p><p>1）数据安全性更高，AOF 持久化可以配置 appendfsync 属性，其中 always，每进行一次命令操作就记录到 AOF 文件中一次。 2）通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。 3）AOF 机制的 rewrite 模式。(AOF 文件没被 rewrite 之前（文件过大时会对命令进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）)</p><p>缺点</p><p>1）AOF 文件比 RDB 文件大，且恢复速度慢；数据集大的时候，比 RDB 启动效率低。 2）根据同步策略的不同，AOF 在运行效率上往往会慢于 RDB。</p><h3 id="介绍下缓存击穿和穿透"><a class="header-anchor" href="#介绍下缓存击穿和穿透">#</a> 介绍下缓存击穿和穿透：</h3><h4 id="缓存穿透"><a class="header-anchor" href="#缓存穿透">#</a> 缓存穿透：</h4><p>是指查询一个数据库一定不存在的数据。正常的使用缓存流程大致是，数据查询先进行缓存查询，如果 key 不存在或者 key 已经过期，再对数据库进行查询，并把查询到的对象，放进缓存。如果数据库查询对象为空，则不放进缓存。</p><h4 id="缓存击穿"><a class="header-anchor" href="#缓存击穿">#</a> 缓存击穿：</h4><p>是指一个 key 非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个 key 在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p>',30),t={href:"https://redis.io",target:"_blank",rel:"noopener noreferrer"},c=(0,a.Uk)("redis 官网"),n={href:"https://www.lanmper.cn/redis",target:"_blank",rel:"noopener noreferrer"},p=(0,a.Uk)("redis 中文手册"),o={render:function(e,i){const r=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.j4)(a.HY,null,[s,(0,a.Wm)("ul",null,[(0,a.Wm)("li",null,[(0,a.Wm)("a",l,[d,(0,a.Wm)(r)])])]),h,(0,a.Wm)("ul",null,[(0,a.Wm)("li",null,[(0,a.Wm)("a",t,[c,(0,a.Wm)(r)])]),(0,a.Wm)("li",null,[(0,a.Wm)("a",n,[p,(0,a.Wm)(r)])])])],64)}}}}]);