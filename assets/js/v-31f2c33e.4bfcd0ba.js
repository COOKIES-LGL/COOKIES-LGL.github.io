(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[3290],{8530:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-31f2c33e",path:"/pages/backend/TypeORM/",title:"",lang:"zh-CN",frontmatter:{sideBar:!1},excerpt:"",headers:[{level:2,title:"TypeORM 使用笔记",slug:"typeorm-使用笔记",children:[]}],filePathRelative:"pages/backend/TypeORM/README.md",git:{updatedTime:1725951026e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:2}]}}},6861:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h2 id="typeorm-使用笔记"><a class="header-anchor" href="#typeorm-使用笔记">#</a> TypeORM 使用笔记</h2><p>TypeORM 是一个用于 TypeScript 和 JavaScript 的对象关系映射器（ORM），它运行在 Node.js 平台上，支持多种类型的数据库。 TypeORM 的主要目标是提供一种简单的方式来与数据库进行交互，同时保持类型安全。</p><p>使用 TypeORM，您可以定义实体（类），这些实体将映射到数据库中的表。然后，您可以使用 TypeORM 提供的方法来执行 CRUD（创建、读取、更新、删除）操作。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> PrimaryGeneratedColumn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  @<span class="token function">PrimaryGeneratedColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  lastName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 我们定义了一个名为 User 的实体，它有四个列：id、firstName、lastName 和 age</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',4),e={render:function(n,s){return p}}}}]);