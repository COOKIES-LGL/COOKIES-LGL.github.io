(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[6937],{9369:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>e});const e={key:"v-6b1bfdc8",path:"/pages/javascript/regexp/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:". 代表非换行符的任务字符",slug:"代表非换行符的任务字符",children:[]},{level:3,title:"正则环视",slug:"正则环视",children:[]},{level:3,title:"\\b 单词字间位置 \\B 非字间",slug:"b-单词字间位置-b-非字间",children:[]},{level:3,title:"匹配字符串",slug:"匹配字符串",children:[]},{level:3,title:"正则标记位",slug:"正则标记位",children:[]},{level:3,title:"贪婪模式、懒惰模式",slug:"贪婪模式、懒惰模式",children:[]},{level:3,title:"分组",slug:"分组",children:[]}],filePathRelative:"pages/javascript/regexp/README.md",git:{updatedTime:1743660353e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:6}]}}},1252:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>i});var e=a(6252);const t=(0,e.Wm)("h3",{id:"代表非换行符的任务字符"},[(0,e.Wm)("a",{class:"header-anchor",href:"#代表非换行符的任务字符"},"#"),(0,e.Uk)(" . 代表非换行符的任务字符")],-1),p=(0,e.Uk)("如果想要获取包括换行符在的任务字符"),o=(0,e.Wm)("br",null,null,-1),l=(0,e.Uk)(" 可以用 ([\\s\\S])，也可以用 “([\\d\\D])”、“([\\w\\W]_)” 来匹配 "),c={href:"https://jex.im/regulex/#!flags=&re=%5E(a%7Cb)_%3F%24",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("在线验证工具"),u=(0,e.uE)('<h3 id="正则环视"><a class="header-anchor" href="#正则环视">#</a> 正则环视</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>否定逆序环视(?&lt;!)<br> 肯定逆序环视(?&lt;=)<br> 否定顺序环视(?!)<br> 肯定顺序环视(?=)</p></div><p>否定逆序环视：在这个位置的前边（逆序），不能有（否定）条件给出的字符串<br> 肯定逆序环视：在这个位置的前边（逆序），必须是（肯定）条件给出的字符串<br> 否定顺序环视：在这个位置的后边（顺序），不能有（否定）条件给出的字符串<br> 肯定顺序环视，在这个位置的后边（顺序），必须是（肯定）条件给出的字符串</p><p>环视结果标记的是一个位置</p><h3 id="b-单词字间位置-b-非字间"><a class="header-anchor" href="#b-单词字间位置-b-非字间">#</a> \\b 单词字间位置 \\B 非字间</h3><h3 id="匹配字符串"><a class="header-anchor" href="#匹配字符串">#</a> 匹配字符串</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> getRegion <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token string">&#39;eu&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;us&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">settle-search-(.+?)\\.</span><span class="token regex-delimiter">/</span></span>\n  <span class="token keyword">return</span> location<span class="token operator">?.</span>host<span class="token operator">?.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">as</span> any <span class="token comment">// settle-search-us.com 会获取到us地区</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="正则标记位"><a class="header-anchor" href="#正则标记位">#</a> 正则标记位</h3><ul><li>g 全局搜索。</li><li>i 不区分大小写搜索。</li><li>m 多行搜索。</li><li>s 允许 . 匹配换行符。</li></ul><h3 id="贪婪模式、懒惰模式"><a class="header-anchor" href="#贪婪模式、懒惰模式">#</a> 贪婪模式、懒惰模式</h3><p><strong>贪婪模式</strong> 正则默认是贪婪模式,会尽可能匹配更多字符，直至无法满足后续匹配条件为止 ‌</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{1,3})(\\d{1,3})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 其中，前面的\\d{1,3}匹配的是&quot;123&quot;，后面的\\d{1,3}匹配的是&quot;45&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>懒惰模式</strong></p><p>惰性量词就是在贪婪量词后面加个问号。表示尽可能少的匹配</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{1,3}?)(\\d{1,3})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// =&gt; [&quot;1234&quot;, &quot;1&quot;, &quot;234&quot;, index: 0, input: &quot;12345&quot;]</span>\n<span class="token comment">// 其中\\d{1,3}?只匹配到一个字符&quot;1&quot;，而后面的\\d{1,3}匹配了&quot;234&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="分组"><a class="header-anchor" href="#分组">#</a> 分组</h3><p>在()内使用|达到或的效果，如(abc | xxx)可以匹配 abc 或者 xxx</p><p>反向引用，巧用$分组捕获</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// 交换名字和姓氏</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(john) (smith)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span> <span class="token string">&quot;$2, $1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Smith, John</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',19),i={render:function(s,n){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)("p",null,[p,o,l,(0,e.Wm)("a",c,[r,(0,e.Wm)(a)])]),u],64)}}}}]);