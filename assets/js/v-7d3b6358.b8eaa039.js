(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[4778],{958:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-7d3b6358",path:"/pages/vue/usefulTips/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"vue data 里初始值为 undefined 的值，不会做响应式处理",slug:"vue-data-里初始值为-undefined-的值-不会做响应式处理",children:[]},{level:3,title:"null 值不会触发 prop 的 default 逻辑",slug:"null-值不会触发-prop-的-default-逻辑",children:[]},{level:3,title:"多文件单文件组件",slug:"多文件单文件组件",children:[]},{level:3,title:"处理错误（和警告）的更好方法",slug:"处理错误-和警告-的更好方法",children:[]},{level:3,title:"妙用 hook 事件",slug:"妙用-hook-事件",children:[]},{level:3,title:"妙用 自定义指令",slug:"妙用-自定义指令",children:[]},{level:3,title:"动态 Watch",slug:"动态-watch",children:[]},{level:3,title:"Vue 父子组件生命周期执行顺序",slug:"vue-父子组件生命周期执行顺序",children:[]},{level:3,title:"Vue.util.defineReactive",slug:"vue-util-definereactive",children:[]},{level:3,title:"Vue diff 算法的详细讲解",slug:"vue-diff-算法的详细讲解",children:[]}],filePathRelative:"pages/vue/usefulTips/README.md",git:{updatedTime:1743393183e3,contributors:[{name:"guilin.li",email:"1344714332@qq.com",commits:6},{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:4}]}}},9938:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>c});var p=a(6252);const t=(0,p.uE)('<h3 id="vue-data-里初始值为-undefined-的值-不会做响应式处理"><a class="header-anchor" href="#vue-data-里初始值为-undefined-的值-不会做响应式处理">#</a> vue data 里初始值为 undefined 的值，不会做响应式处理</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">AddAddress</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> address<span class="token operator">:</span> Object<span class="token punctuation">;</span> <span class="token comment">// 没赋值的话默认为undefined，undefined不会做响应式处理，后续的变更不会触发页面的更新</span>\n  <span class="token keyword">private</span> address<span class="token operator">:</span> Object <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 需要响应式的话需要赋一个初始值，比如null</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="null-值不会触发-prop-的-default-逻辑"><a class="header-anchor" href="#null-值不会触发-prop-的-default-逻辑">#</a> null 值不会触发 prop 的 default 逻辑</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">AddAddress</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> address<span class="token operator">:</span> Object<span class="token punctuation">;</span> <span class="token comment">// 没赋值的话默认为undefined，undefined不会做响应式处理，后续的变更不会触发页面的更新</span>\n  <span class="token keyword">private</span> address<span class="token operator">:</span> Object <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 需要响应式的话需要赋一个初始值，比如null</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="多文件单文件组件"><a class="header-anchor" href="#多文件单文件组件">#</a> 多文件单文件组件</h3><p>这是**SFC(单文件组件)**的一点已知功能。 可以像常规 HTML 文件一样导入文件：</p><div class="language-Vue ext-Vue line-numbers-mode"><pre class="language-Vue"><code>&lt;template src=&quot;./template.html&quot;&gt;&lt;/template&gt;\n&lt;script src=&quot;./script.js&quot;&gt;&lt;/script&gt;\n&lt;style scoped src=&quot;./styles.css&quot;&gt;&lt;/style&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果你需要分享样式、文件或其他任何东西，这可能会非常方便。</p><h3 id="处理错误-和警告-的更好方法"><a class="header-anchor" href="#处理错误-和警告-的更好方法">#</a> 处理错误（和警告）的更好方法</h3><p>我们可以为 Vue 中的错误和警告提供一个自定义处理程序。</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">ts</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code>Vue.config.errorHandler = (err) =&gt; {   alert(err); };\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>像 Bugsnag 和 Rollbar 这样的错误跟踪服务，可以钩住这些处理程序来记录错误，但你也可以用它们来更优雅地处理错误，以获得更好的用户体验。 例如，如果一个错误未被处理，应用程序不会直接崩溃，你可以显示一个完整的错误屏幕，让用户刷新或尝试其他东西。<br> 在 Vue3 中，错误处理程序只能处理  template  和  watcher  错误，<br> 但是  Vue2 的错误处理程序可以捕获几乎所有错误。这两个版本中的警告处理程序只在开发阶段有效。</p><h3 id="妙用-hook-事件"><a class="header-anchor" href="#妙用-hook-事件">#</a> 妙用 hook 事件</h3><p>如果想监听子组件的生命周期时，可以像下面例子中这么做：</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name"><span class="token namespace">@hook:</span>mounted</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>removeLoading<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n这样的写法可以用于处理加载第三方的初始化过程稍漫长的子组件时，我们可以加loading动画，等到子组件加载完毕，到了mounted生命周期时，把loading动画移除。\n初次之外hook还有一个常用的写法，在一个需要轮询更新数据的组件上，我们通常在created里开启定时器，然后在beforeDestroy上清除定时器。而通过hook,开启和销毁定时器的逻辑我们都可以在created里实现：\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 更新逻辑</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 通过$once和hook监听实例自身的beforeDestroy，触发该生命周期时清除定时器</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$once</span><span class="token punctuation">(</span><span class="token string">&quot;hook:beforeDestroy&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">broadcast</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">componentName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> <span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">;</span>\n  children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> name <span class="token operator">=</span> child<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> componentName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      child<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">broadcast</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> componentName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">componentName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> <span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> name <span class="token operator">=</span> parent<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> componentName <span class="token operator">!==</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>$parent<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      name <span class="token operator">=</span> parent<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    parent<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">componentName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> <span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">dispatch</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> componentName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">broadcast</span><span class="token punctuation">(</span><span class="token parameter">componentName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> <span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">broadcast</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> componentName<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h3 id="妙用-自定义指令"><a class="header-anchor" href="#妙用-自定义指令">#</a> 妙用 自定义指令</h3><h4 id="v-loading"><a class="header-anchor" href="#v-loading">#</a> v-loading</h4><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token comment">&lt;!-- 定义loading 组件 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>loadingcssbox<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../assets/loading.gif<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 定义指令</span>\n<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">//引入加载动画组件</span>\n<span class="token keyword">import</span> LoadingCom <span class="token keyword">from</span> <span class="token string">&quot;./LoadingCom.vue&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> loadingDirectiive <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">inserted</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> bing<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// el ==&gt;表示被绑定了指令的那个元素，这个el是一个原生的js对象。</span>\n    <span class="token comment">// bing ==&gt; 指令相关的信息</span>\n    <span class="token comment">// 得到一个组件的构造函数</span>\n    <span class="token keyword">const</span> loadingCtor <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>LoadingCom<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 得到实例loadingComp</span>\n    <span class="token keyword">const</span> loadingComp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">loadingCtor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 获取实例的html</span>\n    <span class="token keyword">const</span> htmlLoading <span class="token operator">=</span> loadingComp<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>$el<span class="token punctuation">;</span>\n    <span class="token comment">// 将html放在el的实例上面去</span>\n    el<span class="token punctuation">.</span>myHtml <span class="token operator">=</span> htmlLoading<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>bing<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">appendHtml</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">update</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> bing<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// bing.value 是v-loading绑定的那个值； true 要显示加载动画</span>\n    <span class="token comment">//新值 bing.value与旧值bing.oldValue是否相等</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>bing<span class="token punctuation">.</span>value <span class="token operator">!==</span> bing<span class="token punctuation">.</span>oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      bing<span class="token punctuation">.</span>value <span class="token operator">?</span> <span class="token function">appendHtml</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">removeHtml</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">appendHtml</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>myHtml<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">removeHtml</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  el<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>myHtml<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> loadingDirectiive<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 注册</span>\n<span class="token keyword">import</span> loadingDirectiive <span class="token keyword">from</span> <span class="token string">&quot;./components/loading/loading&quot;</span><span class="token punctuation">;</span>\nVue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&quot;loading&quot;</span><span class="token punctuation">,</span> loadingDirectiive<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token comment">&lt;!--使用--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListCom</span> <span class="token attr-name">:listArr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>listArr<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isLoadFlag<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListCom</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="动态-watch"><a class="header-anchor" href="#动态-watch">#</a> 动态 Watch</h3><p><strong>使用场景</strong> 假设你现在有一个价格 price，在这个价格变化后需要执行一段逻辑。而这个价格是通过后端接口拿到数据后初始化的，而没初始化之前，我是不需要执行这段逻辑的，这时候如果用静态 watch，肯定会让 watch 执行一次，如果在 watch 执行中有一些副作用，那就还要多加一些逻辑判断，而且这次执行是毫无意义的，应当避免它执行，这时候用动态 watch 就再合适不过</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>      \n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          \n    <span class="token keyword">return</span> <span class="token punctuation">{</span>            \n      a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            \n      unWatch<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        \n    <span class="token punctuation">}</span>    \n  <span class="token punctuation">}</span><span class="token punctuation">,</span>      \n  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    \n    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;./xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     \n    <span class="token keyword">this</span><span class="token punctuation">.</span>unWatch <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          \n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;watch执行&#39;</span><span class="token punctuation">,</span> oldVal<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        \n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            \n      immediate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        \n    <span class="token punctuation">}</span><span class="token punctuation">)</span>    \n  <span class="token punctuation">}</span>\n  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          \n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>unWatch<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 主动销毁watch            </span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              \n      <span class="token keyword">this</span><span class="token punctuation">.</span>unWatch <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        \n    <span class="token punctuation">}</span>    \n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="vue-父子组件生命周期执行顺序"><a class="header-anchor" href="#vue-父子组件生命周期执行顺序">#</a> Vue 父子组件生命周期执行顺序</h3><ul><li>挂载阶段 父 beforeCreate → 父 created → 父 beforeMount →<br> 子 beforeCreate → 子 created → 子 beforeMount → 子 mounted →<br> 父 mounted</li><li>更新阶段 父 beforeUpdate → 子 beforeUpdate → 子 updated → 父 updated</li><li>销毁阶段 父 beforeDestroy → 子 beforeDestroy → 子 destroyed → 父 destroyed</li></ul><h3 id="vue-util-definereactive"><a class="header-anchor" href="#vue-util-definereactive">#</a> Vue.util.defineReactive</h3><p>vue 提供了一个工具函数 defineReactive,可以把一个数据变成响应式的，也就是数据变化了会刷新页面</p><h3 id="vue-diff-算法的详细讲解"><a class="header-anchor" href="#vue-diff-算法的详细讲解">#</a> Vue diff 算法的详细讲解</h3>',31),e={href:"https://www.cnblogs.com/wangtong111/p/11198393.html",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("vue 的 diff 算法原理"),c={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("p",null,[(0,p.Wm)("a",e,[o,(0,p.Wm)(a)])])],64)}}}}]);