(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[7529],{5965:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-1ad9ba85",path:"/pages/blog-daily/pnpm-monorepo/",title:"",lang:"zh-CN",frontmatter:{sidebar:"auto"},excerpt:"",headers:[{level:3,title:"pnpm 搭建 Monorepo 环境",slug:"pnpm-搭建-monorepo-环境",children:[]},{level:3,title:"配置 pnpm 的 monorepo 工作区",slug:"配置-pnpm-的-monorepo-工作区",children:[]},{level:3,title:"pnpm 实现原理",slug:"pnpm-实现原理",children:[]}],filePathRelative:"pages/blog-daily/pnpm-monorepo/README.md",git:{updatedTime:1744536653e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:4}]}}},2130:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h3 id="pnpm-搭建-monorepo-环境"><a class="header-anchor" href="#pnpm-搭建-monorepo-环境">#</a> pnpm 搭建 Monorepo 环境</h3><h4 id="全局安装-pnpm"><a class="header-anchor" href="#全局安装-pnpm">#</a> 全局安装 pnpm</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token function">pnpm</span> -g\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>然后在项目下使用 pnpm init 进行 package.json 的初始化。 这跟 npm init 是一样的。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">pnpm</span> init\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>得到 package.json 初始内容，然后把 package.json 中的 name 属性删掉，并且添加一个 &quot;private&quot;: true 属性，因为它是不需要发布的。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;private&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo &quot;</span>Error<span class="token operator">:</span> no test specified<span class="token string">&quot; &amp;&amp; exit 1&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="配置-pnpm-的-monorepo-工作区"><a class="header-anchor" href="#配置-pnpm-的-monorepo-工作区">#</a> 配置 pnpm 的 monorepo 工作区</h3><p>在我们这个仓库下，我们需要管理多个项目，就可以采用 pnpm 的 monorepo。我们在仓库的根目录下创建一个 pnpm-workspace.yaml 文件，可以在 pnpm-workspace.yaml 配置文件中指定这个仓库中有多少个项目。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>packages<span class="token operator">:</span>\n  - play # 存放组件测试的代码\n  - docs # 存放组件文档\n  - packages<span class="token comment">/* # packages 目录下都是组件包\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>可以在 play 目录中运行我们写好的组件，相当于一个测试环境，在开发的时候可以知道效果是否达到预期； 还需要一个组件说明文档的项目目录：docs; packages 目录则是所有组件的项目目录了，在 packages 目录中又可以放很多包的项目目录，比如，组件包目录：components、主题包目录：theme-chalk、工具包目录：utils 等。然后每一个包目录里面也需要一个 package.json 文件进行声明这是一个 NPM 包目录。所以我们需要进入每个包目录进行初始一个 package.json 文件。以 components 包为例，我们进入到 components 目录底下初始化一个 package.json 文件，更改包名：@element-plus/components。文件内容如下：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@element-plus/components&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo &quot;</span>Error<span class="token operator">:</span> no test specified<span class="token string">&quot; &amp;&amp; exit 1&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>其他两个的包名则分别为：@element-plus/theme-chalk 和 @element-plus/utils，创建过程同上。 至此我们一个初步搭建的项目目录结构如下：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>|── README.md\n├── package.json\n├── packages\n│   ├── components\n│   │   └── package.json\n│   ├── theme-chalk\n│   │   └── package.json\n│   └── utils\n│       └── package.json\n├── play\n└── pnpm-workspace.yaml\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>仓库项目内的包相互调用 @element-plus/components、 @element-plus/theme-chalk、 @element-plus/utils 这几个包要互相进行调用呢，就需要把它们安装到仓库根目录下的 node_modules 目录中。 然后我们在根目录下进行安装操作。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">install</span> @element-plus/components -w\n<span class="token function">pnpm</span> <span class="token function">install</span> @element-plus/theme-chalk -w\n<span class="token function">pnpm</span> <span class="token function">install</span> @element-plus/utils -w\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>-w 表示安装到共公模块的 packages.json 中，也就是根目录下的 packages.json。 安装后根目录下的 package.json 的内容为：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;@element-plus/components&quot;</span><span class="token operator">:</span> <span class="token string">&quot;workspace:*&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;@element-plus/theme-chalk&quot;</span><span class="token operator">:</span> <span class="token string">&quot;workspace:*&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;@element-plus/utils&quot;</span><span class="token operator">:</span> <span class="token string">&quot;workspace:*&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>注意：workspace:* 将来发布的时候会被转换成具体的版本号。 TypeScript 初始化配置文件 接下来继续安装一些我们开发时所需要的依赖。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">install</span> vue typescript @types/node -D -w\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>因为 vue 、 typescript 和 @types/node 只是开发环境需要的，所以安装的时候需要添加一个 -D 参数表示安装到开发环境，-w 表示安装到共公模块的 packages.json 中，也就是根目录下的 packages.json。 因为我们使用了 TypeScript，这样我们想要去校验我们的代码，让我们代码有提示，并且可以按照一些规则来解析我们的语法，给我们更友好的提示，我们就需要去初始化一下这个 TypeScript 配置命令。 又因为我们安装了 typescript，所以在 node_modules 目录下 bin 目录里面就会存在一个 tsc 的命令，这个命令，就可以帮我们进行初始化，我们可以使用</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>/** 来初始化 */\n<span class="token function">npm</span> tsc --init\n/** 也可以使用 */\n<span class="token function">pnpm</span> tsc --init\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>那么执行这个命令，它就会去 node_modules 目录下 bin 目录找这个 tsc 命令进行执行。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">pnpm</span> tsc --init\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="pnpm-实现原理"><a class="header-anchor" href="#pnpm-实现原理">#</a> pnpm 实现原理</h3><ul><li>依赖存储机制：硬链接（Hard Link）‌ 全局内容寻址存储 ‌pnpm 将所有依赖包统一存储在全局目录（如 ~/.pnpm-store），每个依赖包根据内容生成唯一哈希值标识。相同版本的依赖仅存一份副本，项目通过硬链接直接指向该存储位置，避免重复下载和存储冗余数据 ‌13。</li><li>依赖存储机制：符号链接（Soft Link）‌ pnpm 通过符号链接构建树状隔离的依赖结构，结合硬链接复用全局存储的物理文件，解决了传统包管理工具的版本冲突、存储冗余和幽灵依赖问题。 通俗说 硬链接指向十几数据，符号链接指向硬链接，然后符号链接组织树状隔离的依赖结构。</li></ul>',26),e={render:function(n,s){return p}}}}]);