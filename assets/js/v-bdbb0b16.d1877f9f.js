(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[8327],{8089:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-bdbb0b16",path:"/pages/blog-daily/eslint-custom-rules/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"自定义 eslint 规则",slug:"自定义-eslint-规则",children:[]}],filePathRelative:"pages/blog-daily/eslint-custom-rules/README.md",git:{updatedTime:1733294272e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:3}]}}},3071:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h3 id="自定义-eslint-规则"><a class="header-anchor" href="#自定义-eslint-规则">#</a> 自定义 eslint 规则</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">//------------------------------------------------------------------------------</span>\n<span class="token comment">// Rule Definition</span>\n<span class="token comment">//------------------------------------------------------------------------------</span>\n\n<span class="token keyword">const</span> <span class="token constant">REPORT_MESSAGE</span> <span class="token operator">=</span>\n  <span class="token string">&quot;💣💣💣 在 SSR 环境, 声明使用全局变量非常容易造成敏感信息泄露、内存泄漏、数据缓存等问题, 请务必确认当前使用方式不会发生以上问题 💥💥💥&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">{</span> context<span class="token punctuation">,</span> node<span class="token punctuation">,</span> illegal <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>illegal<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> node<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> <span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      node<span class="token punctuation">,</span>\n      message<span class="token operator">:</span> <span class="token constant">REPORT_MESSAGE</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// const obj = {}</span>\n  <span class="token comment">// const arr = []</span>\n  <span class="token comment">// const date = new Date()</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> <span class="token string">&quot;VariableDeclaration&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> declarations <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>declarations<span class="token punctuation">)</span> <span class="token operator">?</span> item<span class="token punctuation">.</span>declarations <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    declarations\n      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>declaration<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> init <span class="token operator">=</span> declaration<span class="token punctuation">.</span>init<span class="token punctuation">;</span>\n        <span class="token comment">// const options = {</span>\n        <span class="token comment">//   fetch: {</span>\n        <span class="token comment">//     index: async (_: IInitDataParams, { post }: IFetcher) =&gt; {</span>\n        <span class="token comment">//       return post(&#39;cambridge/api/college/app/queryHotKeywords&#39;)</span>\n        <span class="token comment">//     }</span>\n        <span class="token comment">//   }</span>\n        <span class="token comment">// }</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>\n          init<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> <span class="token string">&quot;ObjectExpression&quot;</span> <span class="token operator">&amp;&amp;</span>\n          <span class="token keyword">typeof</span> declaration<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">&amp;&amp;</span>\n          declaration<span class="token punctuation">.</span>id<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&quot;options&quot;</span>\n        <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">typeof</span> init <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>declaration<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> init <span class="token operator">=</span> declaration<span class="token punctuation">.</span>init<span class="token punctuation">;</span>\n\n        <span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          node<span class="token operator">:</span> init<span class="token punctuation">,</span>\n          context<span class="token punctuation">,</span>\n          illegal<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;ObjectExpression&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ArrayExpression&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;NewExpression&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// module.exports = new Store()</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> <span class="token string">&quot;ExpressionStatement&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>expression <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> item<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> right <span class="token operator">=</span> item<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>right<span class="token punctuation">;</span>\n\n      <span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        node<span class="token operator">:</span> right<span class="token punctuation">,</span>\n        context<span class="token punctuation">,</span>\n        illegal<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;NewExpression&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// export default new Store()</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> <span class="token string">&quot;ExportDefaultDeclaration&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item<span class="token punctuation">.</span>declaration <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> init <span class="token operator">=</span> item<span class="token punctuation">.</span>declaration<span class="token punctuation">;</span>\n\n      <span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        node<span class="token operator">:</span> init<span class="token punctuation">,</span>\n        context<span class="token punctuation">,</span>\n        illegal<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;NewExpression&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// export const s = new Store()</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> <span class="token string">&quot;ExportNamedDeclaration&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item<span class="token punctuation">.</span>declaration <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">check</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>declaration<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  meta<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;suggestion&quot;</span><span class="token punctuation">,</span>\n    docs<span class="token operator">:</span> <span class="token punctuation">{</span>\n      description<span class="token operator">:</span> <span class="token constant">REPORT_MESSAGE</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token function-variable function">create</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token string">&quot;Program:exit&quot;</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token operator">?</span> node<span class="token punctuation">.</span>body <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n        body<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token function">check</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br></div></div>',2),t={render:function(n,s){return p}}}}]);