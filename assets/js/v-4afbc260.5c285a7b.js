(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[6574],{5103:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>e});const e={key:"v-4afbc260",path:"/pages/fe-sre/git/",title:"",lang:"zh-CN",frontmatter:{home:!1},excerpt:"",headers:[{level:2,title:"git 实用笔记",slug:"git-实用笔记",children:[{level:3,title:"切换账户",slug:"切换账户",children:[]},{level:3,title:"忽略大小写",slug:"忽略大小写",children:[]},{level:3,title:"更新分支名",slug:"更新分支名",children:[]},{level:3,title:"优雅回退",slug:"优雅回退",children:[]},{level:3,title:"仓库分支合并",slug:"仓库分支合并",children:[]},{level:3,title:"意外提交大小写文件到远程仓库",slug:"意外提交大小写文件到远程仓库",children:[]},{level:3,title:"gitignore 规则不生效",slug:"gitignore-规则不生效",children:[]},{level:3,title:"git 无法识别空目录",slug:"git-无法识别空目录",children:[]},{level:3,title:"git merge --no-ff",slug:"git-merge-no-ff",children:[]},{level:3,title:"git 获取当前分支名",slug:"git-获取当前分支名",children:[]},{level:3,title:"同步远程 master",slug:"同步远程-master",children:[]},{level:3,title:"当前 commitId",slug:"当前-commitid",children:[]},{level:3,title:"当前 commit diff 文件列表",slug:"当前-commit-diff-文件列表",children:[]},{level:3,title:"禁用 git push --force",slug:"禁用-git-push-force",children:[]},{level:3,title:"git ls-remote",slug:"git-ls-remote",children:[]},{level:3,title:"git ls-files",slug:"git-ls-files",children:[]},{level:3,title:"获取当前 git 仓库根目录",slug:"获取当前-git-仓库根目录",children:[]},{level:3,title:"切换目录到 Git 仓库的根目录",slug:"切换目录到-git-仓库的根目录",children:[]},{level:3,title:"git bisect",slug:"git-bisect",children:[]},{level:3,title:"开启全局配置",slug:"开启全局配置",children:[]},{level:3,title:"配置带参数别名",slug:"配置带参数别名",children:[]},{level:3,title:"迁移仓库，同时保留原有的提交记录和分支",slug:"迁移仓库-同时保留原有的提交记录和分支",children:[]}]}],filePathRelative:"pages/fe-sre/git/README.md",git:{updatedTime:1741875703e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:20}]}}},962:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>h});var e=a(6252);const l=(0,e.Wm)("h2",{id:"git-实用笔记"},[(0,e.Wm)("a",{class:"header-anchor",href:"#git-实用笔记"},"#"),(0,e.Uk)(" git 实用笔记")],-1),i=(0,e.uE)('<li><a href="./husky">Husky</a> <span style="color:#bbb;float:right;">2021-08-10</span></li><li><a href="./github-actions">Github Actions</a> <span style="color:#bbb;float:right;">2023-01-14</span></li><li><a href="./git-modules">Git Modules</a> <span style="color:#bbb;float:right;">2024-01-14</span></li>',3),t={href:"https://docs.github.com/zh",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("GitHub 文档"),r=(0,e.Uk)(),p=(0,e.Wm)("span",{style:{color:"#bbb",float:"right"}},"2024-02-10",-1),o=(0,e.uE)('<h3 id="切换账户"><a class="header-anchor" href="#切换账户">#</a> 切换账户</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ssh-add ~/.ssh/private // 后面的路径是指定的配置文件\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="忽略大小写"><a class="header-anchor" href="#忽略大小写">#</a> 忽略大小写</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> config core.ignorecase <span class="token boolean">false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="更新分支名"><a class="header-anchor" href="#更新分支名">#</a> 更新分支名</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch -m oldBranch newBranch\n<span class="token function">git</span> push --delete origin oldBranch\n\n<span class="token function">git</span> push origin newBranch\n<span class="token function">git</span> branch --set-upstream-to origin/newBranch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="优雅回退"><a class="header-anchor" href="#优雅回退">#</a> 优雅回退</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> reset --soft：软回溯，回退 commit 的同时保留修改内容。\n<span class="token function">git</span> cherry-pick：复制 commit。\n<span class="token function">git</span> revert：撤销 commit 的修改内容。\n<span class="token function">git</span> reflog：记录了 commit 的历史操作。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="仓库分支合并"><a class="header-anchor" href="#仓库分支合并">#</a> 仓库分支合并</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> merge master -m <span class="token string">&#39;merge master&#39;</span> --allow-unrelated-histories //  把两段不相干的 分支进行强行合并\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="意外提交大小写文件到远程仓库"><a class="header-anchor" href="#意外提交大小写文件到远程仓库">#</a> 意外提交大小写文件到远程仓库</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token function">git</span> config core.ignorecase <span class="token boolean">false</span>\n <span class="token function">git</span> <span class="token function">rm</span> --cached src/biz/**<span class="token punctuation">[</span>需要删除的文件路径<span class="token punctuation">]</span> -r\n <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n <span class="token function">git</span> commit -m <span class="token string">&#39;feat: 移除大小写文件&#39;</span>\n <span class="token function">git</span> push\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="gitignore-规则不生效"><a class="header-anchor" href="#gitignore-规则不生效">#</a> gitignore 规则不生效</h3><p>项目都会添加 .gitignore 文件但有时会发现，规则不生效。原因是 .gitignore 只能忽略那些原来没有被 track 的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore 是无效的。 那么解决方法就是先把本地缓存删除（改变成未 track 状态），然后再提交。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> -r --cached <span class="token builtin class-name">.</span>\n<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n<span class="token function">git</span> commit -m <span class="token string">&#39;update .gitignore&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="git-无法识别空目录"><a class="header-anchor" href="#git-无法识别空目录">#</a> git 无法识别空目录</h3><p>1、在空目录下新建.gitkeep 文件, 这是一个约定的文件也可以是其它类型文件起到占位的作用 2、使用 git add -f foldername</p><h3 id="git-merge-no-ff"><a class="header-anchor" href="#git-merge-no-ff">#</a> git merge --no-ff</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> merge --no-ff branch1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>以上命令将指定分支合并到当前分支，但总会生成一个合并 commit（即便这一合并操作可以快进）。当你需要在仓库的提交历史中标记合并事件时这一命令相当有用。 https://zhuanlan.zhihu.com/p/467878513?utm_id=0</p><h3 id="git-获取当前分支名"><a class="header-anchor" href="#git-获取当前分支名">#</a> git 获取当前分支名</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> rev-parse --abbrev-ref HEAD\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="同步远程-master"><a class="header-anchor" href="#同步远程-master">#</a> 同步远程 master</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>\n<span class="token builtin class-name">set</span> -ex\n\n<span class="token assign-left variable">currentGitBranch</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">git</span> rev-parse --abbrev-ref HEAD<span class="token variable">`</span></span>\n\n<span class="token function">git</span> checkout master\n\n<span class="token function">git</span> pull\n\n<span class="token function">git</span> checkout <span class="token variable">$currentGitBranch</span>\n\n<span class="token function">git</span> merge --no-ff master -m <span class="token string">&#39;feat: merge master&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="当前-commitid"><a class="header-anchor" href="#当前-commitid">#</a> 当前 commitId</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> show -s --format<span class="token operator">=</span>%H\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="当前-commit-diff-文件列表"><a class="header-anchor" href="#当前-commit-diff-文件列表">#</a> 当前 commit diff 文件列表</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">diff</span> <span class="token operator">&lt;</span>commit<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token operator">&lt;</span>commit<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> --name-only\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="禁用-git-push-force"><a class="header-anchor" href="#禁用-git-push-force">#</a> 禁用 git push --force</h3><p>不要用 git push --force，而要用 git push --force-with-lease 代替。 在你上次提交之后，只要其他人往该分支提交给代码，git push --force-with-lease 会拒绝覆盖</p>',30),u={href:"https://fe.ecool.fun/topic/cfe8f03e-1a05-4c00-baa7-04ae08c8765c?orderBy=updateTime&order=desc&tagId=0",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("merge rebase 的区别"),d=(0,e.uE)('<h3 id="git-ls-remote"><a class="header-anchor" href="#git-ls-remote">#</a> git ls-remote</h3><p>查看仓库是否可达</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token function">git</span> ls-remote github.com:****.github.git\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="git-ls-files"><a class="header-anchor" href="#git-ls-files">#</a> git ls-files</h3><p>获取当前目录 git 追踪的文件</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> ls-files命令用于列出git仓库中的文件\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="获取当前-git-仓库根目录"><a class="header-anchor" href="#获取当前-git-仓库根目录">#</a> 获取当前 git 仓库根目录</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> rev-parse --show-toplevel\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="切换目录到-git-仓库的根目录"><a class="header-anchor" href="#切换目录到-git-仓库的根目录">#</a> 切换目录到 Git 仓库的根目录</h3><p>用反引号`或$(...)）将 git rev-parse --show-toplevel 的输出直接作为 cd 命令的参数</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token variable"><span class="token variable">`</span><span class="token function">git</span> rev-parse --show-toplevel<span class="token variable">`</span></span>\n<span class="token builtin class-name">cd</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> rev-parse --show-toplevel<span class="token variable">)</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="git-bisect"><a class="header-anchor" href="#git-bisect">#</a> git bisect</h3><p>git bisect 是一个强大的 git 命令，用于帮助开发者查找导致错误的提交。它通过使用二分查找算法，可以迅速定位到引入错误的提交.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> bisect start\n<span class="token comment"># 开始一个二分查找会话</span>\n<span class="token function">git</span> bisect good\n<span class="token comment"># 告诉git当前提交是好的</span>\n<span class="token function">git</span> bisect bad\n<span class="token comment"># 告诉git当前提交是坏的</span>\n<span class="token function">git</span> bisect reset\n<span class="token comment"># 重置会话</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="开启全局配置"><a class="header-anchor" href="#开启全局配置">#</a> 开启全局配置</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> config --global --edit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="配置带参数别名"><a class="header-anchor" href="#配置带参数别名">#</a> 配置带参数别名</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>alias<span class="token punctuation">]</span>\n    ac <span class="token operator">=</span> <span class="token string">&quot;!f() { git add . &amp;&amp; git commit -m <span class="token entity" title="\\&quot;">\\&quot;</span><span class="token variable">$1</span><span class="token entity" title="\\&quot;">\\&quot;</span>; }; f&quot;</span>\n    acp <span class="token operator">=</span> <span class="token string">&quot;!f() { git add . &amp;&amp; git commit -m <span class="token entity" title="\\&quot;">\\&quot;</span><span class="token variable">$1</span><span class="token entity" title="\\&quot;">\\&quot;</span> &amp;&amp; git push; }; f&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="迁移仓库-同时保留原有的提交记录和分支"><a class="header-anchor" href="#迁移仓库-同时保留原有的提交记录和分支">#</a> 迁移仓库，同时保留原有的提交记录和分支</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone 仓库地址\n<span class="token builtin class-name">cd</span> 项目\n<span class="token function">git</span> push --mirror 新的仓库地址\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',20),h={render:function(s,n){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[l,(0,e.Wm)("ul",null,[i,(0,e.Wm)("li",null,[(0,e.Wm)("a",t,[c,(0,e.Wm)(a)]),r,p])]),o,(0,e.Wm)("p",null,[(0,e.Wm)("a",u,[g,(0,e.Wm)(a)])]),d],64)}}}}]);