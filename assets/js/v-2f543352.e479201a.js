(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[7756],{219:(e,t,s)=>{"use strict";s.r(t),s.d(t,{data:()=>i});const i={key:"v-2f543352",path:"/pages/redis-kafaka-elastic/usefulTips/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"数据库事务",slug:"数据库事务",children:[]},{level:3,title:"数据库集群与分布式",slug:"数据库集群与分布式",children:[]}],filePathRelative:"pages/redis-kafaka-elastic/usefulTips/README.md",git:{updatedTime:172681525e4,contributors:[{name:"guilin.li",email:"1344714332@qq.com",commits:2},{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:1}]}}},2897:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>a});const i=(0,s(6252).uE)('<h3 id="数据库事务"><a class="header-anchor" href="#数据库事务">#</a> 数据库事务</h3><p>数据库事务由严格的定义，它必须满足 4 个特性： 原子性(Atomicity),一致性(consistency),隔离性(Isolation),持久性(Durability)。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>原子性 表示组成一个事务的多个数据库操作是一个不可分割的原子单元，只有所有的操作执行成功，整个事务才提交。事务中的任何一个数据库操作失败，已经执行的任何操作都必须被撤销，让数据库返回初始状态。</p></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>一致性 事务操作成功后，数据库所处的状态和他的业务规则是一致的，即数据不会被破坏。如 A 账户转账 100 元到 B 账户，不管操作成功与否，A 和 B 账户的存款总额是不变的。</p></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>隔离性 在并发数据操作时，不同的事务拥有各自的数据空间，他们的操作不会对对方产生敢逃。准确地说，并非要求做到完全无干扰。数据库规定了多种事务隔离界别，不同的隔离级别对应不用的干扰成都，隔离级别越高，数据一致性越好，但并发行越弱。</p></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>持久性 一旦事务提交成功后，事务中所有的数据操作都必须被持久化到数据库中。即使在事务提交后，数据库马上崩溃，在数据库重启时，也必须保证能够通过某种机制恢复数据。</p></div><p>数据库管理系统一般采用重执行日志来保证原子性、一致性和持久性。重执行日志记录了数据库变化的每一个动作，数据库在一个事务中执行一部分操作后发生错误退出，数据库即可根据重执行日志撤销已经执行的操作。对于已经提交的事务即使数据库崩溃，在重启数据库时也能后根据日志对尚未持久化的数据进行相应的重执行操作。</p><h3 id="数据库集群与分布式"><a class="header-anchor" href="#数据库集群与分布式">#</a> 数据库集群与分布式</h3>',8),a={render:function(e,t){return i}}}}]);