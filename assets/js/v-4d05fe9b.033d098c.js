(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[3739],{3731:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-4d05fe9b",path:"/pages/typescript/usefulTips/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"复制类型和值",slug:"复制类型和值",children:[]},{level:3,title:"多重继承",slug:"多重继承",children:[]},{level:3,title:"添加废弃注解",slug:"添加废弃注解",children:[]},{level:3,title:"@type 配置文件类型提示",slug:"type-配置文件类型提示",children:[]},{level:3,title:"ITypeA 类型的 tag 可以直接点击到 ITag 类型",slug:"itypea-类型的-tag-可以直接点击到-itag-类型",children:[]},{level:3,title:"tsconfig.json 大括号报错",slug:"tsconfig-json-大括号报错",children:[]},{level:3,title:"tsconfig.json 忽略下标 any 隐式错误",slug:"tsconfig-json-忽略下标-any-隐式错误",children:[]},{level:3,title:"tsconfig.json references",slug:"tsconfig-json-references",children:[]},{level:3,title:"satisfies",slug:"satisfies",children:[]},{level:3,title:"枚举值 value 为 string 类型时不会反映射",slug:"枚举值-value-为-string-类型时不会反映射",children:[]},{level:3,title:"import 标红报错找不到 tsconfig.json 配置文件",slug:"import-标红报错找不到-tsconfig-json-配置文件",children:[]},{level:3,title:'模块“"fs"”没有默认导出',slug:"模块-fs-没有默认导出",children:[]},{level:3,title:"Cannot find module '*' Error",slug:"cannot-find-module-error",children:[]},{level:3,title:"模块化 js 如何规避循环引用",slug:"模块化-js-如何规避循环引用",children:[]},{level:3,title:"普通枚举与常量枚举",slug:"普通枚举与常量枚举",children:[]},{level:3,title:"Exclude not work on [key: string]:any",slug:"exclude-not-work-on-key-string-any",children:[]},{level:3,title:"tsConfig 配置样式可点击",slug:"tsconfig-配置样式可点击",children:[]},{level:3,title:"extends infer",slug:"extends-infer",children:[]},{level:3,title:"UnpackedArray 获取数组子元素类型",slug:"unpackedarray-获取数组子元素类型",children:[]},{level:3,title:"提取链接参数类型",slug:"提取链接参数类型",children:[]},{level:3,title:"对象 key 值限制",slug:"对象-key-值限制",children:[]},{level:3,title:"is 关键词",slug:"is-关键词",children:[]},{level:3,title:"keyof typeof",slug:"keyof-typeof",children:[]},{level:3,title:"const enum 枚举",slug:"const-enum-枚举",children:[]},{level:3,title:"as const 将变量设置只读",slug:"as-const-将变量设置只读",children:[]},{level:3,title:"数组转联合类型",slug:"数组转联合类型",children:[]},{level:3,title:"get 设置对象 readOnly 属性",slug:"get-设置对象-readonly-属性",children:[]},{level:3,title:"Parameters、 ReturnType 的使用",slug:"parameters、-returntype-的使用",children:[]},{level:3,title:"& 交叉类型",slug:"交叉类型",children:[]}],filePathRelative:"pages/typescript/usefulTips/README.md",git:{updatedTime:1742104454e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:28},{name:"guilin.li",email:"1344714332@qq.com",commits:2}]}}},5303:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>h});var p=a(6252);const t=(0,p.uE)('<h3 id="复制类型和值"><a class="header-anchor" href="#复制类型和值">#</a> 复制类型和值</h3><p>如果你想移动一个类，你可能会想要做以下事情：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> Bar <span class="token operator">=</span> Foo<span class="token punctuation">;</span>\n<span class="token keyword">let</span> bar<span class="token operator">:</span> Bar<span class="token punctuation">;</span> <span class="token comment">// Error: 不能找到名称 &#39;Bar&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这会得到一个错误，因为 const 仅仅是复制了 Foo 到一个变量声明空间，因此你无法把 Bar 当作一个类型声明使用。正确的方式是使用 import 关键字，请注意，如果你在使用 namespace 或者 modules，使用 import 是你唯一能用的方式：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">namespace</span> importing <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">import</span> Bar <span class="token operator">=</span> importing<span class="token punctuation">.</span>Foo<span class="token punctuation">;</span>\n<span class="token keyword">let</span> bar<span class="token operator">:</span> Bar<span class="token punctuation">;</span> <span class="token comment">// ok</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这个 import 技巧，仅适合于类型和变量。</p><h3 id="多重继承"><a class="header-anchor" href="#多重继承">#</a> 多重继承</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>「混合」是一个函数： 传入一个构造函数； 创建一个带有新功能，并且扩展构造函数的新类； 返回这个新类。</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 所有 mixins 都需要</span>\n<span class="token keyword">type</span> <span class="token class-name">Constructor<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 添加属性的混合例子</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">TimesTamped</span><span class="token generic class-name"><span class="token operator">&lt;</span>TBase <span class="token keyword">extends</span> Constructor<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>Base<span class="token operator">:</span> TBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> Base <span class="token punctuation">{</span>\n    timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 添加属性和方法的混合例子</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">ActivateAble</span><span class="token generic class-name"><span class="token operator">&lt;</span>TBase <span class="token keyword">extends</span> Constructor<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>Base<span class="token operator">:</span> TBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> Base <span class="token punctuation">{</span>\n    isActivated <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>isActivated <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">deactivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>isActivated <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">///////////</span>\n<span class="token comment">// 组合类</span>\n<span class="token comment">///////////</span>\n<span class="token comment">// 简单的类</span>\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 添加 TimesTamped 的 User</span>\n<span class="token keyword">const</span> TimestampedUser <span class="token operator">=</span> <span class="token function">TimesTamped</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Tina TimesTamped 和 ActivateAble 的类</span>\n<span class="token keyword">const</span> TimestampedActivateAbleUser <span class="token operator">=</span> <span class="token function">TimesTamped</span><span class="token punctuation">(</span><span class="token function">ActivateAble</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//////////</span>\n<span class="token comment">// 使用组合类</span>\n<span class="token comment">//////////</span>\n<span class="token keyword">const</span> timestampedUserExample <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimestampedUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>timestampedUserExample<span class="token punctuation">.</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> timestampedActivateAbleUserExample <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimestampedActivateAbleUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>timestampedActivateAbleUserExample<span class="token punctuation">.</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>timestampedActivateAbleUserExample<span class="token punctuation">.</span>isActivated<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h3 id="添加废弃注解"><a class="header-anchor" href="#添加废弃注解">#</a> 添加废弃注解</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token punctuation">{</span>\n  <span class="token doc-comment comment">/**\n   * <span class="token keyword">@deprecated</span> 该属性即将禁用，请使用 style属性\n   */</span>\n  className<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="type-配置文件类型提示"><a class="header-anchor" href="#type-配置文件类型提示">#</a> @type 配置文件类型提示</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token punctuation">{</span>import(&#39;rs-pack&#39;).RsConfig<span class="token punctuation">}</span> */</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面的 @type 是 jsdoc 的语法，也就是 ts 支持的在 js 里声明类型的方式</p><h3 id="itypea-类型的-tag-可以直接点击到-itag-类型"><a class="header-anchor" href="#itypea-类型的-tag-可以直接点击到-itag-类型">#</a> ITypeA 类型的 tag 可以直接点击到 ITag 类型</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// types.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ITypeA</span> <span class="token punctuation">{</span>\n  <span class="token doc-comment comment">/**\n   * tag 标签 <span class="token punctuation">{</span><span class="token keyword">@link</span> ITag<span class="token punctuation">}</span>.\n   */</span>\n  tag<span class="token operator">:</span> ITag<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ITag</span> <span class="token punctuation">{</span>\n  <span class="token doc-comment comment">/** tag id */</span>\n  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token doc-comment comment">/** tag name */</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 参考链接 https://juejin.cn/post/7140337202097029133</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>当我们在使用字面量创建了一个正则表达式的时候，相当于初始化了一个对象，这个对象上有一个叫做 lastIndex 的属性</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^0-9]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>\nreg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nreg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">;</span> <span class="token comment">// 1</span>\nreg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nreg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">;</span> <span class="token comment">// 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="tsconfig-json-大括号报错"><a class="header-anchor" href="#tsconfig-json-大括号报错">#</a> tsconfig.json 大括号报错</h3><p>使用 消除这个报错</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  compilerOption<span class="token operator">:</span> <span class="token punctuation">{</span>\n    ignoreDeprecations：<span class="token string">&quot;5.0&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="tsconfig-json-忽略下标-any-隐式错误"><a class="header-anchor" href="#tsconfig-json-忽略下标-any-隐式错误">#</a> tsconfig.json 忽略下标 any 隐式错误</h3><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;ignoreDeprecations&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;suppressImplicitAnyIndexErrors&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 低于 5.5 版本</span>\n    <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">//  版本都支持</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="tsconfig-json-references"><a class="header-anchor" href="#tsconfig-json-references">#</a> tsconfig.json references</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>references 指定工程引用依赖。在多子项目中共享配置文件</p></div><h3 id="satisfies"><a class="header-anchor" href="#satisfies">#</a> satisfies</h3><p>satisfies 这个语法。它的作用就是让你用自动推导出的类型，而不是声明的类型，增加灵活性，同时还可以对这个推导出的类型做类型检查，保证安全。</p><h3 id="枚举值-value-为-string-类型时不会反映射"><a class="header-anchor" href="#枚举值-value-为-string-类型时不会反映射">#</a> 枚举值 value 为 string 类型时不会反映射</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> <span class="token constant">NUM</span> <span class="token punctuation">{</span>\n  <span class="token constant">A</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token constant">B</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token constant">C</span> <span class="token operator">=</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span>\n  <span class="token constant">D</span> <span class="token operator">=</span> <span class="token string">&quot;demo&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entires</span><span class="token punctuation">(</span><span class="token constant">NUM</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token constant">NUM</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">;</span>\n<span class="token constant">NUM</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">;</span>\n<span class="token constant">NUM</span><span class="token punctuation">[</span><span class="token string">&quot;demo&quot;</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="import-标红报错找不到-tsconfig-json-配置文件"><a class="header-anchor" href="#import-标红报错找不到-tsconfig-json-配置文件">#</a> import 标红报错找不到 tsconfig.json 配置文件</h3><p>原因: .eslintrc 配置的 tsconfig.json 的路径不对</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;parserOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;project&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/tsconfig.json&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这个时候一般我们的项目处于子目录中，可以使用相对路径指定 tsconfig.json 的路径 需要将.eslintrc 文件改成 .eslintrc.js 然后使用__dirname 获取相对路径</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  parser<span class="token operator">:</span> <span class="token string">&quot;@typescript-eslint/parser&quot;</span><span class="token punctuation">,</span>\n  parserOptions<span class="token operator">:</span> <span class="token punctuation">{</span> project<span class="token operator">:</span> <span class="token punctuation">[</span>__dirname <span class="token operator">+</span> <span class="token string">&quot;/tsconfig.json&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="模块-fs-没有默认导出"><a class="header-anchor" href="#模块-fs-没有默认导出">#</a> 模块“&quot;fs&quot;”没有默认导出</h3><ul><li>1 可以使用 import * as fs from &#39;fs&#39;</li><li>2 或者在 tsconfig.json 的 compilation 填加属性&quot;esModuleInterop&quot;: true</li></ul><h3 id="cannot-find-module-error"><a class="header-anchor" href="#cannot-find-module-error">#</a> Cannot find module &#39;*&#39; Error</h3><p>Cannot find module &#39;*&#39;. Did you mean to set the &#39;moduleResolution&#39; option to &#39;node&#39; -1 在 tsconfig.json 的 compilation 填加属性&quot;moduleResolution&quot;: &quot;node&quot;</p>',38),e={class:"custom-container tip"},o=(0,p.Wm)("p",{class:"custom-container-title"},"TIP",-1),c=(0,p.Wm)("p",null,"模块解析策略（moduleResolution）更多描述的是一个模块包括相对路径以及非相对路径（也就是第三方库，亦或者说 npm 包）是按照怎样的规则去查找的 现在支持的值有三个 classic、node、Bundler",-1),l=(0,p.Wm)("li",null,[(0,p.Wm)("p",null,"classic 简单来说这种模块解析策略就是一直递归往上找同名文件，当前目录找不到同名文件就往父级目录找。不过这种策略目前前端界用得不多")],-1),r=(0,p.Wm)("p",null,"相比于 classic 策略的区别在于：",-1),u=(0,p.Wm)("li",null,"递归查找的目录是 node_modules，不是父级文件夹",-1),i=(0,p.Wm)("li",null,"引入了 package.json，各种配置项尤其是后面会展开说的 exports 字段使得 node 模块解析策略的变得非常复杂",-1),k=(0,p.Uk)("支持文件夹模块，也就是 pkg/index.js，文件夹中包含 index.js，这个文件夹就是一个模块 "),m={href:"https://zhuanlan.zhihu.com/p/621795173",target:"_blank",rel:"noopener noreferrer"},b=(0,p.Uk)("参考资料"),d={href:"https://arethetypeswrong.github.io/",target:"_blank",rel:"noopener noreferrer"},g=(0,p.Uk)("用来检测 npm 的 moduleResolution 是否合理"),y=(0,p.uE)('<h3 id="模块化-js-如何规避循环引用"><a class="header-anchor" href="#模块化-js-如何规避循环引用">#</a> 模块化 js 如何规避循环引用</h3><p>CommonJS 和 ES Module 都对循环引入做了处理，不会进入死循环，但方式不同：</p><ul><li>CommonJS 借助模块缓存，遇到 require 函数会先检查是否有缓存，已经有的则不会进入执行，在模块缓存中还记录着导出的变量的拷贝值；</li><li>ES Module 借助模块地图，已经进入过的模块标注为获取中，遇到 import 语句会去检查这个地图，已经标注为获取中的则不会进入，地图中的每一个节点是一个模块记录，上面有导出变量的内存地址，导入时会做一个连接——即指向同一块内存。</li><li>有时会项目编译报错因为循环引用使得变量未定义就使用了。</li></ul><h3 id="普通枚举与常量枚举"><a class="header-anchor" href="#普通枚举与常量枚举">#</a> 普通枚举与常量枚举</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>普通枚举 enum A {...} 和常量枚举 const enum A {...} 之间的区别主要在于 TS 的编译结果上有所差别 普通枚举 enum A {...}, 会将其编译为一个 JS 对象, 对象内就是枚举成员和值的一个相互映射 常量枚举 const enum A {...}, 编译后不会生成任何代码, 会删除 TS 部分内容, 对于使用到的成员只会进行值的替换 常量枚举 会有更好的性能, 避免额外的性能开销</p></div><h3 id="exclude-not-work-on-key-string-any"><a class="header-anchor" href="#exclude-not-work-on-key-string-any">#</a> Exclude not work on [key: string]:any</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">TestType</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">NTestType1</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> TestType<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> test1<span class="token operator">:</span> NTestType1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// error missing a and b. this is correct.</span>\n<span class="token keyword">type</span> <span class="token class-name">NTestType2</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> TestType<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> test2<span class="token operator">:</span> NTestType2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// no error, we expect show missing b error here.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="tsconfig-配置样式可点击"><a class="header-anchor" href="#tsconfig-配置样式可点击">#</a> tsConfig 配置样式可点击</h3><p>首先安装插件 typescript-plugin-css-modules</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;typescript-plugin-css-modules&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="extends-infer"><a class="header-anchor" href="#extends-infer">#</a> extends infer</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 条件类型（其中extends可以理解为T类型（窄类型）是否是U类型（宽类型）的子类型，或者说T类型是否可以赋值给U类型，</span>\n<span class="token comment">// 语法同js的三元表达式）</span>\n<span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token comment">// infer只能在extends类型语句中使用</span>\n<span class="token comment">// infer存储的变量U只能用于语句的true返回分支</span>\n<span class="token keyword">type</span> <span class="token class-name">UnpackedArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>infer <span class="token constant">U</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="unpackedarray-获取数组子元素类型"><a class="header-anchor" href="#unpackedarray-获取数组子元素类型">#</a> UnpackedArray 获取数组子元素类型</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Arr</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// 工具类型</span>\n<span class="token keyword">type</span> <span class="token class-name">UnpackedArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>infer <span class="token constant">R</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ？ <span class="token constant">R</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">newArr</span> <span class="token operator">=</span> UnpackedArray<span class="token operator">&lt;</span>Arr<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="提取链接参数类型"><a class="header-anchor" href="#提取链接参数类型">#</a> 提取链接参数类型</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 1. /分割</span>\n<span class="token keyword">type</span> <span class="token class-name">Split<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token constant">L</span> <span class="token operator">|</span> Split<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span>\n  <span class="token operator">:</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token constant">L</span>\n  <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token comment">// 2， 提取含:的参数</span>\n<span class="token keyword">type</span> <span class="token class-name">PickParams<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">P</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token string">&quot;/transport/ground/detail/:code/:tab&quot;</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Params</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span>PickParams<span class="token operator">&lt;</span>Split<span class="token operator">&lt;</span><span class="token keyword">typeof</span> path<span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// { code: string; tab: string; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="对象-key-值限制"><a class="header-anchor" href="#对象-key-值限制">#</a> 对象 key 值限制</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token constant">ROUTES</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  router1<span class="token operator">:</span> <span class="token string">&quot;/router1&quot;</span><span class="token punctuation">,</span>\n  router2<span class="token operator">:</span> <span class="token string">&quot;/router2&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> pmm<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token keyword">typeof</span> <span class="token constant">ROUTES</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">module</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  router1<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">module</span><span class="token operator">:</span> <span class="token string">&quot;1212&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  router2<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">module</span><span class="token operator">:</span> <span class="token string">&quot;1212&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="is-关键词"><a class="header-anchor" href="#is-关键词">#</a> is 关键词</h3><p>主要用来框定类型并实现对应的类型断言</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> someValue<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token string">&quot;hhhha&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>someValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someValue<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这边出现报错，someValue任然是个unknown类型</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// ------------------------------</span>\n<span class="token keyword">function</span> <span class="token function">isString1</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> value <span class="token keyword">is</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>someValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someValue<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里就没有报错，如果在编辑器上可以发现，这个someValue的类型转成了string</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="keyof-typeof"><a class="header-anchor" href="#keyof-typeof">#</a> keyof typeof</h3><p>解决 cannot expression of type string used to index type &#39;object&#39; 方案一</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;Daniel&quot;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token keyword">typeof</span> user<span class="token operator">&gt;</span><span class="token punctuation">;</span>\nkeys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>方案二</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\nkeys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span>key <span class="token keyword">as</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> user<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>方案三</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">isKey</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> k<span class="token operator">:</span> PropertyKey<span class="token punctuation">)</span><span class="token operator">:</span> k <span class="token keyword">is</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> k <span class="token keyword">in</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\nkeys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isKey</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="const-enum-枚举"><a class="header-anchor" href="#const-enum-枚举">#</a> const enum 枚举</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> Constants <span class="token punctuation">{</span>\n  Long <span class="token operator">=</span> <span class="token string">&quot;a very long string&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token keyword">enum</span> Constants <span class="token punctuation">{</span>\n  Long <span class="token operator">=</span> <span class="token string">&quot;a very long string&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// const enum 我们使用const常量打完包之后的体积更小</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="as-const-将变量设置只读"><a class="header-anchor" href="#as-const-将变量设置只读">#</a> as const 将变量设置只读</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> menuConst <span class="token operator">=</span> <span class="token punctuation">{</span>\n  home<span class="token operator">:</span> <span class="token string">&quot;/home&quot;</span><span class="token punctuation">,</span>\n  about<span class="token operator">:</span> <span class="token string">&quot;/about&quot;</span><span class="token punctuation">,</span>\n  contact<span class="token operator">:</span> <span class="token string">&quot;/contact&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 而在一般的对象中，由于对象的属性都具有可修改性</span>\nmenuConst<span class="token punctuation">.</span>home <span class="token operator">=</span> <span class="token string">&quot;/home1&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 是不会报错的</span>\n\n<span class="token keyword">const</span> menuAsConst <span class="token operator">=</span> <span class="token punctuation">{</span>\n  home<span class="token operator">:</span> <span class="token string">&quot;/home&quot;</span><span class="token punctuation">,</span>\n  about<span class="token operator">:</span> <span class="token string">&quot;/about&quot;</span><span class="token punctuation">,</span>\n  contact<span class="token operator">:</span> <span class="token string">&quot;/contact&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\nmenuConst<span class="token punctuation">.</span>home <span class="token operator">=</span> <span class="token string">&quot;/home1&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>\n\n<span class="token keyword">type</span> <span class="token class-name">ValueOf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">MenuEnumType</span> <span class="token operator">=</span> ValueOf<span class="token operator">&lt;</span><span class="token keyword">typeof</span> menuAsConst<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> env<span class="token operator">:</span> MenuEnumType <span class="token operator">=</span> menuAsConst<span class="token punctuation">.</span>home<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="数组转联合类型"><a class="header-anchor" href="#数组转联合类型">#</a> 数组转联合类型</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> permissions <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token string">&quot;system:role:list&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;system:role:create&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;system:role:read&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;system:role:update&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;system:role:delete&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">PermissionType</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> permissions<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// PermissionType;  &quot;system:role:list&quot; | &quot;system:role:create&quot; | &quot;system:role:read&quot; | &quot;system:role:update&quot; | &quot;system:role:delete&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="get-设置对象-readonly-属性"><a class="header-anchor" href="#get-设置对象-readonly-属性">#</a> get 设置对象 readOnly 属性</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> defaultTimes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token doc-comment comment">/** 获取创建时间范围选择 */</span>\n  <span class="token keyword">get</span> <span class="token function">createRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span>Date<span class="token punctuation">,</span> Date<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="parameters、-returntype-的使用"><a class="header-anchor" href="#parameters、-returntype-的使用">#</a> Parameters、 ReturnType 的使用</h3><blockquote><p><code>Parameters&lt;T&gt;</code> 用于提取函数的参数类型，返回一个元组，元组的元素类型是该函数的参数类型。 <code>ReturnType&lt;T&gt;</code> 用于提取函数的返回值类型。</p></blockquote><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> b <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Parameters 提取参数类型 -&gt; [string, number]</span>\n<span class="token keyword">type</span> <span class="token class-name">ExampleParams</span> <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> example<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ReturnType 提取返回值类型 -&gt; boolean</span>\n<span class="token keyword">type</span> <span class="token class-name">ExampleReturn</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> example<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> params<span class="token operator">:</span> ExampleParams<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;田本初&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 函数第一个参数的类型</span>\n<span class="token keyword">const</span> returnValue<span class="token operator">:</span> ExampleReturn <span class="token operator">=</span> <span class="token function">example</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 boolean 类型</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>定义一个工具类型来提取 Promise 解析后的类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">PromiseReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>\n  <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>infer <span class="token constant">U</span><span class="token operator">&gt;</span>\n  <span class="token operator">?</span> <span class="token constant">U</span>\n  <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="交叉类型"><a class="header-anchor" href="#交叉类型">#</a> &amp; 交叉类型</h3><p>如果合并的接口类型中具有同名属性，且类型不同，则合并后类型为 never</p>',43),h={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("div",e,[o,c,(0,p.Wm)("ul",null,[l,(0,p.Wm)("li",null,[r,(0,p.Wm)("ul",null,[u,i,(0,p.Wm)("li",null,[k,(0,p.Wm)("a",m,[b,(0,p.Wm)(a)]),(0,p.Wm)("a",d,[g,(0,p.Wm)(a)])])])])])]),y],64)}}}}]);