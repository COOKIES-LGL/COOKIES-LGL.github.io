(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[7237],{1100:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-5dda5382",path:"/pages/node/axios/",title:"",lang:"zh-CN",frontmatter:{home:!1,sidebar:!1},excerpt:"",headers:[{level:3,title:"axios 拦截器实现原理",slug:"axios-拦截器实现原理",children:[]},{level:3,title:"使用场景：",slug:"使用场景",children:[]},{level:3,title:"注意事项",slug:"注意事项",children:[]}],filePathRelative:"pages/node/axios/README.md",git:{updatedTime:172681525e4,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:4}]}}},3123:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h3 id="axios-拦截器实现原理"><a class="header-anchor" href="#axios-拦截器实现原理">#</a> axios 拦截器实现原理</h3><p>Axios 是一个基于 Promise 的 HTTP 客户端，用于在浏览器和 node.js 中执行 HTTP 请求。它具备拦截请求和响应的能力，这使得开发者可以在请求被发送到服务器前或响应被传递给 then/catch 方法前，对其进行处理或修改。拦截器是 Axios 非常强大的特性之一，它们主要被用于日志记录、身份验证、如果请求失败时的重试机制等功能；允许你在请求发送到服务器之前或响应返回客户端之前对其进行修改或处理。</p><p>拦截器主要有两种：请求拦截器（request interceptors）和响应拦截器（response interceptors）。</p><h4 id="拦截器数组"><a class="header-anchor" href="#拦截器数组">#</a> 拦截器数组：</h4><p>Axios 内部维护了两个数组，一个用于存储请求拦截器，另一个用于存储响应拦截器。每个拦截器都是一个函数，这些函数按照它们在数组中定义的顺序被依次执行。</p><h4 id="拦截器函数的参数"><a class="header-anchor" href="#拦截器函数的参数">#</a> 拦截器函数的参数：</h4><ul><li>请求拦截器：通常接收一个配置对象（通常是请求的配置）作为参数，并返回一个配置对象或 Promise。</li><li>响应拦截器：接收一个响应对象作为参数，并返回一个响应对象或 Promise。</li></ul><h4 id="拦截器的执行"><a class="header-anchor" href="#拦截器的执行">#</a> 拦截器的执行：</h4><p>当 Axios 发起一个请求时，它会首先遍历并执行请求拦截器数组中的每个函数。这些函数可以对请求进行预处理，比如添加请求头、处理错误等。 一旦请求被发送并得到响应，Axios 会遍历并执行响应拦截器数组中的每个函数。这些函数可以对响应进行后处理，比如数据转换、错误处理等。 当发出请求或接收响应时，Axios 会遍历这些拦截器，并按照添加的顺序执行请求拦截器，以及按照相反的顺序执行响应拦截器。 在 Axios 的源码中，拦截器是通过一个 AxiosInterceptorManager 实例来管理的，它维护了一个拦截器数组。每个拦截器都是一个包含 fulfilled 和 rejected 函数的对象。这两个函数分别对应于拦截器成功处理和拦截器处理出错的情况。</p><h4 id="promise-链"><a class="header-anchor" href="#promise-链">#</a> Promise 链：</h4><p>由于拦截器函数可以返回 Promise，因此可以很容易地在拦截器中执行异步操作。Axios 会等待每个拦截器的 Promise 解决后再继续执行后续的拦截器或请求/响应处理。</p><h4 id="取消拦截器"><a class="header-anchor" href="#取消拦截器">#</a> 取消拦截器：</h4><p>Axios 提供了取消拦截器的方法，允许你在不再需要某个拦截器时将其从数组中移除。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">InterceptorManager</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存储拦截器的数组</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">fulfilled<span class="token punctuation">,</span> rejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      fulfilled<span class="token operator">:</span> fulfilled<span class="token punctuation">,</span>\n      rejected<span class="token operator">:</span> rejected<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 返回拦截器的ID</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">eject</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 移除拦截器</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">fn</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="使用场景"><a class="header-anchor" href="#使用场景">#</a> 使用场景：</h3><ul><li>身份验证或添加通用 headers：在请求拦截器中添加身份验证令牌（token）。</li><li>性能监控：记录请求的延迟时间。</li><li>错误处理：在响应拦截器中统一处理网络错误或服务器错误。</li><li>数据转换：在响应拦截器中处理服务器返回的数据，比如解析 JSON 数据或进行其他格式转换。</li><li>日志记录：在请求和响应拦截器中记录请求的详细信息，以便进行调试或监控</li></ul><h3 id="注意事项"><a class="header-anchor" href="#注意事项">#</a> 注意事项</h3><ol><li>拦截器是按顺序执行的，因此它们的顺序很重要。</li><li>由于拦截器可以修改请求或响应数据，因此在使用它们时要特别小心，确保不要意外地修改了你不需要修改的数据。</li><li>如果在拦截器中抛出了错误或返回了一个被拒绝的 Promise，那么后续的拦截器和请求/响应处理将不会被执行。</li></ol>',18),e={render:function(n,s){return p}}}}]);