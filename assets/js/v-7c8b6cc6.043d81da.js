(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[9480],{1815:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-7c8b6cc6",path:"/pages/node/memory-analyze/",title:"",lang:"zh-CN",frontmatter:{home:!1,sidebar:!1},excerpt:"",headers:[{level:2,title:"Vue SSR 内存泄漏排查",slug:"vue-ssr-内存泄漏排查",children:[{level:3,title:"火焰图的基本含义",slug:"火焰图的基本含义",children:[]},{level:3,title:"总结",slug:"总结",children:[]}]}],filePathRelative:"pages/node/memory-analyze/README.md",git:{updatedTime:172681525e4,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:3},{name:"guilin.li",email:"1344714332@qq.com",commits:3}]}}},5559:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>U});var e=a(6252);const l=(0,e.uE)('<h2 id="vue-ssr-内存泄漏排查"><a class="header-anchor" href="#vue-ssr-内存泄漏排查">#</a> Vue SSR 内存泄漏排查</h2><p>mac 自带的 apache 中的 ab 是有最大并发限制的，您可以重新下载一个 apache 并且编译。 Mac 下自带 apache，查看版本：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>apachectl -v\n<span class="token comment"># Server version: Apache/2.4.34 (Unix)</span>\n<span class="token comment"># Server built:   Feb 22 2019 20:20:11</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>查看 ab 版本:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ab -V\n<span class="token comment"># ab 压力测试工具的用法，查看：</span>\nab --help\n或者\n<span class="token function">man</span> ab\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>例如：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ab -c 并发数 -n 请求数 URL\nab工具常用参数：\n-n ：总共的请求执行数，缺省是1；\n-c： 并发数，缺省是1；\n-t：测试所进行的总时间，秒为单位，缺省50000s\n-p：POST时的数据文件\n-w: 以HTML表的格式输出结果\n-r: 跳过异常接口错误\n-k: 让连接KeepAlive避免The <span class="token function">timeout</span> specified has expired <span class="token punctuation">(</span><span class="token number">70007</span><span class="token punctuation">)</span>\nab -n <span class="token number">100</span> -c <span class="token number">10</span> -w http://www.baidu.com/ <span class="token operator">&gt;&gt;</span> baidu.html\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>结果界面和下面例子是一样的，只是以 html 文件形式保存而已。 下面，我们以请求百度为例：</p><p>ab -n 100 -c 10 https://www.baidu.com/</p><div class="language-cmd ext-cmd line-numbers-mode"><pre class="language-cmd"><code>-n 在测试会话中所执行的请求个数（总数）\n\n-c 一次产生的请求个数（单次请求次数）\n\n-t 测试所进行的最大秒数。其内部隐含值是-n ，它可以使对服务器的测试限制在一个固定的总时间以内。默认时，没有时间限制。\n\n-p 包含了需要POST的数据的文件。\n\n-P 对一个中转代理提供BASIC认证信任。用户名和密码由一个:隔开，并以base64编码形式发送。无论服务器是否需要(即, 是否发送了401认证需求代码)，此字符串都会被发送。\n\n-T POST数据所使用的Content-type头信息。\n\n-v 设置显示信息的详细程度-4或更大值会显示头信息，3或更大值可以显示响应代码(,200等),2或更大值可以显示警告和其他信息。\n\n-V 显示版本号并退出。\n\n-w 以HTML表的格式输出结果。默认时，它是白色背景的两列宽度的一张表。\n\n-i 执行HEAD请求，而不是GET。\n\n-x 设置&lt;table&gt;属性的字符串。\n\n-X 对请求使用代理服务器。\n\n-y 设置&lt;tr&gt;属性的字符串。\n\n-z 设置&lt;td&gt;属性的字符串。\n\n-C 对请求附加一个Cookie:行。其典型形式是name=value的一个参数对，此参数可以重复。\n\n-H 对请求附加额外的头信息。此参数的典型形式是一个有效的头信息行，其中包含了以冒号分隔的字段和值的对(如,&quot;Accept-Encoding:zip/zop;8bit&quot;)。\n\n-A 对服务器提供BASIC认证信任。用户名和密码由一个:隔开，并以base64编码形式发送。无论服务器是否需要(即,是否发送了401认证需求代码)，此字符串都会被发送。\n\n-h 显示使用方法/帮助信息。\n\n-d 不显示&quot;percentage served within XX [ms] table&quot;的消息(为以前的版本提供支持)。\n\n-e 产生一个以逗号分隔的(CSV)文件，其中包含了处理每个相应百分比的请求所需要(从1%到100%)的相应百分比的(以微妙为单位)时间。由于这种格式已经“二进制化”，所以比&#39;gnuplot&#39;格式更有用。\n\n-g 把所有测试结果写入一个&#39;gnuplot&#39;或者TSV(以Tab分隔的)文件。此文件可以方便地导入到Gnuplot,IDL,Mathematica,Igor甚至Excel中。其中的第一行为标题。\n\n-i 执行HEAD请求，而不是GET。\n\n-k 启用HTTP KeepAlive功能，即在一个HTTP会话中执行多个请求。默认时，不启用KeepAlive功能。\n\n-q 如果处理的请求数大于150，ab每处理大约10%或者100个请求时，会在stderr输出一个进度计数。此-q标记可以抑制这些信息。\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h3 id="火焰图的基本含义"><a class="header-anchor" href="#火焰图的基本含义">#</a> 火焰图的基本含义</h3>',11),r=(0,e.Uk)(" 1、每一个小块代表了一个函数在栈中的位置（即一个栈帧）。 2、y 轴表示调用栈，每一层都是一个函数。调用栈越深，火焰就越高，顶部就是正在执行的函数，下方都是它的父函数。 3、x 轴表示抽样数，如果一个函数在 x 轴占据的宽度越宽，就表示它被抽到的次数多，即执行的时间长。注意，x 轴不代表时间，而是所有的调用栈合并后，按字母顺序排列的。 4、小块的宽度代表 CPU 的使用时间，或者说相对于父函数而言使用 CPU 的比例（基于所有样例），越宽则代表占用 CPU 的时间越长，或者使用 CPU 很频繁。如果一个函数在顶层占据的宽度最大，就表示该函数可能存在性能问题。 "),p={href:"https://github.com/davidmarkclements/0x/blob/master/docs/ui.md",target:"_blank",rel:"noopener noreferrer"},b=(0,e.Uk)("github 0x"),c=(0,e.Wm)("h3",{id:"总结"},[(0,e.Wm)("a",{class:"header-anchor",href:"#总结"},"#"),(0,e.Uk)(" 总结")],-1),i=(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,"对于 vue/react ssr，除了要注意在服务端 ssr 生命周期能触发的钩子内不要创建资源属性的内容防止内存泄露，"),(0,e.Wm)("li",null,"也要注意到这类的执行错误可能引发公共模块重复编译导致的闭包泄露。")],-1),m=(0,e.Uk)("参考链接:"),u=(0,e.Wm)("br",null,null,-1),t=(0,e.Uk)(" 1、"),o={href:"https://www.bookstack.cn/read/node-in-debugging/2.2heapdump.md",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("使用 heapdump"),h=(0,e.Wm)("br",null,null,-1),g=(0,e.Uk)(" 2、"),v={href:"https://github.com/davidmarkclements/0x",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("火焰图工具使用"),f=(0,e.Wm)("br",null,null,-1),W=(0,e.Uk)(" 3、"),w={href:"https://zhuanlan.zhihu.com/p/461945753",target:"_blank",rel:"noopener noreferrer"},T=(0,e.Uk)("参考案例"),U={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[l,(0,e.Wm)("img",{src:n.$withBase("./images/daily-blog/memory.jpg")},null,8,["src"]),r,(0,e.Wm)("p",null,[(0,e.Wm)("a",p,[b,(0,e.Wm)(a)])]),c,i,(0,e.Wm)("p",null,[m,u,t,(0,e.Wm)("a",o,[d,(0,e.Wm)(a)]),h,g,(0,e.Wm)("a",v,[k,(0,e.Wm)(a)]),f,W,(0,e.Wm)("a",w,[T,(0,e.Wm)(a)])])],64)}}}}]);