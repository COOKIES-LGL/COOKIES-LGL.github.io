(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[1609],{8183:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-1424b29d",path:"/pages/css/dev-experience/",title:"",lang:"zh-CN",frontmatter:{home:!1,sidebar:!1},excerpt:"",headers:[{level:3,title:"font-display",slug:"font-display",children:[]},{level:3,title:"常见的 css link",slug:"常见的-css-link",children:[]},{level:3,title:"purgecss",slug:"purgecss",children:[]},{level:3,title:"sass @use",slug:"sass-use",children:[]},{level:3,title:"Flex 布局会默认",slug:"flex-布局会默认",children:[]},{level:3,title:"何时需要使用 width: 100% 和 height: 100%",slug:"何时需要使用-width-100-和-height-100",children:[]},{level:3,title:"html 元素继承 box-sizing",slug:"html-元素继承-box-sizing",children:[]},{level:3,title:"background-attachment: fixed;",slug:"background-attachment-fixed",children:[]},{level:3,title:"animation-play-state",slug:"animation-play-state",children:[]}],filePathRelative:"pages/css/dev-experience/README.md",git:{updatedTime:1745673668e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:12}]}}},4198:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>u});var t=a(6252);const e=(0,t.uE)('<h3 id="font-display"><a class="header-anchor" href="#font-display">#</a> font-display</h3><h4 id="font-face-设置后文本的渲染过程"><a class="header-anchor" href="#font-face-设置后文本的渲染过程">#</a> @font-face 设置后文本的渲染过程</h4><ul><li>下载 web font</li><li>在下载期间先用备选字体渲染</li><li>web font 字体下载完成后使用该字体替换 实际这只是 @font-face 渲染方式的一种，而且不是默认的，@font-face 由 font-display 属性决定 web font 在下载时间和可用时间是如何展示的 在字体下载比较慢的情况下</li><li>如果认为字体切换带来的闪烁不是问题，可以设置 font-display:swap;提前渲染文本</li><li>如果认为不一定要保障使用 web font 来渲染，那么无疑 font-display:optional;是最优选</li></ul><h4 id="提前加载-web-font"><a class="header-anchor" href="#提前加载-web-font">#</a> 提前加载 web font</h4><p>令人意外的是浏览器解析到 @font-face 声明时候并不会下载对应的字体，只有解析到使用了该 font-face 中定义字体的页面元素时，才会下载对应的字体这也就意味着把 @font-face 声明写在页面顶部是没有作用的，可以使用 preconnect 或者 preload 提前让浏览器提前建连和下载字体文件，尤其是在页面应用了流式渲染时候有奇效</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preconnect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://fonts.gstatic.com<span class="token punctuation">&quot;</span></span> <span class="token attr-name">crossorigin</span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>\n  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://fonts.gstatic.com/s/roboto/v30/KFOkCnqEu92Fr1MmgVxFIzIXKMnyrYk.woff2<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>font<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>font/woff2<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">crossorigin</span>\n<span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="unicode-range-子集化缩减-web-font-体积"><a class="header-anchor" href="#unicode-range-子集化缩减-web-font-体积">#</a> unicode-range 子集化缩减 web font 体积</h4><p>在 @font-face 内部可以使用 unicode-range 定义字体应用到的 Unicode 字符范围。这样可以将字体文件拆分成多个，当字符在定义的范围内时，浏览器才会下载并使用对应的字体文件</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>\n  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">&quot;MyFont&quot;</span><span class="token punctuation">;</span>\n  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;myfont.woff2&quot;</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;woff2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">unicode-range</span><span class="token punctuation">:</span> U+00-FF<span class="token punctuation">;</span> <span class="token comment">/* 基本拉丁字母及扩展 */</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="font-display-swap"><a class="header-anchor" href="#font-display-swap">#</a> font-display：swap</h4><p>来告诉浏览器字体文本立即使用系统字体，等自定义字体准备好再替换。可以避免 FOIT</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>\n  font-display：swap\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="position-sticky-无效的原因"><a class="header-anchor" href="#position-sticky-无效的原因">#</a> position：sticky 无效的原因</h4><ul><li><p>缺少 top、left、right 或 bottom 属性：为了使 position: sticky 生效，你需要指定至少一个定位属性（如 top、left、right 或 bottom），以定义元素在何时开始粘性定位。</p></li><li><p>父元素没有足够的内容或高度：如果父元素没有足够的内容或高度，导致没有滚动条，sticky 定位可能不会生效，因为没有滚动行为来触发粘性定位。</p></li><li><p>父元素设置了 overflow 属性：如果元素的直接父元素或任何祖先元素设置了 overflow: hidden 或 overflow: auto、scroll，这可能会创建一个新的格式化上下文（formatting context），导致 sticky 定位失效。</p></li><li><p>元素的祖先元素使用了 transform 属性：如果元素的任何祖先元素使用了 transform 属性，这可能会创建一个新的包含块（containing block），这会影响 sticky 定位的行为。</p></li><li><p>position: sticky 仅在元素的父容器是块级元素（block-level element）时有效。如果父容器是内联元素（inline element），粘性定位将不起作用</p></li></ul><h3 id="常见的-css-link"><a class="header-anchor" href="#常见的-css-link">#</a> 常见的 css link</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>all<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>media 属性规定被链接文档将显示在什么设备上，利用这个属性就衍生出了很多优化方式。</p><p>1、比如将不同屏幕尺寸所需的 css 分开加载，可以缩小加载 css 文件的体积。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>\n  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example-pc.css<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>screen and (min-width: 768px)<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example-m.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>screen and (max-width: 767px)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>2、 尽可能的拆分主体样式文件，并将非关键的 css link 的 media 属性设置为 none 当 media 属性为 none 时，浏览器会以最低优先级加载此文件，并不会阻塞页面的渲染进程</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>footer.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>none<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>this.media=<span class="token punctuation">&#39;</span>all<span class="token punctuation">&#39;</span><span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>3、对于主体样式的预加载</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>common.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="purgecss"><a class="header-anchor" href="#purgecss">#</a> purgecss</h3>',24),p=(0,t.Uk)("一个用来删除未使用的 CSS 代码的工具 "),l={href:"https://www.purgecss.cn/",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("purgecss"),c=(0,t.uE)('<h3 id="sass-use"><a class="header-anchor" href="#sass-use">#</a> sass @use</h3><p>@use 规则与 @import 规则不同。@import 规则是 Sass 较早提供的引入机制，它不支持命名空间，并且会将引入的文件内容全部复制到当前文件中。 而 @use 规则则提供了更好的封装和模块化支持，它允许你通过命名空间来访问引入的文件中的内容，从而避免了命名冲突和不必要的代码复制</p><h3 id="flex-布局会默认"><a class="header-anchor" href="#flex-布局会默认">#</a> Flex 布局会默认</h3><ul><li>把所有子项变成水平排列。</li><li>默认不自动换行。</li><li>让子项与其内容等宽，并把所有子项的高度变为最高子项的高度</li></ul><h3 id="何时需要使用-width-100-和-height-100"><a class="header-anchor" href="#何时需要使用-width-100-和-height-100">#</a> 何时需要使用 width: 100% 和 height: 100%</h3><ul><li>宽度： 对于大多数块级元素，其宽度由父元素决定，通常无需设置 width: 100%。只有当元素脱离文档流（如 position: absolute）时，才需设置 width: 100%。</li><li>高度： 元素的高度通常由内容撑开。如果需要使高度由父元素决定，则需设置 height: 100%。</li></ul><h3 id="html-元素继承-box-sizing"><a class="header-anchor" href="#html-元素继承-box-sizing">#</a> html 元素继承 box-sizing</h3><p>这样的好处在于他不会覆盖其他组件的 box-sizing 值，又无需为每一个元素重复设置 box-sizing:border-box;</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">html</span> <span class="token punctuation">{</span>\n  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">*,\n*:before,\n*:after</span> <span class="token punctuation">{</span>\n  <span class="token property">box-sizing</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="background-attachment-fixed"><a class="header-anchor" href="#background-attachment-fixed">#</a> background-attachment: fixed;</h3><p>应用场景</p><ul><li>典型场景 ‌：网站首页或专题页的全屏背景图，滚动时背景保持静止，提升沉浸感</li><li>固定水印/装饰性图案</li></ul><h3 id="animation-play-state"><a class="header-anchor" href="#animation-play-state">#</a> animation-play-state</h3><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token comment">/* 悬浮暂停动画 */</span>\n<span class="token selector">&amp;:hover</span> <span class="token punctuation">{</span>\n  <span class="token selector">.scrollText</span> <span class="token punctuation">{</span>\n    <span class="token property">animation-play-state</span><span class="token punctuation">:</span> paused<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',14),u={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[e,(0,t.Wm)("p",null,[p,(0,t.Wm)("a",l,[o,(0,t.Wm)(a)])]),c],64)}}}}]);