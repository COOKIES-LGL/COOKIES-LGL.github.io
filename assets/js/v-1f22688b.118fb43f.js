(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[4092],{2982:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>e});const e={key:"v-1f22688b",path:"/pages/fe-sre/git/husky/",title:"",lang:"zh-CN",frontmatter:{home:!1,sidebar:!1},excerpt:"",headers:[{level:3,title:"旧版 husky 使用总结",slug:"旧版-husky-使用总结",children:[]},{level:3,title:"新版 husky 使用",slug:"新版-husky-使用",children:[]},{level:3,title:"添加 git hooks，运行一下命令创建 git hooks",slug:"添加-git-hooks-运行一下命令创建-git-hooks",children:[]},{level:3,title:"需要注意的点",slug:"需要注意的点",children:[]},{level:3,title:"cspell 处理单词拼写",slug:"cspell-处理单词拼写",children:[]}],filePathRelative:"pages/fe-sre/git/husky/README.md",git:{updatedTime:1727168301e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:2}]}}},6343:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>p});const e=(0,a(6252).uE)('<h3 id="旧版-husky-使用总结"><a class="header-anchor" href="#旧版-husky-使用总结">#</a> 旧版 husky 使用总结</h3><p>在做前端工程化时 husky 可以说是一个必不可少的工具。husky 可以让我们向项目中方便添加 git hooks。通常情况下我只需要如下两步就可在项目中引入并设置好 husky：</p><h4 id="将-husky-添加到项目的开发依赖中"><a class="header-anchor" href="#将-husky-添加到项目的开发依赖中">#</a> 将 husky 添加到项目的开发依赖中</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> -D husky\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="在-package-json-中设置我们需要的-git-hooks"><a class="header-anchor" href="#在-package-json-中设置我们需要的-git-hooks">#</a> 在 package.json 中设置我们需要的 git hooks</h4><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;husky&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;hooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;pre-commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run test&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 在commit之前先执行npm run test命令</span>\n      <span class="token property">&quot;commit-msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commitlint -e $HUSKY_GIT_PARAMS&quot;</span> <span class="token comment">// 校验commit时添加的备注信息是否符合我们要求的规范</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在之前的项目中我们通常都是这样完成对 husky 的引入和设置的。但是今天在我新建的项目中这样设置竟然不起作用了，经过一番查看才知道原来最新版本的 husky（6.0.0）已经做了破坏性的变更，之前的设置方式已经失效了</p></div><h3 id="新版-husky-使用"><a class="header-anchor" href="#新版-husky-使用">#</a> 新版 husky 使用</h3><p>根据官方的说法，之前 husky 的工作方式是这样的，为了能够让用户设置任何类型的 git hooks 都能正常工作，husky 不得不创建所有类型的 git hooks。这样在 git 工作的每个阶段都会调用 husky 所设置的脚本，在这个脚本中 husky 会检查用户是否配置该 hook，如果有就运行用户配置的命令，如果没有就继续往下执行。</p><p>这样做的好处就是无论用户设置什么类型的 git hook husky 都能确保其正常运行。但是缺点也是显而易见的，即使用户没有设置任何 git hook，husky 也向 git 中添加了所有类型的 git hook。</p><p>那有没有可能让 husky 只添加我们需要的 git hook 呢</p><h4 id="新版-husky-的工作原理"><a class="header-anchor" href="#新版-husky-的工作原理">#</a> 新版 husky 的工作原理</h4><p>新版的 husky 使用了从 git 2.9 开始引入的一个新功能 core.hooksPath。core.hooksPath 可以让你指定 git hooks 所在的目录而不是使用默认的.git/hooks/。这样 husky 可以使用 husky install 将 git hooks 的目录指定为.husky/，然后使用 husky add 命令向.husky/中添加 hook。通过这种方式我们就可以只添加我们需要的 git hook，而且所有的脚本都保存在了一个地方（.husky/目录下）因此也就不存在同步文件的问题了。</p><blockquote><p>位置：默认在.git/hooks， 不会被 push 到远端。也可以通过以下配置指定，然后 push 到远端，不用每个人都配置 需要配置下 <code>core.hooksPath</code></p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> config core.hooksPath .mygithooks\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="安装-husky"><a class="header-anchor" href="#安装-husky">#</a> 安装 husky</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> -D husky\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="在-packgae-json-中添加-prepare-脚本"><a class="header-anchor" href="#在-packgae-json-中添加-prepare-脚本">#</a> 在 packgae.json 中添加 prepare 脚本</h4><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>prepare 脚本会在 npm install（不带参数）之后自动执行。也就是说当我们执行 npm install 安装完项目依赖后会执行 husky install 命令，<br> 该命令会创建.husky/目录并指定该目录为 git hooks 所在的目录。</p><h3 id="添加-git-hooks-运行一下命令创建-git-hooks"><a class="header-anchor" href="#添加-git-hooks-运行一下命令创建-git-hooks">#</a> 添加 git hooks，运行一下命令创建 git hooks</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&quot;npm run test&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>运行完该命令后我们会看到.husky/目录下新增了一个名为 pre-commit 的 shell 脚本。也就是说在在执行 git commit 命令时会先执行 pre-commit 这个脚本。pre-commit 脚本内容如下：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>\n<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>\n\n<span class="token function">npm</span> run <span class="token builtin class-name">test</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>可以看到该脚本的功能就是执行 npm run test 这个命令</p><h3 id="需要注意的点"><a class="header-anchor" href="#需要注意的点">#</a> 需要注意的点</h3><p>在项目中我们会使用 commit-msg 这个 git hook 来校验我们 commit 时添加的备注信息是否符合规范。在以前的我们通常是这样配置：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;husky&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;hooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;commit-msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commitlint -e $HUSKY_GIT_PARAMS&quot;</span> <span class="token comment">// 校验commit时添加的备注信息是否符合我们要求的规范</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>pre-commit：键入提交信息前运行</li><li>prepare-commit-msg:启动提交信息编辑器之前，默认信息被创建之后运行</li><li>commit-msg： 用来在提交通过前验证项目状态或提交信息</li><li>post-commit：整个提交过程完成后运行。该钩子一般用于通知之类的事情，通知有人 push 了代码等</li></ul><p>在新版 husky 中<code>$HUSKY_GIT_PARAMS</code>这个变量不再使用了，取而代之的是<code>$1</code>。在新版 husky 中我们的 commit-msg 脚本容如下：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>\n<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>\n\n<span class="token comment">#--no-install 参数表示强制npx使用项目中node_modules目录中的commitlint包</span>\nnpx --no-install commitlint --edit <span class="token variable">$1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这个脚本应该也能使用类似于下面的命令进行添加</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>npx husk <span class="token function">add</span> .husky/commit-msg <span class="token string">&#39;npx --no-install commitlint --edit &quot;<span class="token variable">$1</span>&quot;&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="cspell-处理单词拼写"><a class="header-anchor" href="#cspell-处理单词拼写">#</a> cspell 处理单词拼写</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>/** 对当前更改的文件执行cspell命令 */\n<span class="token function">git</span> <span class="token function">diff</span> --name-only <span class="token operator">|</span> npx cspell --file-list stdin\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',35),p={render:function(s,n){return e}}}}]);