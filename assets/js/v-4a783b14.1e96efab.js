(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[3240],{6787:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-4a783b14",path:"/pages/react/react-schedule/",title:"",lang:"zh-CN",frontmatter:{home:!1},excerpt:"",headers:[{level:3,title:"React Scheduler 使用 MessageChannel 的原因",slug:"react-scheduler-使用-messagechannel-的原因",children:[]},{level:3,title:"react schedule 原理",slug:"react-schedule-原理",children:[]},{level:3,title:"React 渲染性能优化的三个方向",slug:"react-渲染性能优化的三个方向",children:[]},{level:3,title:"react 更新遍历",slug:"react-更新遍历",children:[]}],filePathRelative:"pages/react/react-schedule/README.md",git:{updatedTime:1745673668e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:5}]}}},6349:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>b});var p=a(6252);const e={href:"https://juejin.cn/post/7208222652619800613#heading-5",target:"_blank",rel:"noopener noreferrer"},t=(0,p.Uk)("React Schedule 核心"),o=(0,p.Uk)(),c=(0,p.Wm)("span",{style:{color:"#bbb",float:"right"}},"2023-12-10",-1),l={href:"https://zhuanlan.zhihu.com/p/450267610?utm_id=0",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("Schedule 核心流程图"),u=(0,p.Uk)(),i=(0,p.Wm)("span",{style:{color:"#bbb",float:"right"}},"2023-12-12",-1),k=(0,p.uE)('<h3 id="react-scheduler-使用-messagechannel-的原因"><a class="header-anchor" href="#react-scheduler-使用-messagechannel-的原因">#</a> React Scheduler 使用 MessageChannel 的原因</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>React Scheduler 使用 MessageChannel 的原因为：生成宏任务，实现：<br> 将主线程还给浏览器，以便浏览器更新页面。<br> 浏览器更新页面后继续执行未完成的任务。</p><p>为什么不使用微任务呢？<br> 微任务将在页面更新前全部执行完，所以达不到「将主线程还给浏览器」的目的。</p><p>为什么不使用 setTimeout(fn, 0) 呢？ 递归的 setTimeout() 调用会使调用间隔变为 4ms，导致浪费了 4ms。</p><p>为什么不使用 rAF() 呢？<br> 如果上次任务调度不是 rAF() 触发的，将导致在当前帧更新前进行两次任务调度。<br> 页面更新的时间不确定，如果浏览器间隔了 10ms 才更新页面，那么这 10ms 就浪费了。</p></div><h3 id="react-schedule-原理"><a class="header-anchor" href="#react-schedule-原理">#</a> react schedule 原理</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> localSetTimeout <span class="token operator">=</span> <span class="token keyword">typeof</span> setTimeout <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">?</span> setTimeout <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> localClearTimeout <span class="token operator">=</span> <span class="token keyword">typeof</span> clearTimeout <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">?</span> clearTimeout <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> localSetImmediate <span class="token operator">=</span> <span class="token keyword">typeof</span> setImmediate <span class="token operator">!==</span> <span class="token string">&quot;undefined&quot;</span> <span class="token operator">?</span> setImmediate <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> startTime<span class="token punctuation">;</span> <span class="token comment">// 记录开始时间</span>\n<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> currentIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 当前遍历的索引</span>\n<span class="token keyword">const</span> totalCount <span class="token operator">=</span> <span class="token number">20000000</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">getCurrentTime</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 调度应该被中断吗</span>\n<span class="token keyword">function</span> <span class="token function">shouldYieldToHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> timeElapsed <span class="token operator">=</span> <span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span>\n  <span class="token comment">// 如果当前时间减去开始时间小于 5ms, 那么继续调度</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>timeElapsed <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">performWorkUntilDeadline</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> currentTime <span class="token operator">=</span> <span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  startTime <span class="token operator">=</span> currentTime<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> hasTimeRemaining <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 有剩余时间</span>\n\n  <span class="token keyword">let</span> hasMoreWork <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这里执行的函数就是 flushWork，flushWork 如果返回一个 true 那么表示还有任务</span>\n    <span class="token comment">// 这里的 是 workLoop 循环里 return 的， 如果 return true, 那么表示还有剩余的任务，只是时间用完了，被中断了</span>\n    hasMoreWork <span class="token operator">=</span> <span class="token function">flushWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasMoreWork<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">schedulePerformWorkUntilDeadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> schedulePerformWorkUntilDeadline<span class="token punctuation">;</span>\n<span class="token comment">// react 中调度的优先级  setImmediate &gt; MessageChannel &gt; setTimeout</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> localSetImmediate <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">schedulePerformWorkUntilDeadline</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">localSetImmediate</span><span class="token punctuation">(</span>performWorkUntilDeadline<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> MessageChannel <span class="token operator">!==</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> port <span class="token operator">=</span> channel<span class="token punctuation">.</span>port2<span class="token punctuation">;</span>\n  channel<span class="token punctuation">.</span>port1<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> performWorkUntilDeadline<span class="token punctuation">;</span>\n  <span class="token function-variable function">schedulePerformWorkUntilDeadline</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">schedulePerformWorkUntilDeadline</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">localSetTimeout</span><span class="token punctuation">(</span>performWorkUntilDeadline<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">flushWork</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">workLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">workLoop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentIndex <span class="token operator">&lt;</span> totalCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">work</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> currentIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> currentIndex <span class="token operator">&lt;</span> totalCount <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">shouldYieldToHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> currentIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    sum <span class="token operator">+=</span> currentIndex<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">performWorkUntilDeadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br></div></div><h3 id="react-渲染性能优化的三个方向"><a class="header-anchor" href="#react-渲染性能优化的三个方向">#</a> React 渲染性能优化的三个方向</h3><ul><li><p><code>减少计算的量</code> 对应到 React 中就是减少渲染的节点 或者 降低组件渲染的复杂度。</p></li><li><p><code>利用缓存</code> 对应到 React 中就是如何避免重新渲染，利用函数式编程的 memo 方式来避免组件重新渲染。</p></li><li><p><code>精确重新计算的范围</code> 对应到 React 中就是绑定组件和状态关系, 精确判断更新的&#39;时机&#39;和&#39;范围&#39;. 只重新渲染&#39;脏&#39;的组件，或者说降低渲染范围,不要滥用 Context。</p></li></ul><h3 id="react-更新遍历"><a class="header-anchor" href="#react-更新遍历">#</a> react 更新遍历</h3><p>react 遍历是分内外两层循环，深度优先遍历， Fiber 树是边创建边遍历的，每个节点都经历了「创建、Diffing、收集副作用（要改哪些节点）」的过程。其中，创建、Diffing 要自上而下，因为有父才有子；收集副作用要自下而上最终收集到根节点 ：：：tip 整个遍历由 performUnitOfWork 发起，为深度优先遍历 从根节点开始，循环调 beginWork 向下爬树（黄色箭头，每个箭头表示一次调用） 到达叶子节点（beginWork 爬不下去）后，调 completeUnitOfWork 向上爬到下一个未遍历过的节点，也就是第一个出现的祖先兄弟节点（绿色箭头，每个箭头表示一次调用） ：：： beginWork 负责创建、Diffing，completeUnitOfWork 负责收集副作用</p><ul><li>requestAnimationFrame 的作用： 对齐浏览器渲染周期，优化任务执行时机； 提供时间切片的时间基准。</li><li>MessageChannel 的作用： 通过宏任务分片实现任务中断与恢复,在浏览器事件循环中插入任务分片，确保主线程能及时响应高优先级事件</li></ul><h4 id="shouldyieldtohost-计算逻辑"><a class="header-anchor" href="#shouldyieldtohost-计算逻辑">#</a> shouldYieldToHost 计算逻辑</h4><p>‌1、帧时间阈值设定 ‌ 浏览器每帧的渲染周期通常为 16.6ms（对应 60Hz 刷新率），React 默认将每帧的 ‌ 允许执行时间 ‌ 设置为 5ms，剩余时间预留给浏览器渲染和其他任务。 通过 requestAnimationFrame 获取当前帧的起始时间 frameTime，并计算截止时间 deadline = frameTime + 5ms57。</p><p>‌2、实时时间对比 ‌ 在任务执行过程中，通过 performance.now() 或 Date.now() 获取当前时间 currentTime。 若 currentTime &gt;= deadline，表示当前帧的可用时间已耗尽，shouldYieldToHost 返回 true，触发任务中断 15。</p><p>二、‌ 优先级影响中断阈值 ‌ 不同优先级的差异 ‌ React 定义了多种任务优先级（如 ImmediatePriority、UserBlockingPriority 等），不同优先级对应不同的时间切片阈值。 高优先级任务可能允许更长的执行时间（如 10ms）； 低优先级任务可能被严格限制（如 3ms）</p>',13),b={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",e,[t,(0,p.Wm)(a)]),o,c]),(0,p.Wm)("li",null,[(0,p.Wm)("a",l,[r,(0,p.Wm)(a)]),u,i])]),k],64)}}}}]);