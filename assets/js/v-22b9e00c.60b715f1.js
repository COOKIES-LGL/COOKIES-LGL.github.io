(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[2516],{7300:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-22b9e00c",path:"/pages/backend/TerminalCommands/",title:"",lang:"zh-CN",frontmatter:{sideBar:!1},excerpt:"",headers:[{level:2,title:"terminal commands 常用指令",slug:"terminal-commands-常用指令",children:[{level:3,title:"grep",slug:"grep",children:[]},{level:3,title:"man",slug:"man",children:[]},{level:3,title:"cat",slug:"cat",children:[]},{level:3,title:"awk",slug:"awk",children:[]},{level:3,title:"sed",slug:"sed",children:[]},{level:3,title:"head",slug:"head",children:[]},{level:3,title:"tail",slug:"tail",children:[]},{level:3,title:"chmod",slug:"chmod",children:[]},{level:3,title:"xargs",slug:"xargs",children:[]},{level:3,title:"find",slug:"find",children:[]},{level:3,title:"telnet",slug:"telnet",children:[]}]}],filePathRelative:"pages/backend/TerminalCommands/README.md",git:{updatedTime:1737884335e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:2}]}}},8283:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>l});const e=(0,a(6252).uE)('<h2 id="terminal-commands-常用指令"><a class="header-anchor" href="#terminal-commands-常用指令">#</a> terminal commands 常用指令</h2><h3 id="grep"><a class="header-anchor" href="#grep">#</a> grep</h3><p>是一个在文本文件中搜索特定模式的命令行工具</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 模式 <span class="token punctuation">[</span>文件<span class="token punctuation">..</span>.<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>常用选项 -i：忽略大小写。 -v：反向匹配，即显示不包含模式的行。 -r 或 -R：递归搜索目录中的文件。 -w：只匹配整个单词。 -c：只输出匹配的行数。 -l：显示包含匹配模式的文件列表。 -L：显示不包含匹配模式的文件列表。 -n：显示匹配行的行号。 -e：使用多个模式进行匹配。 -f：从文件中读取模式进行匹配。 -o：只输出匹配的部分。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">grep</span> -i <span class="token string">&quot;hello&quot;</span> file.txt\n<span class="token comment"># 在 file.txt 中搜索包含 &quot;hello&quot;、&quot;Hello&quot;、&quot;HELLO&quot; 等不区分大小写的行</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="man"><a class="header-anchor" href="#man">#</a> man</h3><p>man 命令的作用是查看 Linux 或 Unix 系统中命令、函数、系统调用等的手册页面，帮助用户了解特定命令的用法、选项和参数 ‌</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">man</span> <span class="token function">ls</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="cat"><a class="header-anchor" href="#cat">#</a> cat</h3><p>‌1、显示文件内容 ‌</p><p>使用 cat 命令查看名为 file.txt 的文件内容：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cat</span> file.txt\n<span class="token comment"># 这将输出file.txt中的所有内容到终端上‌12。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>‌ 2、创建新文件 ‌</p><p>使用 cat 命令创建一个名为 newfile.txt 的新文件，并输入内容：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token operator">&gt;</span> newfile.txt\n<span class="token comment"># 此时可以开始输入内容，输入完成后按 Ctrl+D 保存并退出。这样，输入的内容将被保存到 newfile.txt。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>‌3、合并文件 ‌</p><p>使用 cat 命令将 file1.txt 和 file2.txt 的内容合并到一个名为 mergedFile.txt 的新文件中：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cat</span> file1.txt file2.txt <span class="token operator">&gt;</span> mergedFile.txt\n<span class="token comment"># 这将把 file1.txt 和 file2.txt 的内容依次写入 mergedFile.txt。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>‌4、显示行号 ‌</p><p>使用 cat 命令显示 file.txt 的内容，并为每一行加上行号：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cat</span> -n file.txt\n<span class="token comment"># 这将输出 file.txt 的内容，并在每一行的前面加上行号。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="awk"><a class="header-anchor" href="#awk">#</a> awk</h3><p>用于在 Linux/Unix 系统中对文本和数据进行处理</p><h3 id="sed"><a class="header-anchor" href="#sed">#</a> sed</h3><p>‌sed 命令是 Linux 和 Unix 系统中的一个强大文本处理工具，全称为 Stream Editor（流编辑器）实现对文本的查找、替换、删除、插入等多种操作</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;s/old/new/g&#39;</span> file.txt\n<span class="token comment"># 将文件file.txt中的old替换为new</span>\n<span class="token function">sed</span> <span class="token string">&#39;3d&#39;</span> file.txt\n<span class="token comment"># 删除特定行‌：删除文件file.txt的第3行</span>\n<span class="token function">sed</span> <span class="token string">&#39;2i\\This is an inserted line&#39;</span> file.txt\n<span class="token comment"># 在第2行前插入This is an inserted line</span>\n<span class="token function">sed</span> <span class="token string">&#39;2a\\This is an appended line&#39;</span> file.txt\n<span class="token comment"># 在第2行后追加This is an appended line</span>\n<span class="token function">sed</span> -n <span class="token string">&#39;1,5p&#39;</span> file.txt\n<span class="token comment"># 打印特定行‌：打印文件file.txt的第1到5行</span>\n<span class="token function">sed</span> -i <span class="token string">&#39;s/old/new/g&#39;</span> file.txt\n<span class="token comment"># 将文件file.txt中的old替换为new，并直接修改文件内容</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="head"><a class="header-anchor" href="#head">#</a> head</h3><p>‌head 命令的作用是显示文件的开头部分内容，默认情况下会显示文件的前 10 行</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">head</span> filename\n<span class="token function">head</span> -n <span class="token number">5</span> filename\n<span class="token comment"># 显示文件的前5行</span>\n<span class="token function">head</span> -c <span class="token number">20</span> filename\n<span class="token comment"># 显示文件的前20个字节</span>\n<span class="token function">head</span> -v file1 file2 file3\n<span class="token comment"># 显示多个文件的前10行内容，并显示文件名</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="tail"><a class="header-anchor" href="#tail">#</a> tail</h3><p>‌tail 命令主要用于显示指定文件的末尾内容，默认显示最后 10 行，同时支持实时监控文件更新</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">tail</span> -n <span class="token number">20</span> file.txt\n<span class="token comment"># 显示最后 20 行</span>\n<span class="token function">tail</span> -n <span class="token number">20</span> -f file.txt\n<span class="token comment"># -f选项允许tail命令实时监控文件的更新</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="chmod"><a class="header-anchor" href="#chmod">#</a> chmod</h3><p>‌chmod 命令用于修改文件或目录的访问权限 来控制不同用户或用户组对这些文件或目录的访问权限。权限位包括读（r）、写（w）和执行（x）权限，分别对应数字 4、2 和 1</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token number">777</span> file.txt\n<span class="token comment"># 使file.txt对所有用户开放读、写和执行权限</span>\n<span class="token function">chmod</span> <span class="token number">755</span> directory\n<span class="token comment"># 使directory的所有者有读、写和执行权限，用户组和其他用户有读和执行权限</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="xargs"><a class="header-anchor" href="#xargs">#</a> xargs</h3><p>是将标准输入的数据转换为命令行参数，然后传递给其他命令执行</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;file1.txt file2.txt&quot;</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">rm</span>\n<span class="token comment"># 这条命令会删除file1.txt和file2.txt两个文件</span>\n<span class="token function">find</span> <span class="token builtin class-name">.</span> -type f -name <span class="token string">&quot;*.txt&quot;</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> <span class="token string">&quot;keyword&quot;</span>\n<span class="token comment"># ‌结合find命令使用‌：查找文件并将结果传递给其他命令执行</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="find"><a class="header-anchor" href="#find">#</a> find</h3><p>可以根据文件名、类型、大小、修改时间等多种属性进行搜索，并能对搜索结果执行各种操作，如删除、移动、复制或执行命令等 ‌ -name：根据文件的名称搜索文件，支持通配符*‌。 -type：根据文件类型搜索，如 f 代表普通文件，d 代表目录。 -size：根据文件大小搜索，可以使用+、-号来表示大于或小于指定大小的文件。 -mtime、-atime、-ctime：分别根据文件内容修改时间、文件访问时间、文件权限修改时间搜索文件，可以使用+、-号来表示在指定时间之前或之后的时间段。 -user、-group：根据文件的所有者或所属组搜索文件。 -exec：对查找到的文件执行指定的命令，命令需要以{}作为占位符，并以;结束命令序列。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># find [搜索路径] [查找条件] [处理动作]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="telnet"><a class="header-anchor" href="#telnet">#</a> telnet</h3><p>‌Telnet 命令主要用于通过 TCP/IP 协议远程登录到其他计算机或设备，执行相应的命令操作</p><ul><li>远程登录</li><li>测试端口连接</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># telnet [主机名] [端口号]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',46),l={render:function(n,s){return e}}}}]);