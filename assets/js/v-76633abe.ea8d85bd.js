(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[8595],{5528:(e,t,l)=>{"use strict";l.r(t),l.d(t,{data:()=>s});const s={key:"v-76633abe",path:"/pages/blog-daily/use-test-dev-for-chrome/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"背景",slug:"背景",children:[]},{level:3,title:"原理",slug:"原理",children:[]},{level:3,title:"实现",slug:"实现",children:[]}],filePathRelative:"pages/blog-daily/use-test-dev-for-chrome/README.md",git:{updatedTime:1733294272e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:2},{name:"guilin.li",email:"1344714332@qq.com",commits:2}]}}},1679:(e,t,l)=>{"use strict";l.r(t),l.d(t,{default:()=>b});var s=l(6252);const n=(0,s.uE)('<h3 id="背景"><a class="header-anchor" href="#背景">#</a> 背景</h3><p>  开发业务需求时，或者需要定位不同环境的前端问题时，除了其他 debug 与问题定位方案之外，最终都有可能需要在本地启动环境然后 debug。 但是由于 samesite 的限制，会产生跨域问题，或者某些后端服务的限制，referer 校验等等，都会对本地 debug 进行阻塞，为了解决这个问题</p><h3 id="原理"><a class="header-anchor" href="#原理">#</a> 原理</h3><p>通过代理我们需要的资源映射至本地文件，其他所有内容均正常请求，达到类似“替换个别资源”的效果。</p><p>核心代理点：</p><p>1、替换页面的 html 文件指向到本地<br> 2、间接的替换 js 与 css 资源文件，在代码更新重新编译后，页面刷新即可访问<br> 3、api 相关依然访问生产环境，所以对于请求来说，属于同域，不存在跨域问题<br> 4、代理登陆路由，登陆相关操作继续走生产环境，一般本地开发不包含 account 模块</p><h3 id="实现"><a class="header-anchor" href="#实现">#</a> 实现</h3><h4 id="浏览器内代理"><a class="header-anchor" href="#浏览器内代理">#</a> 浏览器内代理</h4><p><strong>依赖 whistle 实现 node 服务</strong></p><div class="language-bash ext-sh"><pre class="language-bash"><code>\n<span class="token function">npm</span> <span class="token function">install</span> -g whistle // 安装\nor\n<span class="token function">yarn</span> <span class="token function">add</span> global whistle\n\nw2 start // 使用默认端口\nor\nw2 start -p <span class="token number">8080</span>  //设置自定义端口\n\nw2 stop //启动\n\n<span class="token number">127.0</span>.0.1:8899 // 访问\n</code></pre></div>',10),a=(0,s.Wm)("strong",null,"whistle 配置:",-1),r={href:"https://wproxy.org/whistle/quickstart.html",target:"_blank",rel:"noopener noreferrer"},o=(0,s.Uk)("(官方教程)"),p=(0,s.Uk)(" 访问 127.0.0.1:8899 -> Rules -> Default -> 粘贴下面的配置信息"),i=(0,s.uE)('<p>匹配规则（以下规则为 seller center 项目联调时的配置）</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>// 可根据不同环境要求自行调整域名和环境等信息 /^https://(seller.|banhang.)(.<em>.)?shop.(com.)?.</em>?/(.<em>)/ localhost:4200/$4 excludeFilter:///(.</em>)?/api/.*/ excludeFilter:///favicon.ico/ excludeFilter:///registration/static/translation/ excludeFilter:////account/signin/ excludeFilter:///pfb/</p></div><p>规则解释：</p><p>目标环境下，除了 Api 模块 Pfb 模块 登陆功能 admin 入口 以外的所有资源， 均匹配本地的 localhost:4200 端口（或者你其他项目的其他端口），<br> 至此， 页面访问的 html 文件，以及对应的 js css 文件都会实际请求本地</p><p>配置完成后需要安装证书以支持 https</p><p>访问 127.0.0.1:8899 -&gt; HTTPS -&gt; Download root CA -&gt; 完成安装</p><p>打开下载的文件，执行安装</p><p>然后重启服务(w2 stop w2 start)</p>',8),c={href:"https://jingyan.baidu.com/article/219f4bf7a0b737de442d38e8.html",target:"_blank",rel:"noopener noreferrer"},h=(0,s.Wm)("strong",null,"SwitchyOmega 安装",-1),u=(0,s.Wm)("p",null,[(0,s.Wm)("strong",null,"SwitchyOmega 配置"),(0,s.Wm)("br"),(0,s.Uk)(" 新增情景模式（代理服务器） 命名：Whistle 配置代理协议： http 代理服务器：127.0.0.1 代理端口： 8899")],-1),m=(0,s.Wm)("p",null,"新增情景模式（切换规则） 命名： SellerCenter 条件配置：seller.shop. 情景模式: 选择 Whistle",-1),d=(0,s.Wm)("p",null,"可以按照配置多个项目的转发规则，灵活切换",-1),g=(0,s.Wm)("p",null,[(0,s.Uk)("到此，配置成功，"),(0,s.Wm)("br"),(0,s.Uk)(" 需要确保 whistle 已经开启，whistle 操作台的开关置为 ON，上述配置均已完成后， 访问目标页面，使用 chrome 插件 switchyomega 切换情景模式至 SellerCenter, 页面会刷新按照你配置的代理规则进行加载。")],-1),b={render:function(e,t){const l=(0,s.up)("OutboundLink");return(0,s.wg)(),(0,s.j4)(s.HY,null,[n,(0,s.Wm)("p",null,[a,(0,s.Wm)("a",r,[o,(0,s.Wm)(l)]),p]),i,(0,s.Wm)("p",null,[(0,s.Wm)("a",c,[h,(0,s.Wm)(l)])]),u,m,d,g],64)}}}}]);