(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[3342],{5065:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>t});const t={key:"v-7fc2d6a7",path:"/pages/node/utils/",title:"",lang:"zh-CN",frontmatter:{home:!1,sidebar:!1},excerpt:"",headers:[{level:3,title:"node utils 模块常用发法",slug:"node-utils-模块常用发法",children:[]}],filePathRelative:"pages/node/utils/README.md",git:{updatedTime:172681525e4,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:2}]}}},1866:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>e});const t=(0,a(6252).uE)('<h3 id="node-utils-模块常用发法"><a class="header-anchor" href="#node-utils-模块常用发法">#</a> node utils 模块常用发法</h3><h4 id="inherits"><a class="header-anchor" href="#inherits">#</a> inherits</h4><p>inherits 方法用于将一个父类的方法继承给该父类的子类。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>util<span class="token punctuation">.</span><span class="token function">inherits</span><span class="token punctuation">(</span>constructor<span class="token punctuation">,</span> superConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="iserror"><a class="header-anchor" href="#iserror">#</a> isError</h4><p>isError 方法判断一个参数值是否为错误对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>util<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="isdate"><a class="header-anchor" href="#isdate">#</a> isDate</h4><p>isDate 方法判断一个参数值是否为日期类型。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>util<span class="token punctuation">.</span><span class="token function">isDate</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="isregexp"><a class="header-anchor" href="#isregexp">#</a> isRegExp</h4><p>isRegExp 方法判断一个参数值是否为正则表达式。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>util<span class="token punctuation">.</span><span class="token function">isRegExp</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="inspect"><a class="header-anchor" href="#inspect">#</a> inspect</h4><p>inspect 方法用于返回一个字符串，该字符串中包含了一个对象的信息，在调试应用程序的过程中该方法将变得非常有用</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="log"><a class="header-anchor" href="#log">#</a> log</h4><p>log 方法用于将一个字符串作为标准输出流进行输出，在该字符串前输出系统当前时间。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>util<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="debug"><a class="header-anchor" href="#debug">#</a> debug</h4><p>debug 方法为一个同步方法，该方法阻塞当前线程，将一个字符串作为标准错误输出流进行输出</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>util<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="format"><a class="header-anchor" href="#format">#</a> format</h4><p>将第一个参数值作为一个格式化字符串，将其他参数值作为该格式化字符串中所使用的各种参数，返回一个经过格式化处理后的字符串</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;您输入了%d个参数，参数值分别为%s,%s与%s。&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;baz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 您输入了3个参数，参数值分别为foo,bar与baz</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="promisify"><a class="header-anchor" href="#promisify">#</a> promisify</h4><p>‌ 用于将遵循 Node.js 回调风格的函数转换为返回 Promise 的函数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 将fs.readFile()转换为一个返回Promise的函数</span>\n<span class="token keyword">const</span> readFile <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./file.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 类似等效</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&quot;./test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',28),e={render:function(s,n){return t}}}}]);