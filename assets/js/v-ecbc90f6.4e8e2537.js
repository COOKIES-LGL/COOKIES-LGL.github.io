(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[5042],{5713:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-ecbc90f6",path:"/pages/react/react-19/",title:"",lang:"zh-CN",frontmatter:{home:!1},excerpt:"",headers:[{level:3,title:"React Compiler",slug:"react-compiler",children:[]},{level:3,title:"传递 ref 无需 forwardRef",slug:"传递-ref-无需-forwardref",children:[]},{level:3,title:"use() Hook",slug:"use-hook",children:[]},{level:3,title:"Directives 新的实现方式",slug:"directives-新的实现方式",children:[]},{level:3,title:"useOptimistic() 提升用户体验",slug:"useoptimistic-提升用户体验",children:[]},{level:3,title:"Server Components 的稳定支持",slug:"server-components-的稳定支持",children:[]},{level:3,title:"引入了更简洁的 Context 写法",slug:"引入了更简洁的-context-写法",children:[]},{level:3,title:"Async 脚本和资源预加载支持",slug:"async-脚本和资源预加载支持",children:[]},{level:3,title:"原生支持文档元数据",slug:"原生支持文档元数据",children:[]},{level:3,title:"样式表优先级管理",slug:"样式表优先级管理",children:[]}],filePathRelative:"pages/react/react-19/README.md",git:{updatedTime:1733975037e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:1}]}}},854:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h3 id="react-compiler"><a class="header-anchor" href="#react-compiler">#</a> React Compiler</h3><p>这个编译器将你的 React 代码转换成纯 JavaScript，提升性能，并且免去手动优化的麻烦。 使用 useCallback、useMemo 和 memo 进行手动优化的日子已经结束。新的编译器会在后台优化你的代码，因此你可以专注于编写清晰优雅的 React 组件</p><h3 id="传递-ref-无需-forwardref"><a class="header-anchor" href="#传递-ref-无需-forwardref">#</a> 传递 ref 无需 forwardRef</h3><p>不再需要 forwardRef，refs 现在像普通的 props 一样传递</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> innerRef <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>innerRef<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="use-hook"><a class="header-anchor" href="#use-hook">#</a> use() Hook</h3><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> use <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于获取数据的函数</span>\n  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">DataFetchingComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `use()` 会在 promise 解析之前挂起组件</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">数据:</span><span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> DataFetchingComponent<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="directives-新的实现方式"><a class="header-anchor" href="#directives-新的实现方式">#</a> Directives 新的实现方式</h3><p>使用 use client 和 use server 来声明客户端或服务器端组件</p><h3 id="useoptimistic-提升用户体验"><a class="header-anchor" href="#useoptimistic-提升用户体验">#</a> useOptimistic() 提升用户体验</h3><p>对于实时应用，useOptimistic() Hook 非常有用。它允许乐观更新，使你的应用感觉更流畅，通过立即更新 UI 并在后台与服务器同步来提升用户体验。</p><h3 id="server-components-的稳定支持"><a class="header-anchor" href="#server-components-的稳定支持">#</a> Server Components 的稳定支持</h3><p>Server Components 提供了一种全新的组件渲染模式，在服务器上提前渲染，减少了客户端的渲染负担</p><h3 id="引入了更简洁的-context-写法"><a class="header-anchor" href="#引入了更简洁的-context-写法">#</a> 引入了更简洁的 Context 写法</h3><p>直接使用<code>&lt;Context&gt;</code>代替<code>&lt;Context.Provider&gt;</code></p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeContext</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dark<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeContext</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="async-脚本和资源预加载支持"><a class="header-anchor" href="#async-脚本和资源预加载支持">#</a> Async 脚本和资源预加载支持</h3><p>为<code>&lt;script&gt;</code>标签添加了异步加载支持，同时优化了资源的预加载和预初始化功能。允许在组件内部声明脚本，并由 React 自动去重</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> preinit<span class="token punctuation">,</span> preload <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">preinit</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.com/script.js&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">&quot;script&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">preload</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.com/font.woff&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token operator">:</span> <span class="token string">&quot;font&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="原生支持文档元数据"><a class="header-anchor" href="#原生支持文档元数据">#</a> 原生支持文档元数据</h3><p>引入了对<code>&lt;title&gt;</code>、<code>&lt;meta&gt;</code>和<code>&lt;link&gt;</code>等文档元数据标签的原生支持。这些标签可直接在组件中声明，React 会自动将它们提升至<code>&lt;head&gt;</code>， 并确保与服务端渲染和客户端渲染兼容.</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">BlogPost</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> post <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>author<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>author<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="样式表优先级管理"><a class="header-anchor" href="#样式表优先级管理">#</a> 样式表优先级管理</h3><p>增强了样式表的加载管理，通过指定 precedence 属性，可以动态调整样式表的插入顺序，确保正确的样式覆盖。</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>styles.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">precedence</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>high<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Styled Content</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',25),p={render:function(n,s){return t}}}}]);