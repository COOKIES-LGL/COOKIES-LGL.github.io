(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[5076],{9008:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-0b3a6d15",path:"/pages/fe-sre/webpack/",title:"",lang:"zh-CN",frontmatter:{home:!1},excerpt:"",headers:[{level:3,title:"webpack 使用笔记",slug:"webpack-使用笔记",children:[]}],filePathRelative:"pages/fe-sre/webpack/README.md",git:{updatedTime:1741591165e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:24}]}}},106:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>C});var p=a(6252);const e=(0,p.uE)('<h3 id="webpack-使用笔记"><a class="header-anchor" href="#webpack-使用笔记">#</a> webpack 使用笔记</h3><p>Webpack 在构建过程中会触发一系列的生命周期事件，开发者可以针对这些事件进行相应的处理或插件化。下面是 Webpack 的主要生命周期事件：</p><ul><li>beforeRun：在 Webpack 开始执行构建任务前触发的事件。</li><li>run：Webpack 开始进行编译打包时触发的事件。</li><li>beforeCompile：在 Webpack 开始编译之前触发的事件。</li><li>compile：Webpack 开始编译时触发的事件。</li><li>compilation：在 Webpack 的每次编译构建过程中触发的事件。</li><li>emit：在 Webpack 输出资源到 output 目录之前触发的事件。</li><li>afterEmit：在 Webpack 输出资源到 output 目录之后触发的事件。</li><li>done：Webpack 构建完成所有的编译、和输出等任务之后触发的事件。</li><li>failed：Webpack 构建过程中出现错误时触发的事件。</li></ul><p>可以通过 npm install --production 实现仅安装 dependencies 中的依赖</p>',4),t={href:"https://zhuanlan.zhihu.com/p/443964387",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("一篇详解 webpack"),c=(0,p.Wm)("br",null,null,-1),l={href:"https://pcaaron.github.io/pages/fe/webpack/plugin.html#%E6%8F%92%E4%BB%B6%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("参考编写一个 loader 和 plugins"),u=(0,p.Wm)("br",null,null,-1),i={href:"https://zhuanlan.zhihu.com/p/397174187",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("webpack-Loader 详解"),b=(0,p.Wm)("br",null,null,-1),m={href:"https://segmentfault.com/a/1190000041726881?sort=votes",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("webpack5 持久缓存"),g=(0,p.Wm)("br",null,null,-1),h={href:"https://www.pipipi.net/30583.html/amp",target:"_blank",rel:"noopener noreferrer"},v=(0,p.Uk)("深度解析 webpack 打包流程"),w=(0,p.Wm)("br",null,null,-1),f={href:"https://www.zhihu.com/tardis/bd/art/149323563",target:"_blank",rel:"noopener noreferrer"},q=(0,p.Uk)("webpack 与 rollup 背后的 acorn"),y=(0,p.Wm)("br",null,null,-1),W={href:"https://blog.csdn.net/qq_17175013/article/details/119769033",target:"_blank",rel:"noopener noreferrer"},j=(0,p.Uk)("webpack5 的新增特性"),S={href:"https://blog.osvlabs.com/?p=582",target:"_blank",rel:"noopener noreferrer"},x=(0,p.Uk)("Https 启动服务"),P=(0,p.uE)('<h4 id="动态匹配配置信息"><a class="header-anchor" href="#动态匹配配置信息">#</a> 动态匹配配置信息</h4><p>如果要根据 webpack.config.js 中的 mode 变量更改打包行为，则必须将配置导出为函数，而不是导出对象：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">&quot;./app.js&quot;</span><span class="token punctuation">,</span>\n  <span class="token comment">//...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env<span class="token punctuation">,</span> argv</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    config<span class="token punctuation">.</span>devtool <span class="token operator">=</span> <span class="token string">&quot;source-map&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> config<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="webpack-的热更新原理"><a class="header-anchor" href="#webpack-的热更新原理">#</a> webpack 的热更新原理</h4><div class="language-m ext-m line-numbers-mode"><pre class="language-m"><code>面试官比较想听到的是工作流程和关键点，非“流水账”式的源码分析。我认为可以这样的介绍：\n\n首先，介绍webpack-dev-server:\nwebpack-dev-server 主要包含了三个部分：\n1.webpack: 负责编译代码\n2.webpack-dev-middleware: 主要负责构建内存文件系统，把webpack的 OutputFileSystem 替换成 InMemoryFileSystem。同时作为Express的中间件拦截请求，从内存文件系统中把结果拿出来。\n3.express：负责搭建请求路由服务。\n\n其次，介绍工作流程:\n1.启动dev-server，webpack开始构建，在编译期间会向 entry 文件注入热更新代码；\n2.Client 首次打开后，Server 和 Client 基于Socket建立通讯渠道；\n3.修改文件，Server 端监听文件发送变动，webpack开始编译，直到编译完成会触发&quot;Done&quot;事件；\n4.Server通过socket 发送消息告知 Client；\n5.Client根据Server的消息（hash值和state状态），通过ajax请求获取 Server 的manifest描述文件；\n6.Client对比当前 modules tree ，再次发请求到 Server 端获取新的JS模块；\n7.Client获取到新的JS模块后，会更新 modules tree并替换掉现有的模块；\n8.最后调用 module.hot.accept() 完成热更新；\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="编写插件在指定插件后执行"><a class="header-anchor" href="#编写插件在指定插件后执行">#</a> 编写插件在指定插件后执行</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyCustomPlugin</span> <span class="token punctuation">{</span>\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>afterPlugins<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;MyCustomPlugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 在这里编写你的逻辑</span>\n      <span class="token comment">// 确保这个插件在SomeOtherPlugin之后执行</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyCustomPlugin<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> SomeOtherPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;some-other-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> MyCustomPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./MyCustomPlugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ... 其他webpack配置</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">SomeOtherPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyCustomPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>请注意，afterPlugins 钩子是在所有插件都应用之后触发的，因此你可以在这个钩子中执行代码，确保它在其他插件之后执行。<br> 如果你需要更精确地控制，可能需要查看特定插件的文档，看看它们提供的钩子，并选择最适合你需求的钩子。</p><h4 id="tapable-事件机制"><a class="header-anchor" href="#tapable-事件机制">#</a> Tapable 事件机制</h4><p>Tapable 是一个类似于 Node.js 中的 EventEmitter 的库，但它更专注于自定义事件的触发和处理。<br> 通过 Tapable 我们可以注册自定义事件，然后在适当的时机去执行自定义事件。<br> 这个和我们所熟知的生命周期函数类似，在特定的时机去触发。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> SyncHook <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;tapable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 实例化 钩子函数 定义形参</span>\n<span class="token keyword">const</span> syncHook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//通过tap函数注册事件</span>\nsyncHook<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">&quot;同步钩子1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;同步钩子1&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//同步钩子 通过call 发布事件</span>\n<span class="token function">syncHook</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;那兔前端&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>通过上面的例子，我们大致可以将 Tapable 的使用分为以下三步:</p><ul><li>实例化钩子函数</li><li>事件注册</li><li>事件触发</li></ul><h4 id="事件注册"><a class="header-anchor" href="#事件注册">#</a> 事件注册</h4><p>同步的钩子要用 tap 方法来注册事件异步的钩子可以像同步方式一样用 tap 方法来注册，也可以用 tapAsync 或 tapPromise 异步方法来注册。</p><ul><li>tapAsync： 使用用 tapAsync 方法来注册 hook 时，必须调用 callback 回调函数。</li><li>tapPromise：使用 tapPromise 方法来注册 hook 时，必须返回一个 pormise ，异步任务完成后 resolve 。</li></ul><h4 id="事件触发"><a class="header-anchor" href="#事件触发">#</a> 事件触发</h4><p>同步的钩子要用 call 方法来触发异步的钩子需要用 callAsync 或 promise 异步方法来触发。</p><ul><li>callAsync：当我们用 callAsync 方法来调用 hook 时，第二个参数是一个回调函数，回调函数的参数是执行任务的最后一个返回值</li><li>promise：当我们用 promise 方法来调用 hook 时，需要使用 then 来处理执行结果，参数是执行任务的最后一个返回值。</li></ul><h4 id="webpack-插件-webpack-provideplugin"><a class="header-anchor" href="#webpack-插件-webpack-provideplugin">#</a> webpack 插件 webpack.ProvidePlugin</h4><p>项目中用到的变量/函数/库或工具，只要配置后就可以在任何地方使用了</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 其他配置...</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack</span><span class="token punctuation">.</span><span class="token function">ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      React<span class="token operator">:</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">,</span>\n      dayjs<span class="token operator">:</span> <span class="token string">&quot;dayjs&quot;</span><span class="token punctuation">,</span>\n      <span class="token comment">// 假设项目中自己定义的utils.js在src目录下</span>\n      Utils<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;src/utils.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// 其他配置...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="farm-新一代构建工具"><a class="header-anchor" href="#farm-新一代构建工具">#</a> Farm 新一代构建工具</h4><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Farm 是一个非常快的基于 Rust 的 Web 构建工具，类似 webpack 和 vite，但更快。 farm resolve, load, transform 所有 asset(js/jsx/ts/tsx、css/sass/less、html、静态资源、json 等)，并将它们打包成一系列可部署文件。 创建项目</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> create farm@latest\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></div><h4 id="purgecss-webpack-plugin"><a class="header-anchor" href="#purgecss-webpack-plugin">#</a> purgecss-webpack-plugin</h4><p>帮助去除未使用的 CSS 代码</p><h4 id="在-webpack-中使用-typescript-配置"><a class="header-anchor" href="#在-webpack-中使用-typescript-配置">#</a> 在 Webpack 中使用 TypeScript 配置</h4><p>使用 TypeScript 来编写 Webpack 配置文件有以下几个显著优势：</p><p>✨ 智能提示：IDE 可以提供准确的代码补全和提示 🛡️ 类型安全：在编译时就能发现潜在的配置错误 🔍 更好的可维护性：类型声明即文档，方便团队协作 🚀 提高开发效率：减少查阅文档的时间</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 安装核心依赖</span>\n<span class="token function">npm</span> <span class="token function">install</span> --save-dev typescript ts-node @types/node @types/webpack\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// webpack.config.ts</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> webpack <span class="token keyword">from</span> <span class="token string">&quot;webpack&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">&quot;webpack-dev-server&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config<span class="token operator">:</span> webpack<span class="token punctuation">.</span>Configuration <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token string">&quot;./foo.js&quot;</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">&quot;foo.bundle.js&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> config<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="解决模块化问题"><a class="header-anchor" href="#解决模块化问题">#</a> 解决模块化问题</h4><p>在使用 TypeScript 编写 Webpack 配置时，最常见的问题是模块化配置</p><p>使用独立的 TypeScript 配置</p><ul><li>安装依赖：</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev --save-exact tsconfig-paths cross-env\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>创建专用配置文件 tsconfig-for-webpack-config.json</li></ul><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;allowSyntheticDefaultImports&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;scripts&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;build&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;cross-env TS_NODE_PROJECT=<span class="token entity" title="\\&quot;">\\&quot;</span>tsconfig-for-webpack-config.json<span class="token entity" title="\\&quot;">\\&quot;</span> webpack&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="purgecss-webpack-plugin-移除无用的-class-样式"><a class="header-anchor" href="#purgecss-webpack-plugin-移除无用的-class-样式">#</a> purgecss-webpack-plugin 移除无用的 class 样式</h4><p>通过 purgecss-webpack-plugin，可以识别没有用到的 class，将其从 css 文件中 treeShaking 掉，需要配合 mini-css-extract-plugin 一起使用</p><h4 id="markdown-使用指南"><a class="header-anchor" href="#markdown-使用指南">#</a> MarkDown 使用指南</h4><ul><li><a href="../../blog-daily/use-markdown">MarkDown</a> <span style="color:#bbb;float:right;">2021-06-24</span></li></ul>',44),C={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("p",null,[(0,p.Wm)("a",t,[o,(0,p.Wm)(a)]),c,(0,p.Wm)("a",l,[r,(0,p.Wm)(a)]),u,(0,p.Wm)("a",i,[k,(0,p.Wm)(a)]),b,(0,p.Wm)("a",m,[d,(0,p.Wm)(a)]),g,(0,p.Wm)("a",h,[v,(0,p.Wm)(a)]),w,(0,p.Wm)("a",f,[q,(0,p.Wm)(a)]),y,(0,p.Wm)("a",W,[j,(0,p.Wm)(a)]),(0,p.Wm)("a",S,[x,(0,p.Wm)(a)])]),P],64)}}}}]);