(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[8301],{7771:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-ecba8be4",path:"/pages/react/react-ts/",title:"",lang:"zh-CN",frontmatter:{home:!1},excerpt:"",headers:[{level:3,title:"react 内置类型",slug:"react-内置类型",children:[]},{level:3,title:"HOC 类型声明",slug:"hoc-类型声明",children:[]},{level:3,title:"Event",slug:"event",children:[]}],filePathRelative:"pages/react/react-ts/README.md",git:{updatedTime:1736770154e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:6}]}}},9272:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const e=(0,a(6252).uE)('<h3 id="react-内置类型"><a class="header-anchor" href="#react-内置类型">#</a> react 内置类型</h3><h4 id="_1-jsx-element"><a class="header-anchor" href="#_1-jsx-element">#</a> 1. JSX.Element</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> global <span class="token punctuation">{</span>\n  <span class="token keyword">namespace</span> <span class="token constant">JSX</span> <span class="token punctuation">{</span>\n    <span class="token keyword">interface</span> <span class="token class-name">Element</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ReactElement<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>JSX.Element 是 ReactElement 的子类型，它没有增加属性，两者是等价的。也就是说两种类型的变量可以相互赋值。<br> JSX.Element 可以通过执行 React.createElement 获得</p><h4 id="_2-react-reactelement"><a class="header-anchor" href="#_2-react-reactelement">#</a> 2. React.ReactElement</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ReactElement<span class="token operator">&lt;</span>\n  <span class="token constant">P</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">,</span>\n  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">|</span> JSXElementConstructor<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> JSXElementConstructor<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span>\n<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n  props<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">;</span>\n  key<span class="token operator">:</span> Key <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>通常情况下，函数组件返回 ReactElement 类型</p><h4 id="_3、react-reactnode"><a class="header-anchor" href="#_3、react-reactnode">#</a> 3、React.ReactNode</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ReactText</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">ReactChild</span> <span class="token operator">=</span> ReactElement <span class="token operator">|</span> ReactText<span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">ReactNodeArray</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span>ReactNode<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">ReactFragment</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">|</span> ReactNodeArray<span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">ReactNode</span> <span class="token operator">=</span> ReactChild <span class="token operator">|</span> ReactFragment <span class="token operator">|</span> ReactPortal <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以看到，ReactNode 是一个联合类型，它可以是 <code>string</code>、<code>number</code>、<code>ReactElement</code>、<code>null</code>、<code>boolean</code>、<code>ReactNodeArray</code><br> 由此可知。ReactElement 类型的变量可以直接赋值给 ReactNode 类型的变量，但反过来是不行的.<br> 类组件的 render 成员函数会返回 ReactNode 类型的值.</p><h4 id="_4、react-cssproperties"><a class="header-anchor" href="#_4、react-cssproperties">#</a> 4、React.CSSProperties</h4><p>React.CSSProperties 是 React 基于 TypeScript 定义的 CSS 属性类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>style<span class="token operator">?</span><span class="token operator">:</span> CSSProperties <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="hoc-类型声明"><a class="header-anchor" href="#hoc-类型声明">#</a> HOC 类型声明</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>React<span class="token punctuation">.</span>PropsWithChildren<span class="token operator">&lt;</span>IProps<span class="token operator">&gt;&gt;</span>\nChildren<span class="token operator">:</span> React<span class="token punctuation">.</span>ComponentType<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="event"><a class="header-anchor" href="#event">#</a> Event</h3><p>常见的 Event 事件对象如下：</p><ul><li>剪切板事件对象：React.ClipboardEvent&lt;T = Element&gt;</li><li>拖拽事件对象：React.DragEvent&lt;T = Element&gt;</li><li>焦点事件对象：React.FocusEvent&lt;T = Element&gt;</li><li>表单事件对象：React.FormEvent&lt;T = Element&gt;</li><li>Change 事件对象：React.ChangeEvent&lt;T = Element&gt;</li><li>键盘事件对象：React.KeyboardEvent&lt;T = Element&gt;</li><li>鼠标事件对象：React.MouseEvent&lt;T = Element, E = NativeMouseEvent&gt;</li><li>触摸事件对象：React.TouchEvent&lt;T = Element&gt;</li><li>滚轮事件对象：React.WheelEvent&lt;T = Element&gt;</li><li>动画事件对象：React.AnimationEvent&lt;T = Element&gt;</li><li>过渡事件对象：React.TransitionEvent&lt;T = Element&gt;</li></ul><h4 id="直接返回-children-prop-是否需要使用花括号"><a class="header-anchor" href="#直接返回-children-prop-是否需要使用花括号">#</a> 直接返回 children prop 是否需要使用花括号？</h4><p>1、在 JSX 中，如果你想要直接返回 children prop，你需要根据 children 的结构来决定是否需要使用花括号{} ‌ 如果 children 是一个单一的 React 元素 ‌： 你可以直接返回它，而不需要额外的花括号。这是因为 JSX 会自动处理单一的 React 元素返回。</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 假设children是一个单一的React元素，如&lt;h1&gt;Hello&lt;/h1&gt; 直接返回，不需要花括号</span>\n  <span class="token keyword">return</span> children<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>2、如果 children 可能包含多个元素 ‌： 你需要使用花括号{}来包裹 children，以确保它们被正确地渲染为 JSX 表达式的一部分。这是因为多个元素需要被包裹在一个父元素中（如<code>&lt;div&gt;</code>），或者通过数组/片段的形式来渲染。</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 假设children包含多个元素，如&lt;h1&gt;Hello&lt;/h1&gt;和&lt;p&gt;World&lt;/p&gt;  使用花括号来确保多个元素被正确渲染</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',23),t={render:function(n,s){return e}}}}]);