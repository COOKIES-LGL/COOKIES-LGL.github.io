(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[6691],{2484:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-698708a6",path:"/pages/typescript/",title:"",lang:"zh-CN",frontmatter:{home:!1,sidebar:!1},excerpt:"",headers:[{level:3,title:"Partial",slug:"partial",children:[]},{level:3,title:"Required",slug:"required",children:[]},{level:3,title:"ReturnType",slug:"returntype",children:[]},{level:3,title:"Pick",slug:"pick",children:[]},{level:3,title:"Omit",slug:"omit",children:[]},{level:3,title:"Extract",slug:"extract",children:[]},{level:3,title:"Typescript 装饰器",slug:"typescript-装饰器",children:[]},{level:3,title:"#私有字段",slug:"私有字段",children:[]},{level:3,title:"参考链接",slug:"参考链接",children:[]}],filePathRelative:"pages/typescript/README.md",git:{updatedTime:1744614909e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:12},{name:"guilin.li",email:"1344714332@qq.com",commits:3}]}}},5351:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>q});var p=a(6252);const t={href:"https://mp.weixin.qq.com/s?__biz=MzU2MTIyNDUwMA==&mid=2247496918&idx=1&sn=1cf004f0a4091e37bfadff5f360c6326&chksm=fc7eba8dcb09339b09a6868c4ef6acfe08d063f3cc17eb3d36986a05221b4a3fedcf8a815475",target:"_blank",rel:"noopener noreferrer"},e=(0,p.Uk)("Typescript 工具类型"),o={href:"https://www.jianshu.com/p/276a7d596744",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("Typescript 类型体操"),l=(0,p.Uk)("Ts 实用小技巧"),u=(0,p.Uk)("Ts 类型推断"),r=(0,p.Uk)("Ts 开发笔记"),i={href:"https://juejin.cn/post/7386532770476490761?searchId=2024102911444713AE83BB7609117AF804",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("Tsconfig 配置详解"),b={href:"https://zhuanlan.zhihu.com/p/643674031",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Uk)("Reflect-metadata"),d={href:"https://juejin.cn/post/7276408879364948028",target:"_blank",rel:"noopener noreferrer"},g=(0,p.Uk)("Tsconfig moduleResolution"),y={href:"https://juejin.cn/post/7276408879364948028",target:"_blank",rel:"noopener noreferrer"},w=(0,p.Uk)("详解 module、moduleResolution"),h=(0,p.uE)('<h3 id="partial"><a class="header-anchor" href="#partial">#</a> Partial</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">PullDownRefreshConfig</span> <span class="token punctuation">{</span>\n  threshold<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  stop<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">PullDownRefreshOptions</span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>PullDownRefreshConfig<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n * type PullDownRefreshOptions = <span class="token punctuation">{</span>\n *   threshold?: number | undefined;\n *   stop?: number | undefined;\n * <span class="token punctuation">}</span>\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="required"><a class="header-anchor" href="#required">#</a> Required</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">PullDownRefreshConfig</span> <span class="token punctuation">{</span>\n  threshold<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  stop<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">PullDownRefreshOptions</span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>PullDownRefreshConfig<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">PullDownRefresh</span> <span class="token operator">=</span> Required<span class="token operator">&lt;</span>Partial<span class="token operator">&lt;</span>PullDownRefreshConfig<span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n * type PullDownRefresh = <span class="token punctuation">{</span>\n *   threshold: number;\n *   stop: number;\n * <span class="token punctuation">}</span>\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="returntype"><a class="header-anchor" href="#returntype">#</a> ReturnType</h3><p>TypeScript 中，你可以使用内置的 ReturnType 工具类型来获取函数的返回类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> multiply <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">MultiplyReturnType</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> multiply<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// 等同于 number</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="pick"><a class="header-anchor" href="#pick">#</a> Pick</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Pick 的源码</span>\n<span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="omit"><a class="header-anchor" href="#omit">#</a> Omit</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Omit 的源码</span>\n<span class="token keyword">type</span> <span class="token class-name">Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="extract"><a class="header-anchor" href="#extract">#</a> Extract</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Extract实现源码 原理很简单</span>\n<span class="token keyword">type</span> <span class="token class-name">Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n<span class="token comment">// 处理联合类型</span>\n<span class="token keyword">type</span> <span class="token class-name">Test1</span> <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;2&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> obj<span class="token operator">:</span> Extract<span class="token operator">&lt;</span>Test1<span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;2&quot;</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 1,2 OK 赋值3就会error</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="typescript-装饰器"><a class="header-anchor" href="#typescript-装饰器">#</a> Typescript 装饰器</h3><h4 id="同一方法的多个装饰器按声明顺序从下到上-装饰器定义顺序-进入-‌-从上到下执行"><a class="header-anchor" href="#同一方法的多个装饰器按声明顺序从下到上-装饰器定义顺序-进入-‌-从上到下执行">#</a> 同一方法的多个装饰器按声明顺序从下到上（装饰器定义顺序）进入，‌ 从上到下执行</h4><h4 id="装饰器语法"><a class="header-anchor" href="#装饰器语法">#</a> 装饰器语法</h4><p>第一次看到 @Plugin({...}) 这种语法可能会觉得很惊讶。其实这是装饰器的语法， 装饰器的本质是一个函数，通过装饰器我们可以方便地定义与对象相关的元数据。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>@<span class="token function">Plugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  pluginName<span class="token operator">:</span> <span class="token string">&quot;Device&quot;</span><span class="token punctuation">,</span>\n  plugin<span class="token operator">:</span> <span class="token string">&quot;cordova-plugin-device&quot;</span><span class="token punctuation">,</span>\n  pluginRef<span class="token operator">:</span> <span class="token string">&quot;device&quot;</span><span class="token punctuation">,</span>\n  repo<span class="token operator">:</span> <span class="token string">&quot;https://github.com/apache/cordova-plugin-device&quot;</span><span class="token punctuation">,</span>\n  platforms<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Android&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Browser&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;iOS&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;macOS&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Windows&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Device</span> <span class="token keyword">extends</span> <span class="token class-name">IonicNativePlugin</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在以上代码中，我们通过装饰器来保存 ionic-native 插件的相关元信息，而 @Plugin({...}) 中的 @ 符号只是语法糖， 为什么说是语法糖呢？这里我们来看一下编译生成的 ES5 代码：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">var</span> __decorate <span class="token operator">=</span>\n  <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__decorate<span class="token punctuation">)</span> <span class="token operator">||</span>\n  <span class="token keyword">function</span> <span class="token punctuation">(</span>decorators<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> c <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">,</span>\n      r <span class="token operator">=</span>\n        c <span class="token operator">&lt;</span> <span class="token number">3</span>\n          <span class="token operator">?</span> target\n          <span class="token operator">:</span> desc <span class="token operator">===</span> <span class="token keyword">null</span>\n          <span class="token operator">?</span> <span class="token punctuation">(</span>desc <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token operator">:</span> desc<span class="token punctuation">,</span>\n      d<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Reflect <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Reflect<span class="token punctuation">.</span>decorate <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span>\n      r <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>decorators<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> decorators<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">=</span> decorators<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          r <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token function">d</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">:</span> c <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token function">d</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">d</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> r<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> c <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> Device <span class="token operator">=</span> <span class="token doc-comment comment">/** <span class="token keyword">@class</span> */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>_super<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">__extends</span><span class="token punctuation">(</span>Device<span class="token punctuation">,</span> _super<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">Device</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>_super <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">_super</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  Device <span class="token operator">=</span> <span class="token function">__decorate</span><span class="token punctuation">(</span>\n    <span class="token punctuation">[</span>\n      <span class="token function">Plugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        pluginName<span class="token operator">:</span> <span class="token string">&quot;Device&quot;</span><span class="token punctuation">,</span>\n        plugin<span class="token operator">:</span> <span class="token string">&quot;cordova-plugin-device&quot;</span><span class="token punctuation">,</span>\n        pluginRef<span class="token operator">:</span> <span class="token string">&quot;device&quot;</span><span class="token punctuation">,</span>\n        repo<span class="token operator">:</span> <span class="token string">&quot;https://github.com/apache/cordova-plugin-device&quot;</span><span class="token punctuation">,</span>\n        platforms<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Android&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Browser&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;iOS&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;macOS&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Windows&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    Device\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> Device<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>IonicNativePlugin<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>通过生成的代码可知，<code>@Plugin({...})</code> 和 <code>@Injectable()</code> 最终会被转换成普通的方法调用，它们的调用结果最终会以数组的形式作为参数传递给 <code>__decorate</code> 函数，而在 <code>__decorate</code> 函数内部会以 Device 类作为参数调用各自的类型装饰器，从而扩展对应的功能。</p><h4 id="装饰器的分类"><a class="header-anchor" href="#装饰器的分类">#</a> 装饰器的分类</h4><p>在 TypeScript 中装饰器分为</p><blockquote><p>类装饰器<br> 属性装饰器<br> 方法装饰器<br> 参数装饰器</p></blockquote><h4 id="类装饰器"><a class="header-anchor" href="#类装饰器">#</a> 类装饰器</h4><p>类装饰器声明：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">ClassDecorator</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>TFunction <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>target<span class="token operator">:</span> TFunction<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> TFunction <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token comment">// 类装饰器顾名思义，就是用来装饰类的。它接收一个参数：</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>target: TFunction - 被装饰的类</p></blockquote><p>看完第一眼后，是不是感觉都不好了。没事，我们马上来个例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">Greeter</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Semlinker!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n@Greeter\n<span class="token keyword">class</span> <span class="token class-name">Greeting</span> <span class="token punctuation">{</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 内部实现</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> myGreeting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyGreeting<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// console output: &#39;Hello Semlinker!&#39;;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>上面的例子中，我们定义了 Greeter 类装饰器，同时我们使用了 @Greeter 语法糖，来使用装饰器。</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>友情提示：读者可以直接复制上面的代码，在 TypeScript Playground 中运行查看结果。</p></div><h4 id="属性装饰器"><a class="header-anchor" href="#属性装饰器">#</a> 属性装饰器</h4><p>属性装饰器声明：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">PropertyDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>属性装饰器顾名思义，用来装饰类的属性。它接收两个参数：</p><ul><li>target: Object - 被装饰的类</li><li>propertyKey: string | symbol - 被装饰类的属性名</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">logProperty</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">delete</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> backingField <span class="token operator">=</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> key<span class="token punctuation">;</span>\n  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> backingField<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// property getter</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> currVal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>backingField<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Get: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> =&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>currVal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> currVal<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// property setter</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">setter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> newVal<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Set: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> =&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>newVal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">[</span>backingField<span class="token punctuation">]</span> <span class="token operator">=</span> newVal<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// Create new property with getter and setter</span>\n  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token keyword">get</span><span class="token operator">:</span> getter<span class="token punctuation">,</span>\n    <span class="token keyword">set</span><span class="token operator">:</span> setter<span class="token punctuation">,</span>\n    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  @logProperty\n  <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;semlinker&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\np1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;kakuqo&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Set: name =&gt; semlinker</span>\n<span class="token comment">// Set: name =&gt; kakuqo</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>以上代码我们定义了一个 logProperty 函数，来跟踪用户对属性的操作，当代码成功运行后，在控制台会输出以下结果：</p><h4 id="方法装饰器"><a class="header-anchor" href="#方法装饰器">#</a> 方法装饰器</h4><p>方法装饰器声明：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">MethodDecorator</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n  target<span class="token operator">:</span> Object<span class="token punctuation">,</span>\n  propertyKey<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">,</span>\n  descriptor<span class="token operator">:</span> TypePropertyDescript<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> TypedPropertyDescriptor<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>方法装饰器顾名思义，用来装饰类的方法。它接收三个参数：</p><ul><li>target: Object - 被装饰的类</li><li>propertyKey: string | symbol - 方法名</li><li>descriptor: TypePropertyDescript - 属性描述符 废话不多说，直接上例子：</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">LogOutput</span><span class="token punctuation">(</span>tarage<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> originalMethod <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">newMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token function">originalMethod</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>loggedOutput<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>loggedOutput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>loggedOutput<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      method<span class="token operator">:</span> key<span class="token punctuation">,</span>\n      parameters<span class="token operator">:</span> args<span class="token punctuation">,</span>\n      output<span class="token operator">:</span> result<span class="token punctuation">,</span>\n      timestamp<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  descriptor<span class="token punctuation">.</span>value <span class="token operator">=</span> newMethod<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>\n  @LogOutput\n  <span class="token function">double</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> calc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncalc<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// console ouput: [{method: &quot;double&quot;, output: 22, ...}]</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>calc<span class="token punctuation">.</span>loggedOutput<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h4 id="参数装饰器"><a class="header-anchor" href="#参数装饰器">#</a> 参数装饰器</h4><p>参数装饰器声明：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">ParameterDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">,</span>\n  parameterIndex<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n参数装饰器顾名思义，是用来装饰函数参数，它接收三个参数：\n\n<span class="token comment">// target: Object - 被装饰的类</span>\n<span class="token comment">// propertyKey: string | symbol - 方法名</span>\n<span class="token comment">// parameterIndex: number - 方法中参数的索引值</span>\n<span class="token keyword">function</span> <span class="token function">Log</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> parameterIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> functionLogged <span class="token operator">=</span> key <span class="token operator">||</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">constructor</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The parameter in position </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>parameterIndex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>functionLogged<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> has\n been decorated</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>\n  greeting<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span>@Log phrase<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> phrase<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// console output: The parameter in position 0</span>\n<span class="token comment">// at Greeter has been decorated</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="私有字段"><a class="header-anchor" href="#私有字段">#</a> #私有字段</h3><p>在 TypeScript 3.8 版本就开始支持 ECMAScript 私有字段，使用方式如下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  #name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>#name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>#name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> semlinker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Semlinker&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsemlinker<span class="token punctuation">.</span>#name<span class="token punctuation">;</span>\n<span class="token comment">//</span>\n<span class="token comment">// Property &#39;#name&#39; is not accessible outside class &#39;Person&#39;</span>\n<span class="token comment">// because it has a private identifier.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>与常规属性（甚至使用 private 修饰符声明的属性）不同，私有字段要牢记以下规则：</p><ul><li>私有字段以 # 字符开头，有时我们称之为私有名称；</li><li>每个私有字段名称都唯一地限定于其包含的类；</li><li>不能在私有字段上使用 TypeScript 可访问性修饰符（如 public 或 private）；</li><li>私有字段不能在包含的类之外访问，甚至不能被检测到。</li></ul><h4 id="私有字段与-private-的区别"><a class="header-anchor" href="#私有字段与-private-的区别">#</a> 私有字段与 private 的区别</h4><p>说到这里使用 # 定义的私有字段与 private 修饰符定义字段有什么区别呢？现在我们先来看一个 private 的示例：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Semlinker&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在上面代码中，我们创建了一个 Person 类，该类中使用 private 修饰符定义了一个私有属性 name，接着使用该类创建一个 person 对象，然后通过 person.name 来访问 person 对象的私有属性，这时 TypeScript 编译器会提示以下异常：</p><blockquote><blockquote><p>Property &#39;name&#39; is private and only accessible within class &#39;Person&#39;.(2341)<br> 那如何解决这个异常呢？当然你可以使用类型断言把 person 转为 any 类型：</p></blockquote></blockquote><p>console.log((person as any).name); 通过这种方式虽然解决了 TypeScript 编译器的异常提示， 但是在运行时我们还是可以访问到 Person 类内部的私有属性，为什么会这样呢？我们来看一下编译生成的 ES5 代码，也许你就知道答案了：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token doc-comment comment">/** <span class="token keyword">@class</span> */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> Person<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Semlinker&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这时相信有些小伙伴会好奇，在 TypeScript 3.8 以上版本通过 # 号定义的私有字段编译后会生成什么代码：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  #name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>#name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>#name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>以上代码目标设置为 ES2015，会编译生成以下代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> __classPrivateFieldSet <span class="token operator">=</span>\n  <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__classPrivateFieldSet<span class="token punctuation">)</span> <span class="token operator">||</span>\n  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">receiver<span class="token punctuation">,</span> privateMap<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>privateMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;attempted to set private field on non-instance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    privateMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>receiver<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> __classPrivateFieldGet <span class="token operator">=</span>\n  <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__classPrivateFieldGet<span class="token punctuation">)</span> <span class="token operator">||</span>\n  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">receiver<span class="token punctuation">,</span> privateMap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>privateMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;attempted to get private field on non-instance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> privateMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> _name<span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    _name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">__classPrivateFieldSet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> _name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">__classPrivateFieldGet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> _name<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n_name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>通过观察上述代码，使用 <code>#</code> 号定义的 <code>ECMAScript</code> 私有字段，会通过 <strong>WeakMap</strong> 对象来存储，同时编译器会生成 <strong>classPrivateFieldSet</strong> 和 <strong>classPrivateFieldGet</strong> 这两个方法用于设置值和获取值。</p><h3 id="参考链接"><a class="header-anchor" href="#参考链接">#</a> 参考链接</h3>',66),v={href:"https://mp.weixin.qq.com/s?__biz=MzI2MjcxNTQ0Nw==&mid=2247484552&idx=1&sn=fe548e36a4fcda8e103ae6a5cb6cec41&chksm=ea47a5d0dd302cc6fef0c6eab2e585aed4563e90a97a21094ee00d871d9cddaa7a2ba881533c&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},f=(0,p.Uk)("深入 TS 装饰器"),q={render:function(n,s){const a=(0,p.up)("OutboundLink"),q=(0,p.up)("RouterLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",t,[e,(0,p.Wm)(a)])]),(0,p.Wm)("li",null,[(0,p.Wm)("a",o,[c,(0,p.Wm)(a)])]),(0,p.Wm)("li",null,[(0,p.Wm)(q,{to:"/pages/typescript/usefulTips/"},{default:(0,p.w5)((()=>[l])),_:1})]),(0,p.Wm)("li",null,[(0,p.Wm)(q,{to:"/pages/typescript/infer/"},{default:(0,p.w5)((()=>[u])),_:1})]),(0,p.Wm)("li",null,[(0,p.Wm)(q,{to:"/pages/typescript/dev-experience/"},{default:(0,p.w5)((()=>[r])),_:1})]),(0,p.Wm)("li",null,[(0,p.Wm)("a",i,[k,(0,p.Wm)(a)])]),(0,p.Wm)("li",null,[(0,p.Wm)("a",b,[m,(0,p.Wm)(a)])]),(0,p.Wm)("li",null,[(0,p.Wm)("a",d,[g,(0,p.Wm)(a)])]),(0,p.Wm)("li",null,[(0,p.Wm)("a",y,[w,(0,p.Wm)(a)])])]),h,(0,p.Wm)("p",null,[(0,p.Wm)("a",v,[f,(0,p.Wm)(a)])])],64)}}}}]);