(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[4201],{4428:(n,s,e)=>{"use strict";e.r(s),e.d(s,{data:()=>i});const i={key:"v-4e476348",path:"/pages/fe-sre/nginx/",title:"",lang:"zh-CN",frontmatter:{home:!1,sidebar:!1},excerpt:"",headers:[{level:3,title:"前端必备 nginx 知识",slug:"前端必备-nginx-知识",children:[]},{level:3,title:"Nginx 组成",slug:"nginx-组成",children:[]},{level:3,title:"编译 Nginx",slug:"编译-nginx",children:[]},{level:3,title:"Nginx 语法",slug:"nginx-语法",children:[]},{level:3,title:"Nginx 正向代理（代理客户端）",slug:"nginx-正向代理-代理客户端",children:[]},{level:3,title:"Nginx 反向代理（代理服务端）",slug:"nginx-反向代理-代理服务端",children:[]},{level:3,title:"正向代理和反向代理的区别",slug:"正向代理和反向代理的区别",children:[]},{level:3,title:"前端必备 nginx 知识",slug:"前端必备-nginx-知识-1",children:[]}],filePathRelative:"pages/fe-sre/nginx/README.md",git:{updatedTime:1741875703e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:3},{name:"guilin.li",email:"1344714332@qq.com",commits:3}]}}},5340:(n,s,e)=>{"use strict";e.r(s),e.d(s,{default:()=>k});var i=e(6252);const a=(0,i.uE)('<h3 id="前端必备-nginx-知识"><a class="header-anchor" href="#前端必备-nginx-知识">#</a> 前端必备 nginx 知识</h3><p>一般来说 Nginx 有三大应用场景：</p><p>1、静态资源服务-通过本地文件系统提供服务 2、反向代理服务-缓存、负载均衡 3、API 服务-openresty</p><p>通常一个 URL 请求先通过 Nginx 转发到应用服务，然后再去访问数据库。</p><p>一般来说应用服务的运行效率是很低的，而且并发都是受限的。所以需要把很多应用服务组成一个集群，向用户提供高可用性。随着把应用服务都组成集群，那么就会带来两个需求。</p><ul><li>第一、需要动态的扩容.</li><li>第二、有些服务出了问题之后，需要做容灾。</li></ul><p>所以就需要 Nginx 具有反向代理功能。<br> 而且在这样的一个链路中，nginx 一般是处于企业内网的一个边缘节点，随着网络链路的增长，用户体验的到时延就会增加。所以需要把一些不变的，或者说在一段时间内不变的资源缓存在 nginx 中，比如 css 文件、图片，由 nginx 直接提供服务，这样时延就会减少很多。所以这样就衍生出 nginx 的缓存功能。</p><p>数据库服务要比应用服务好得多，应用功能比较简单，所以并发与运行都要远高于应用服务。所以衍生出第三个应用场景，直接由 nginx 访问数据库服务，利用 nginx 的强大并发性实现如 web 防火墙等复杂的业务功能</p><h3 id="nginx-组成"><a class="header-anchor" href="#nginx-组成">#</a> Nginx 组成</h3><p>Nginx 主要有 4 部分组成：</p><ol><li>Nginx 二进制可执行文件</li><li>Nginx.conf 配置文件</li><li>asscess.log 文件</li><li>error.log 文件</li></ol><p>Nginx 的二进制可执行文件是由官方模块或者第三方模块一起编译出的一个文件。这个文件提供了 nginx 所需要的功能，就如同一辆汽车，本身提供了载人、高速行走等功能，至于音响，冷气等功能视乎于自己想不想要。</p><p>虽然二进制可执行文件提供了许多功能，但开启与关闭或者如何使用这些功能就需要配置文件，就好比一辆汽车需要驾驶员来驾驶一样。Nginx.conf 配置文件就是这个驾驶员。</p><p>asscess.log 就是记录每一条请求信息，凡走过必留痕迹，这些痕迹就在 access.log 文件中。</p><p>error.log 文件是记录问题的文件，就好比汽车的黑匣子一样，如果汽车发生问题，就要打开黑匣子看看，究竟是驾驶员出现的问题还是汽车本身的问题。</p><h3 id="编译-nginx"><a class="header-anchor" href="#编译-nginx">#</a> 编译 Nginx</h3><p>编译 Nginx 大概分以下步骤：</p><ol><li>下载 Nginx。</li><li>执行 configure。</li><li>编译与安装 Nginx。</li></ol><blockquote><p>下载 Nginx</p></blockquote><p>从 nginx.org 网站下载即可 nginx 的版本分为三类：</p><p>Mainline：开发版 Stable：最新稳定版 Legacy：老版本的稳定版</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 在centos7中演示，使用如下命令行</span>\n<span class="token comment"># 下载nginx</span>\n<span class="token function">wget</span> http://nginx.org/download/nginx-1.18.0.tar.gz\n\n<span class="token comment"># 解压nginx压缩包</span>\n<span class="token function">tar</span> -zxvf nginx-1.18.0.tar.gz\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>下面为解压后的 nginx 目录</p><ul><li>auto 目录：是一些判用于断操作系统支持与编译等相关的文件。</li><li>CHANGES 文件：nginx 版本的迭代日志（.ru 是俄语版，因为作者是俄罗斯）</li><li>conf 目录：是示例配置文件，用于配置参考。</li><li>configure 文件：用于编译生成中间文件的脚本。</li><li>contrib 目录: 提供了 nginx 语法支持脚本。</li><li>man 目录：提供了 nginx 帮助文档。</li><li>html 目录: 提供了两个标准的 html 文件</li><li>src 目录: 源码目录</li></ul><blockquote><p>编译与安装 Nginx</p></blockquote><p>// 使用以下命令行，查看执行 configure 时的参数 ./configure --help</p><p>这些代码是配置这几个模块的地址，引导 nginx 在执行在这些地址中读取相应的内容。</p><p>这些代码是说明使用哪些模块，不使用哪些模块。主要是用 with 和 without 区分。</p><p>默认情况下，只需要配置 prefix 就行，该参数是指定将 nginx 编译在哪里，比如：</p><p>./configure -- prefix=/home/nginx 生成的中间文件在 objs 目录下</p><blockquote><p>编译 nginx</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">make</span>\n<span class="token function">make</span> <span class="token function">install</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="nginx-语法"><a class="header-anchor" href="#nginx-语法">#</a> Nginx 语法</h3><p>Nginx 的配置文件是一个 ASNCLL 文本文件，由指令和指令块两部分组成。比如说</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>http <span class="token punctuation">{</span>\n    include mine.types<span class="token punctuation">;</span>\n    upstream image <span class="token punctuation">{</span>\n        server: <span class="token number">127.0</span>.0.1:8080\n    <span class="token punctuation">}</span>\n    server <span class="token punctuation">{</span>\n        listen <span class="token number">443</span> http2<span class="token punctuation">;</span>\n        limit_req_zone <span class="token variable">$binary_remote_addr</span>\n        location ~*<span class="token punctuation">\\</span>.<span class="token punctuation">(</span>jpg<span class="token operator">|</span>png<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>\n            proxy_pass http://image\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>http{}大括号组成一个指令块，而 include 则是一条指令。指令块是否能配置名字是根据提供这个指令块的 nginx 模块来决定的。每条指令都是以;分号结尾，指令与参数之间以一个或多个空格分隔。而 mine.types 则是 include 指令的参数，可以有多个参数。</p><p>特别是 include 指令，它是允许组合多个配置文件以提升可维护性。mine.types 这是一个含有很多条不同文件的后缀名与 http 协议中 mine 格式的对照关系表。</p><p>使用$符合表示一个变量。比如$binary_remote_addr 作为 limit_req_zone 指令的参数，表示远端的地址。</p><p>部分指令的参数是支持正则表达式的。比如 location 指令的参数正是正则表达式，而且正则表达式中括号的内容可以用$1,$2 等方式取出来。</p><p>http 指令块包含以下 4 个块：</p><ol><li>http</li><li>server--对应一个/一组域名</li><li>upstream--表示上游服务，当 nginx 需要与 tomcat、企业内网等服务交互时就可以定义一个 upstream</li><li>location--一个 url 表达式 http 指令块的所有指令都是由 http 模块解析执行的，也就是说 http 模块只能解析执行上面 4 种模块。</li></ol><p>命令行主要格式是 nginx 指令参数，比如 nginx -s reload。 其中-s 就是指令，表示发送信号，reload 就是参数，表示重载配置文件。以下是几种常用指令的介绍：</p><ul><li><p>帮助: -?、-h</p></li><li><p>使用指定的配置文件：-c 默认的情况下，编译出来的 nginx 会寻找在执行 configure 时指定的配置文件，但可以使用命令行指令使用指定的配置文件，使用-c+配置文件路径</p></li><li><p>指定配置指令：-g 在命令行使用的配置指令可以覆盖在 config 目录里的指令</p></li><li><p>指定运行目录：-p 在命令行使用指定目录会将默认的目录替换掉</p></li><li><p>发送信息：-s nginx 操作运行中的进程方法一般是通过发送信号-s，有以下几种操作：</p></li></ul><p>1、stop：表示立即停止服务</p><p>2、quit：表示优雅的停止服务,在退出前完成已经接受的连接请求</p><p>3、reload：表示优雅的停止服务再重新载入配置文件</p><p>4、reopen：表示重新开始记录日志文件</p><p>测试配置文件是否有语法错误： -t -T</p><p>修改完配置之后，重新运行之前，可以先使用-t 来测试是否有语法错误</p><p>打印 nginx 的版本信息、编译信息等：-v -V</p><h3 id="nginx-正向代理-代理客户端"><a class="header-anchor" href="#nginx-正向代理-代理客户端">#</a> Nginx 正向代理（代理客户端）</h3><p>（1）理解：客户发送请求给代理服务器，代理服务器代替客户把请求发送给服务器。</p><p>（2）特点：服务端收到的请求全部来自于代理服务器，如此一来起到了隐藏客户端的效果，和服务端进行信息交流的全部都是正向代理服务器。</p>',53),l=(0,i.Uk)("（3）应用：翻墙 "),p=(0,i.Wm)("h3",{id:"nginx-反向代理-代理服务端"},[(0,i.Wm)("a",{class:"header-anchor",href:"#nginx-反向代理-代理服务端"},"#"),(0,i.Uk)(" Nginx 反向代理（代理服务端）")],-1),t=(0,i.Wm)("p",null,"（1）理解：代理服务器将收集到的请求发给服务器，服务器处理完请求将结果返回给代理服务器，再由代理服务器将结果返回给客户端。",-1),r=(0,i.Wm)("p",null,"（2）特点：客户端收到的信息全部来自于代理服务器，如此一来达到了隐藏服务端的效果，如此一来客户端解析服务器域名时得到的将是反向代理服务器（也可以称作负载均衡服务器）的 IP。",-1),c=(0,i.Uk)("（3）应用：代理服务器可以根据某些策略对请求做一个合理的分发，比如分发给相对空闲的服务器，如此一来达到了负载均衡的效果。 "),o=(0,i.Wm)("h3",{id:"正向代理和反向代理的区别"},[(0,i.Wm)("a",{class:"header-anchor",href:"#正向代理和反向代理的区别"},"#"),(0,i.Uk)(" 正向代理和反向代理的区别")],-1),g=(0,i.Wm)("p",null,"（1）正向代理中，客户端知道真正的服务端 IP 是什么，而服务端并不知真正的道客户端 IP 是什么；",-1),u=(0,i.Wm)("p",null,"（2）反向代理中，客户端不知道真正的服务端 IP 是什么，服务端也不知道真正的道客户端 IP 是什么；",-1),m=(0,i.Wm)("p",null,"（3）正向代理一般用来解决访问限制问题；",-1),x=(0,i.Wm)("p",null,"（4）反向代理一般用来提供负载均衡、安全防护等作用；",-1),h=(0,i.Wm)("h3",{id:"前端必备-nginx-知识-1"},[(0,i.Wm)("a",{class:"header-anchor",href:"#前端必备-nginx-知识-1"},"#"),(0,i.Uk)(" 前端必备 nginx 知识")],-1),b={href:"https://juejin.cn/post/7368433531926052874?utm_source=gold_browser_extension",target:"_blank",rel:"noopener noreferrer"},d=(0,i.Uk)("前端必备 nginx 知识"),k={render:function(n,s){const e=(0,i.up)("OutboundLink");return(0,i.wg)(),(0,i.j4)(i.HY,null,[a,(0,i.Wm)("p",null,[l,(0,i.Wm)("img",{src:n.$withBase("./images/daily-blog/nginx-proxy-1.png")},null,8,["src"])]),p,t,r,(0,i.Wm)("p",null,[c,(0,i.Wm)("img",{src:n.$withBase("./images/daily-blog/nginx-proxy-2.png")},null,8,["src"])]),o,g,u,m,x,h,(0,i.Wm)("p",null,[(0,i.Wm)("a",b,[d,(0,i.Wm)(e)])])],64)}}}}]);