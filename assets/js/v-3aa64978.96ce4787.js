(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[9901],{4826:(e,t,n)=>{"use strict";n.r(t),n.d(t,{data:()=>r});const r={key:"v-3aa64978",path:"/pages/html/htmlStream/",title:"",lang:"zh-CN",frontmatter:{home:!1,sidebar:!1},excerpt:"",headers:[{level:3,title:"HTTP 流式传输的实现方法与技术要点",slug:"http-流式传输的实现方法与技术要点",children:[]}],filePathRelative:"pages/html/htmlStream/README.md",git:{updatedTime:1741333915e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:1}]}}},2520:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});const r=(0,n(6252).uE)('<h3 id="http-流式传输的实现方法与技术要点"><a class="header-anchor" href="#http-流式传输的实现方法与技术要点">#</a> HTTP 流式传输的实现方法与技术要点</h3><p><strong>协议与请求头配置</strong> ‌</p><ul><li>分块传输编码（Transfer-Encoding: chunked）‌‌ 服务端通过设置响应头 Transfer-Encoding: chunked，将数据分割为多个块（chunk）逐步发送。每个块包含长度前缀（十六进制）和数据内容，以 <code>0\\r\\n\\r\\n</code> 标记结束。</li><li>-HTTP Range 请求 ‌ 客户端通过请求头 Range: bytes=start-end 指定需传输的数据范围，适用于大文件分段传输（如视频播放）。服务端需解析 Range 头并返回 206 Partial Content 状态码及对应数据块。</li></ul><p><strong>服务端实现</strong></p><ul><li>分块传输 ‌：动态生成数据时，逐块写入响应流</li><li>Range 请求处理 ‌：解析客户端 Range 头，计算偏移量并返回对应字节数据 ‌</li></ul><p><strong>客户端实现</strong></p><ul><li>浏览器通过 Fetch API 或 EventSource 接收流式数据，逐块拼接并实时渲染 ‌</li></ul>',7),l={render:function(e,t){return r}}}}]);