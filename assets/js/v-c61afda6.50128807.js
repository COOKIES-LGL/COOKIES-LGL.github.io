(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[6705],{9773:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-c61afda6",path:"/pages/fe-sre/package-json/",title:"",lang:"zh-CN",frontmatter:{home:!1},excerpt:"",headers:[{level:3,title:"package.json 知识点",slug:"package-json-知识点",children:[]}],filePathRelative:"pages/fe-sre/package-json/README.md",git:{updatedTime:1741591165e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:8}]}}},534:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>i});var p=a(6252);const t=(0,p.Wm)("h3",{id:"package-json-知识点"},[(0,p.Wm)("a",{class:"header-anchor",href:"#package-json-知识点"},"#"),(0,p.Uk)(" package.json 知识点")],-1),e=(0,p.Wm)("h4",{id:"peerdependencies"},[(0,p.Wm)("a",{class:"header-anchor",href:"#peerdependencies"},"#"),(0,p.Uk)(" peerDependencies")],-1),o=(0,p.Uk)("用于指定当前包所依赖的其他包的版本要求，主要目的是通知用户或工具（如 npm 或 yarn）当前包需要特定版本的依赖包才能正常工作。 这些依赖并不会在安装当前包时自动安装，而是需要用户手动安装符合版本要求的依赖。 "),c={href:"https://zhuanlan.zhihu.com/p/666454541",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("对等依赖"),u=(0,p.uE)('<h4 id="bundleddependencies"><a class="header-anchor" href="#bundleddependencies">#</a> bundledDependencies</h4><p>用于指定一组包，这些包应该与你的包一起打包分发。这些包会被包含在你的包的发布版本中，这样，当其他开发者安装你的包时，他们也会得到这些依赖包的副本。</p><h4 id="optionaldependencies"><a class="header-anchor" href="#optionaldependencies">#</a> optionalDependencies</h4><p>用于指定一组包，这些包是可选的依赖。这些依赖在安装过程中会被尝试安装，但如果安装失败，npm 或 yarn 不会将此作为错误处理，而是继续安装其他依赖。</p><h4 id="package-json-的脚本勾子"><a class="header-anchor" href="#package-json-的脚本勾子">#</a> package.json 的脚本勾子</h4><p>在 package.json 文件中，你可以定义多种脚本钩子 <code>（scripts）</code>，这些脚本钩子可以在特定的 npm 事件发生时自动执行。以下是一些常见的脚本钩子：</p><ul><li>prepublish: 在包发布之前运行，通常用于构建或打包代码。</li><li>prepare: 在包打包或发布之前运行，通常用于确保包的发布版本是正确构建的。</li><li>prepublishOnly: 类似于 prepublish，但是在 npm publish 之前运行，而不是 npm install。</li><li>preinstall: 在安装任何包之前运行，包括 npm install 和 npm ci。</li><li>install: 在安装包之后运行。</li><li>postinstall: 在安装包之后运行，包括 npm install 和 npm ci。</li><li>postbuild: 在 build 之后运行，包括 npm build 之后自动运行此命令。</li><li>preuninstall: 在卸载包之前运行。</li><li>uninstall: 在卸载包之后运行。</li><li>postuninstall: 在卸载包之后运行。</li><li>preversion: 在更改包版本之前运行。</li><li>version: 在更改包版本之后运行。</li><li>postversion: 在更改包版本之后运行。</li><li>pretest, test, posttest: 分别在运行测试之前、运行测试时、运行测试之后执行。</li><li>prestop, stop, poststop: 分别在停止命令之前、停止命令时、停止命令之后执行。</li><li>prestart, start, poststart: 分别在启动命令之前、启动命令时、启动命令之后执行。</li><li>prefetch, fetch, postfetch: 分别在获取资源之前、获取资源时、获取资源之后执行。</li></ul><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span> <span class="token comment">// 指定当前包是 ECMAScript 模块。</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="postinstall-写入-gitignore-文件用于本地开发"><a class="header-anchor" href="#postinstall-写入-gitignore-文件用于本地开发">#</a> postinstall 写入.gitignore 文件用于本地开发</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;postinstall&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;node ./scripts/postinstall.js&quot;</span>,\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> spawn <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;child_process&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 执行 clean</span>\n<span class="token function">spawn</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">&quot;win32&quot;</span> <span class="token operator">?</span> <span class="token string">&quot;npm.cmd&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;npm&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;run&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;clean&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 检查 /mock/localConfig.js 文件</span>\n<span class="token keyword">const</span> localConfigPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../mock/localConfig.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> localConfigTemplate <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">文件内容</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>localConfigPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>localConfigPath<span class="token punctuation">,</span> localConfigTemplate<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="多版本包检测"><a class="header-anchor" href="#多版本包检测">#</a> 多版本包检测</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// check-package-lock.js</span>\n<span class="token keyword">const</span> pkgLock <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./package-lock.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">getX</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dependencies</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>dependencies<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pkgName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>pkgName<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;@natu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">[</span>pkgName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        result<span class="token punctuation">[</span>pkgName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      result<span class="token punctuation">[</span>pkgName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dependencies<span class="token punctuation">[</span>pkgName<span class="token punctuation">]</span><span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      result<span class="token punctuation">[</span>pkgName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>pkgName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>dependencies<span class="token punctuation">[</span>pkgName<span class="token punctuation">]</span><span class="token punctuation">.</span>dependencies<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">getX</span><span class="token punctuation">(</span>dependencies<span class="token punctuation">[</span>pkgName<span class="token punctuation">]</span><span class="token punctuation">.</span>dependencies<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">getX</span><span class="token punctuation">(</span>pkgLock<span class="token punctuation">.</span>dependencies<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token constant">WHITE_PKG</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;@natu/style-base&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> multiVersionPackages <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token constant">WHITE_PKG</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>multiVersionPackages<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  multiVersionPackages<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;多版本包&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">请执行 npm list </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 查看详情</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;package-lock出现多版本包！！！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h4 id="字段含义说明"><a class="header-anchor" href="#字段含义说明">#</a> 字段含义说明</h4><ul><li>main - 表示 commonjs 文件入口</li><li>module - 表示 es 文件入口</li><li>types - 表示 typescript 声明文件入口</li></ul><h4 id="files-与-npmignore-区别"><a class="header-anchor" href="#files-与-npmignore-区别">#</a> files 与 .npmignore 区别</h4><p>‌&gt; 如果 files 字段存在 ‌：npm 将只包含 files 字段中指定的文件和目录。此时，.npmignore 文件（如果存在）将仅对 files 字段中指定的文件和目录生效，用于进一步排除其中的某些文件或目录。 ‌ 如果 files 字段不存在 ‌：npm 将默认包含项目根目录下的所有文件和目录，但会排除.npmignore 文件中指定的文件或目录（以及 npm 默认排除的文件，如.git、node_modules 等）。</p>',17),i={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,e,(0,p.Wm)("p",null,[o,(0,p.Wm)("a",c,[l,(0,p.Wm)(a)])]),u],64)}}}}]);