(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[4894],{2326:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-35a2f833",path:"/pages/react/hooks/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"埋点 hooks",slug:"埋点-hooks",children:[]},{level:3,title:"执行一次",slug:"执行一次",children:[]},{level:3,title:"更新执行",slug:"更新执行",children:[]},{level:3,title:"获取最新数据返回",slug:"获取最新数据返回",children:[]},{level:3,title:"useEvent 获取地址不变的函数",slug:"useevent-获取地址不变的函数",children:[]},{level:3,title:"无效 useCallback useMemo",slug:"无效-usecallback-usememo",children:[]},{level:3,title:"useReducer 和 useContext 的结合可以取代 Redux?",slug:"usereducer-和-usecontext-的结合可以取代-redux",children:[]},{level:3,title:"react 父子组件生命周期执行顺序",slug:"react-父子组件生命周期执行顺序",children:[]},{level:3,title:"副作用链表 和 hook 链表",slug:"副作用链表-和-hook-链表",children:[]},{level:3,title:"effects 与 updateQueue 的关系解析 ‌",slug:"effects-与-updatequeue-的关系解析-‌",children:[]},{level:3,title:"hook 对象 update 链表 与 Fiber updateQueue 的关联 ‌",slug:"hook-对象-update-链表-与-fiber-updatequeue-的关联-‌",children:[]}],filePathRelative:"pages/react/hooks/README.md",git:{updatedTime:1745673668e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:15}]}}},8703:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>c});var p=a(6252);const t={href:"https://segmentfault.com/a/1190000042799935",target:"_blank",rel:"noopener noreferrer"},e=(0,p.Uk)("React-hook 链表构建原理"),o=(0,p.uE)('<h3 id="埋点-hooks"><a class="header-anchor" href="#埋点-hooks">#</a> 埋点 hooks</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 定义</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> LogContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useLog</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* 定义一些公共参数 */</span>\n  <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>LogContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> listenDOM <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">/* 分清依赖关系 */</span>\n  <span class="token keyword">const</span> reportMessage <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&quot;pv&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 页面浏览量上报</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;组件 pv 上报&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 点击上报</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;组件 click 上报&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>message<span class="token punctuation">]</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">reportMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">,</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>listenDOM<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      listenDOM<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      listenDOM<span class="token punctuation">.</span>current <span class="token operator">&amp;&amp;</span> listenDOM<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>reportMessage<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>listenDOM<span class="token punctuation">,</span> reportMessage<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 使用</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> LogContext<span class="token punctuation">,</span> useLog <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./hooks/useLog&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>dom<span class="token punctuation">,</span> reportMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token punctuation">{</span><span class="token comment">/* 监听内部点击 */</span><span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>dom<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span> 按钮 <span class="token number">1</span> <span class="token punctuation">(</span>内部点击<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span> 按钮 <span class="token number">2</span> <span class="token punctuation">(</span>内部点击<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span> 按钮 <span class="token number">3</span> <span class="token punctuation">(</span>内部点击<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n      <span class="token punctuation">{</span><span class="token comment">/* 外部点击 */</span><span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>reportMessage<span class="token punctuation">}</span><span class="token operator">&gt;</span>外部点击<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 阻断 useState 的更新效应</span>\n<span class="token keyword">const</span> Index <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>Home<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>LogContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>Index <span class="token operator">/</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> cat<span class="token operator">:</span> <span class="token string">&quot;小猫&quot;</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&quot;棕色&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>点击<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>LogContext<span class="token punctuation">.</span>Provider<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br></div></div><h3 id="执行一次"><a class="header-anchor" href="#执行一次">#</a> 执行一次</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useExecuteOnce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span> condition<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> fnRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  fnRef<span class="token punctuation">.</span>current <span class="token operator">=</span> fn<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> once <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>once<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      once<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> fnRef<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>condition<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="更新执行"><a class="header-anchor" href="#更新执行">#</a> 更新执行</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useUpdateEffect</span><span class="token punctuation">(</span>effect<span class="token operator">:</span> EffectCallback<span class="token punctuation">,</span> deps<span class="token operator">?</span><span class="token operator">:</span> DependencyList<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> mounted <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mounted<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      mounted<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// eslint-disable-next-line react-hooks/exhaustive-deps</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> deps<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="获取最新数据返回"><a class="header-anchor" href="#获取最新数据返回">#</a> 获取最新数据返回</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token doc-comment comment">/**\n * resolve 最近一次函数返回结果\n */</span>\n<span class="token keyword">const</span> lockThrottleFn <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token comment">// @ts-ignore</span>\n  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    index<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> current <span class="token operator">=</span> index<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">isCurrent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> current <span class="token operator">===</span> index<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 只有一次调用直接Resolve</span>\n      <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// eslint-disable-next-line no-console</span>\n      <span class="token constant">IS_DEV</span>\n        <span class="token operator">?</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: hit throttle lock</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n        <span class="token operator">:</span> <span class="token function">bizErrLogger</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 命中非最新返回结果</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="useevent-获取地址不变的函数"><a class="header-anchor" href="#useevent-获取地址不变的函数">#</a> useEvent 获取地址不变的函数</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> usePersistFn<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> fnRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  fnRef<span class="token punctuation">.</span>current <span class="token operator">=</span> fn<span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> persistFn <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> fnRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> persistFn <span class="token keyword">as</span> <span class="token builtin">any</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="无效-usecallback-usememo"><a class="header-anchor" href="#无效-usecallback-usememo">#</a> 无效 useCallback useMemo</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>只有当前组件的所有属性都被缓存时，才可以使用 useCallback 缓存函数 只有当父组件的所有属性都被缓存时，才可以使用 useMemo 缓存子组件或对象</p></div><h3 id="usereducer-和-usecontext-的结合可以取代-redux"><a class="header-anchor" href="#usereducer-和-usecontext-的结合可以取代-redux">#</a> useReducer 和 useContext 的结合可以取代 Redux?</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>主要问题 useReducer+useContext 维护的状态还只是一个强耦合于 UI 的状态。这写状态的生命周期完全局限于在函数组件内部，这个状态是在在组件函数作用域内创建的， 和 UI 组件是耦合在一起而没有真正分离。但是有的状态是需要完全独立于 UI 的，需要完全 UI 无关地进行维护，UI 组件只是状态的一个消费者，而不是定义和初始化状态的地方。 Redux 可以做到分离，但 useReducer+useContext 不能。另外 Redux 有 thunk 之类的中间件支持 async action，而 useReducer 没有，还得用其他库。 useContext+useReducer 说白了就是项目很小，只有少部分祖孙组件间需要共享状态时才会使用的一个简易共享方案。真正较复杂的情况那必然还是用 Redux。</p></div><h3 id="react-父子组件生命周期执行顺序"><a class="header-anchor" href="#react-父子组件生命周期执行顺序">#</a> react 父子组件生命周期执行顺序</h3><p>1、useLayoutEffect‌：是同步执行的，遵循 ‌ 父组件优先 ‌ 的嵌套顺序（父 → 子）‌。 2、‌useEffect‌：是异步执行的，遵循 ‌ 子组件优先 ‌ 的队列顺序（子 → 父）‌。</p><h4 id="类组件与函数组件的区别-‌"><a class="header-anchor" href="#类组件与函数组件的区别-‌">#</a> 类组件与函数组件的区别 ‌</h4><p>1、类组件的 componentDidMount 和 componentDidUpdate 均为父组件优先 ‌。 2、函数组件的 useEffect 为子组件优先，需特别注意两者的差异 ‌。</p><h3 id="副作用链表-和-hook-链表"><a class="header-anchor" href="#副作用链表-和-hook-链表">#</a> 副作用链表 和 hook 链表</h3><h5 id="hook-链表"><a class="header-anchor" href="#hook-链表">#</a> Hook 链表</h5><p>是函数组件内部所有 Hook 按调用顺序形成的单向链表 ‌，每个 Hook 节点（如 useState、useEffect）通过 memoizedState 字段保存状态信息，并通过 next 指针指向下一个 Hook <strong>核心作用</strong> 维护函数组件 ‌ 跨渲染周期的状态一致性 ‌（如 useState 的 state 值）。 确保 Hook 的调用顺序在每次渲染中保持稳定（依赖 Hook 链表的顺序性）</p><h5 id="副作用链表-effects"><a class="header-anchor" href="#副作用链表-effects">#</a> 副作用链表 effects</h5><p>是所有具有副作用的 Hook（如 useEffect、useLayoutEffect、useImperativeHandle）生成的 Effect 对象组成的链表 ‌，通过 fiber.effects 字段存储</p><p><strong>核心作用</strong> 统一管理副作用的 ‌ 创建、更新与销毁 ‌（如 DOM 操作、订阅/取消订阅）； 通过依赖数组（deps）优化副作用的执行频率，避免无效触发</p><h5 id="从属关系"><a class="header-anchor" href="#从属关系">#</a> 从属关系</h5><p>Hook 链表是 ‌ 基础数据结构 ‌，用于管理所有 Hook 的状态与调用顺序； 副作用链表是 Hook 链表的衍生结构 ‌，仅包含具有副作用的 Hook 生成的 Effect 对象</p><h5 id="生命周期协作-‌"><a class="header-anchor" href="#生命周期协作-‌">#</a> 生命周期协作 ‌</h5><p>‌Render 阶段 ‌： 构建 Hook 链表 → 触发副作用 Hook → 生成副作用链表； ‌Commit 阶段 ‌： 遍历副作用链表执行或调度副作用</p><ul><li>update 链表 作为 updateQueue 的成员存在，单链表结构</li><li>updateQueue 链表 挂载在 Fiber 节点的 updateQueue 字段，双链表结构</li></ul><p>updateQueue 是 Fiber 节点的核心属性，用于管理 ‌ 所有待处理的更新和副作用 ‌。它存储状态更新（Update 对象）</p><h3 id="effects-与-updatequeue-的关系解析-‌"><a class="header-anchor" href="#effects-与-updatequeue-的关系解析-‌">#</a> effects 与 updateQueue 的关系解析 ‌</h3><p>一、‌ 核心区别 ‌ ‌updateQueue 的定位 ‌</p><p>‌ 作用 ‌：专门存储组件的 ‌ 状态更新对象（Update）‌，例如 setState 触发的多个更新会合并到队列中进行批量处理 18。 ‌ 结构 ‌：采用链表实现的链式队列，包含 pending（待处理更新）和 lanes（优先级通道）等字段 58。 ‌effects 的定位 ‌</p><p>‌ 作用 ‌：管理 ‌ 副作用对象（Effect）‌，如 useEffect 生成的副作用逻辑、DOM 操作标记（如插入、删除）34。 ‌ 结构 ‌：通过 firstEffect、lastEffect、nextEffect 构成链表，记录需在 Commit 阶段执行的副作用 4。 二、‌ 存储位置与协作流程 ‌ ‌ 存储位置分离 ‌</p><p>updateQueue 是 Fiber 节点的独立属性，专门存放状态更新； effects 通过链表指针（如 firstEffect）挂载到 Fiber 节点上，与 updateQueue 无直接关联 48。 ‌ 协作流程 ‌</p><p>‌Render 阶段 ‌：updateQueue 中的 Update 对象被处理，计算新状态； ‌Commit 阶段 ‌：遍历 effects 链表，执行副作用（如 DOM 更新、生命周期钩子）34。 ‌ 总结 ‌ ‌updateQueue‌：‌ 状态更新队列 ‌，负责批量处理组件状态变更，优化渲染性能 18； ‌effects‌：‌ 副作用链表 ‌，管理需执行的 DOM 操作或副作用逻辑，与状态更新解耦 34。 两者在 Fiber 架构中分工明确，共同保障 React 的高效渲染与更新</p><h3 id="hook-对象-update-链表-与-fiber-updatequeue-的关联-‌"><a class="header-anchor" href="#hook-对象-update-链表-与-fiber-updatequeue-的关联-‌">#</a> hook 对象 update 链表 与 Fiber updateQueue 的关联 ‌</h3><ul><li>类组件 ‌：类组件的 fiber.updateQueue 直接存储 Update 链表，用于状态更新。</li><li>函数组件 ‌：函数组件的 fiber.updateQueue ‌ 不存储状态更新 ‌，而是用于管理调度标记。</li><li>关键区别 ‌：函数组件的状态更新完全由各个 Hook 对象的 queue.pending 独立管理，无需同步到 fiber.updateQueue</li></ul>',38),c={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[(0,p.Wm)("p",null,[(0,p.Wm)("a",t,[e,(0,p.Wm)(a)])]),o],64)}}}}]);