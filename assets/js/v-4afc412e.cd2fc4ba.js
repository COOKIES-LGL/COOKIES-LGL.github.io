(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[6571],{1684:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>e});const e={key:"v-4afc412e",path:"/pages/fe-sre/linux/",title:"",lang:"zh-CN",frontmatter:{home:!1,sidebar:!1},excerpt:"",headers:[{level:3,title:"前端必备 linux 知识",slug:"前端必备-linux-知识",children:[]},{level:3,title:"特殊变量:",slug:"特殊变量",children:[]},{level:3,title:"命令替换",slug:"命令替换",children:[]},{level:3,title:"参数扩展和子字符串操作",slug:"参数扩展和子字符串操作",children:[]},{level:3,title:"命令行光标移到",slug:"命令行光标移到",children:[]},{level:3,title:"cp -r 复制",slug:"cp-r-复制",children:[]},{level:3,title:"| 连接符",slug:"连接符",children:[]},{level:3,title:"xargs",slug:"xargs",children:[]},{level:3,title:"mac 快速复制文件路径",slug:"mac-快速复制文件路径",children:[]},{level:3,title:"locate",slug:"locate",children:[]}],filePathRelative:"pages/fe-sre/linux/README.md",git:{updatedTime:1738930715e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:13}]}}},6483:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>l});const e=(0,a(6252).uE)('<h3 id="前端必备-linux-知识"><a class="header-anchor" href="#前端必备-linux-知识">#</a> 前端必备 linux 知识</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ifconfig</span>\n<span class="token comment"># 获取ip地址</span>\n<span class="token function">lsof</span> -i:端口号\n<span class="token comment"># 查看端口占有情况</span>\n<span class="token function">kill</span> -9 PID\n<span class="token comment"># 杀除进程</span>\n<span class="token function">sudo</span> <span class="token function">vi</span> /etc/hosts\n<span class="token comment"># 修改hosts文件</span>\n<span class="token function">netstat</span> -ano\n<span class="token comment"># 列出PID进程信息</span>\nfindstr PID\n<span class="token comment"># 查看端口占用情况</span>\n<span class="token function">chmod</span> g+w file.txt\n<span class="token comment"># 更改文件或目录权限，将向文件 file.txt 的组添加写入权限</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>使用 find 命令在终端中查找文件的路径。以下是一个基本的 find 命令示例，用于查找名为 filename.txt 的文件</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">find</span> / -name filename.txt\n<span class="token comment"># 搜索用户的主目录，可以使用~代替/</span>\n<span class="token function">sudo</span> <span class="token function">find</span> ~ -name filename.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="特殊变量"><a class="header-anchor" href="#特殊变量">#</a> 特殊变量:</h3><p>$ 符号还用于一些特殊变量，这些变量有特定的含义。例如：</p><ul><li>$0：当前脚本的文件名。</li><li>$1, $2, ...：传递给脚本或函数的参数。</li><li>$#：传递给脚本或函数的参数数量。</li><li>$?：上一个命令的退出状态码。</li><li>$$：当前 shell 的进程 ID。</li><li>$_：上一个命令的最后一个参数或最后一个命令的结果。</li></ul><h3 id="命令替换"><a class="header-anchor" href="#命令替换">#</a> 命令替换</h3><p>使用 $() 进行命令替换，即执行括号内的命令，并将其输出结果替换到当前命令行</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">DATE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;Today&#39;s date is <span class="token variable">$DATE</span>&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="参数扩展和子字符串操作"><a class="header-anchor" href="#参数扩展和子字符串操作">#</a> 参数扩展和子字符串操作</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token variable">${<span class="token environment constant">USER</span><span class="token operator">:-</span>default}</span>  <span class="token comment"># 如果 USER 变量未定义，则使用 &quot;default&quot;</span>\n<span class="token assign-left variable">FILENAME</span><span class="token operator">=</span><span class="token string">&quot;example.txt&quot;</span>\n<span class="token builtin class-name">echo</span> <span class="token variable">${FILENAME<span class="token operator">%</span>.txt}</span>  <span class="token comment"># 输出: example</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="命令行光标移到"><a class="header-anchor" href="#命令行光标移到">#</a> 命令行光标移到</h3><p>Ctrl + A 要将光标移到当前命令行的开始位置 Ctrl + E 将光标移动到当前命令行的末尾 Ctrl + U 清除从光标位置到行首的所有字符</p><h3 id="cp-r-复制"><a class="header-anchor" href="#cp-r-复制">#</a> cp -r 复制</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cp</span> -r source_directory existing_directory\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>当你使用 cp -r 命令复制一个已经存在的目录时，如果目标位置是一个已经存在的目录，cp 命令会在该目标目录下创建一个与源目录同名的子目录，并将源目录及其所有内容复制到这个新创建的子目录中.</p><p>使用下面方式解决此问题</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cp</span> -r source_directory/* existing_directory/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="连接符"><a class="header-anchor" href="#连接符">#</a> | 连接符</h3><p>在 bash 命令中，管道操作符（|）用于将一个命令的输出作为另一个命令的输入</p><h3 id="xargs"><a class="header-anchor" href="#xargs">#</a> xargs</h3><p>在 bash 命令中，将前面的参数输入给后面的函数</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> rev-parse --show-toplevel <span class="token operator">|</span> <span class="token builtin class-name">echo</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="mac-快速复制文件路径"><a class="header-anchor" href="#mac-快速复制文件路径">#</a> mac 快速复制文件路径</h3><ul><li>选择你想要复制路径的文件或文件夹。</li><li>按下 Command + Option + C 键，即可快速复制路径到剪贴板。‌</li></ul><h3 id="locate"><a class="header-anchor" href="#locate">#</a> locate</h3><p>快速查找文件</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">locate</span> whoami.exe\n<span class="token comment"># ：使用locate命令查找whoami的文件在系统中的主要位置，有的话输出其路径</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',29),l={render:function(s,n){return e}}}}]);