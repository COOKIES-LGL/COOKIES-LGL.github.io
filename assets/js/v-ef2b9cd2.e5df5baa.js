(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[5367],{6764:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-ef2b9cd2",path:"/pages/blog-daily/javascript-tools/",title:"",lang:"zh-CN",frontmatter:{sidebar:"auto"},excerpt:"",headers:[{level:3,title:"JS 高级使用技巧",slug:"js-高级使用技巧",children:[]},{level:3,title:"～～向下取整",slug:"向下取整",children:[]},{level:3,title:"虚拟 A 标签下载",slug:"虚拟-a-标签下载",children:[]},{level:3,title:"blob 对象转 json",slug:"blob-对象转-json",children:[]},{level:3,title:"base64 转 Blob 对象",slug:"base64-转-blob-对象",children:[]},{level:3,title:"base64 转 file 对象",slug:"base64-转-file-对象",children:[]},{level:3,title:"移除空值",slug:"移除空值",children:[]},{level:3,title:"'2018-01-01'和'2018/01/01'是不同的，存在一定时差",slug:"_2018-01-01-和-2018-01-01-是不同的-存在一定时差",children:[]}],filePathRelative:"pages/blog-daily/javascript-tools/README.md",git:{updatedTime:1733294272e3,contributors:[{name:"guilin.li",email:"1344714332@qq.com",commits:5},{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:4}]}}},4383:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h3 id="js-高级使用技巧"><a class="header-anchor" href="#js-高级使用技巧">#</a> JS 高级使用技巧</h3><h3 id="向下取整"><a class="header-anchor" href="#向下取整">#</a> ～～向下取整</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">4.8</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token operator">~</span><span class="token operator">~</span><span class="token number">4.9</span> <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 以下代码就可以实现同源跨tab页的数据共享</span>\n<span class="token comment">// 通过自执行函数来确保在新开tab中直接执行</span>\n<span class="token comment">// 方法一：同步已有标签页的sessionStorage数据到新开tab页</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 新打开一个tab标签页并通知其他标签页同步sessionStorage的数据到本标签页</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sessionStorage<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这个调用能触发storage事件，从而达到共享数据的目的</span>\n    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;syncSessionStorage&quot;</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 该事件是核心</span>\n  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;storage&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">&quot;syncSessionStorage&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 已存在的标签页会收到这个事件</span>\n      localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;sessionStorage&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&quot;sessionStorage&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">&quot;sessionStorage&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>sessionStorage<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 新开启的标签页会收到这个事件</span>\n      <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><hr><p>Object.seal() 和 Object.freeze()共同点：<br> 作用的对象变得不可扩展，这意味着不能再添加新属性。 作用的对象中的每个元素都变得不可配置，这意味着不能删除属性。 如果在 ‘use strict’ 模式下使用，这两个方法都可能抛出错误。<br> 不同点:<br> Object.seal() 能让你修改属性的值，但 Object.freeze() 不能。</p><hr><p>开始二分查找问题<br> git bisect start<br> 标记当前有问题<br> git bisect bad<br> 标记哪个 commit 或 tag 时是没问题的<br> git bisect good v1.0.0</p><p>此时 git 会 checkout 两个点之间的某个 commit，<br> 如果此时还是有问题：<br> git bisect bad<br> 如果此时没有问题：<br> git bisect good<br> 接着 git 会 checkout 下一个「有问题」和「没问题」之间的 commit</p><p>直到定位到问题，git 会提示：xxxxxxx is first bad commit</p><hr><p>ES6 为 new 命令引入了 new.target 属性，该属性用在构造函数之中，返回 new 命令作用于的构造函数。<br> 如果构造函数不是通过 new 命令或 Reflect.construct()调用的，new.target 会返回 undefined， 因此这个属性可以用来确定构造函数是怎么调用的。<br> 可用于设置只能通过 new 实例化的对象和类, 子类继承父类,该属性指向子类, 因此也可用于书写不能被实例化,只能被继承的类.</p><hr><details>     <summary>Click Here to get the user details</summary>     <table>         <tr>             <th>#</th>             <th>Name</th>             <th>Location</th>             <th>Job</th>         </tr>         <tr>             <td>1</td>             <td>Adam</td>             <td>Huston</td>             <td>UI/UX</td>         </tr>     </table></details><hr><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 创建一个挂在到vue实例上的组件</span>\n<span class="token keyword">const</span> <span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">vueInstance<span class="token operator">:</span> VueConstructor<span class="token punctuation">,</span> options<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> AdModalConstructor <span class="token operator">=</span> vueInstance<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>AdModal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdModalConstructor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    i18n<span class="token operator">:</span> options<span class="token punctuation">.</span>i18n<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  instance<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  vueInstance<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$adModal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">base<span class="token operator">:</span> RegionUrl<span class="token punctuation">,</span> to<span class="token operator">?</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    instance<span class="token punctuation">.</span>$data<span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    instance<span class="token punctuation">.</span>$data<span class="token punctuation">.</span>base <span class="token operator">=</span> base<span class="token punctuation">;</span>\n    instance<span class="token punctuation">.</span>$data<span class="token punctuation">.</span>to <span class="token operator">=</span> to<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><hr><h3 id="虚拟-a-标签下载"><a class="header-anchor" href="#虚拟-a-标签下载">#</a> 虚拟 A 标签下载</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">private</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token operator">:</span> any<span class="token punctuation">,</span> fileName<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> downloadLink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  downloadLink<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span>\n  downloadLink<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;download&#39;</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> binaryBlob <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  binaryBlob<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> objectUrl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span>binaryBlob<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  downloadLink<span class="token punctuation">.</span>href <span class="token operator">=</span> objectUrl<span class="token punctuation">;</span>\n  downloadLink<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>objectUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  downloadLink<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><hr><h3 id="blob-对象转-json"><a class="header-anchor" href="#blob-对象转-json">#</a> blob 对象转 json</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nreader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>res <span class="token keyword">as</span> Blob<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nreader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>result <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * 描述如下\n同时发多个相同的请求，如果第一个请求成功，那么剩余的请求都不会发出，成功的结果作为剩余请求返回\n如果第一个请求失败了，那么接着发编号为2的请求，如果请求成功，那么剩余的请求都不会发出，成功的结果作为剩余请求返回\n如果第二个请求失败了，那么接着发编号为3的请求，如果请求成功，那么剩余的请求都不会发出，成功的结果作为剩余请求返回\n...以此递推，直到遇到最坏的情况需要发送最后一个请求\n */</span>\n<span class="token keyword">const</span> <span class="token function-variable function">cacheAsync</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">promiseGenerator<span class="token punctuation">,</span> symbol</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 可以提供键值</span>\n      symbol <span class="token operator">=</span> symbol <span class="token operator">||</span> params<span class="token punctuation">;</span>\n      <span class="token keyword">let</span> cacheCfg <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheCfg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        cacheCfg <span class="token operator">=</span> <span class="token punctuation">{</span>\n          res<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n          exector<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> resolve<span class="token punctuation">,</span> reject <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> cacheCfg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 命中缓存</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheCfg<span class="token punctuation">.</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>cacheCfg<span class="token punctuation">.</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        cacheCfg<span class="token punctuation">.</span>exector<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> resolve<span class="token punctuation">,</span> reject <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> exector <span class="token punctuation">}</span> <span class="token operator">=</span> cacheCfg<span class="token punctuation">;</span>\n\n      <span class="token comment">// 处理并发，在请求还处于pending过程中就发起了相同的请求</span>\n      <span class="token comment">// 拿第一个请求</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>exector<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>exector<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n            <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">promiseGenerator</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 如果成功了，那么直接resolve掉剩余同样的请求</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span>exector<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              exector<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空栈</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// 缓存结果</span>\n            cacheCfg<span class="token punctuation">.</span>res <span class="token operator">=</span> response<span class="token punctuation">;</span>\n          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 如果失败了 那么这个promise的则为reject</span>\n            <span class="token keyword">const</span> <span class="token punctuation">{</span> reject <span class="token punctuation">}</span> <span class="token operator">=</span> exector<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><h3 id="base64-转-blob-对象"><a class="header-anchor" href="#base64-转-blob-对象">#</a> base64 转 Blob 对象</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">base64dataURLtoBlob</span><span class="token punctuation">(</span><span class="token parameter">dataUrl<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> char <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">//去除首尾双引号</span>\n  dataUrl <span class="token operator">=</span> dataUrl<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;^\\\\&quot;</span> <span class="token operator">+</span> char <span class="token operator">+</span> <span class="token string">&quot;+|\\\\&quot;</span> <span class="token operator">+</span> char <span class="token operator">+</span> <span class="token string">&quot;+$&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> arr <span class="token operator">=</span> dataUrl<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> mime <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:(.*?);</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> blobStr <span class="token operator">=</span> <span class="token function">atob</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> blobStrLength <span class="token operator">=</span> blobStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> u8arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>blobStrLength<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>blobStrLength<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    u8arr<span class="token punctuation">[</span>blobStrLength<span class="token punctuation">]</span> <span class="token operator">=</span> blobStr<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>blobStrLength<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>u8arr<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> mime<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="base64-转-file-对象"><a class="header-anchor" href="#base64-转-file-对象">#</a> base64 转 file 对象</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// base64转file对象</span>\n<span class="token keyword">function</span> <span class="token function">base64dataURLtoBlob</span><span class="token punctuation">(</span><span class="token parameter">dataUrl<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> char <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">//去除首尾双引号</span>\n  dataUrl <span class="token operator">=</span> dataUrl<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;^\\\\&quot;</span> <span class="token operator">+</span> char <span class="token operator">+</span> <span class="token string">&quot;+|\\\\&quot;</span> <span class="token operator">+</span> char <span class="token operator">+</span> <span class="token string">&quot;+$&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> arr <span class="token operator">=</span> dataUrl<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> mime <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:(.*?);</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> blobStr <span class="token operator">=</span> <span class="token function">atob</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> blobStrLength <span class="token operator">=</span> blobStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> u8arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>blobStrLength<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>blobStrLength<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    u8arr<span class="token punctuation">[</span>blobStrLength<span class="token punctuation">]</span> <span class="token operator">=</span> blobStr<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>blobStrLength<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span>u8arr<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;fileName&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> mime<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="移除空值"><a class="header-anchor" href="#移除空值">#</a> 移除空值</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// qs库应该是axios安装时会自带的  get请求处理数组传递</span>\n<span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;qs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\naxios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    params<span class="token operator">:</span><span class="token punctuation">{</span>\n        arr<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">paramsSerializer</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n          arrayFormat<span class="token operator">:</span> <span class="token string">&#39;repeat&#39;</span>\n          skipNull<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 移除空值</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_2018-01-01-和-2018-01-01-是不同的-存在一定时差"><a class="header-anchor" href="#_2018-01-01-和-2018-01-01-是不同的-存在一定时差">#</a> &#39;2018-01-01&#39;和&#39;2018/01/01&#39;是不同的，存在一定时差</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&quot;2018-01-01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Mon Jan 01 2018 08:00:00 GMT+0800 (中国标准时间)</span>\n<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&quot;2018/01/01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Mon Jan 01 2018 00:00:00 GMT+0800 (中国标准时间)</span>\n<span class="token comment">// 有个北京时间与格林尼治时间的时差</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',31),t={render:function(n,s){return p}}}}]);