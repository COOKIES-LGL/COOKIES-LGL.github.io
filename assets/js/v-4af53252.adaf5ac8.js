(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[5197],{2444:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-4af53252",path:"/pages/fe-sre/npm/",title:"",lang:"zh-CN",frontmatter:{home:!1},excerpt:"",headers:[{level:3,title:"https://www.npmjs.com/ 登陆通行 key",slug:"https-www-npmjs-com-登陆通行-key",children:[]},{level:3,title:"npm update",slug:"npm-update",children:[]},{level:3,title:"yarn deduplicate",slug:"yarn-deduplicate",children:[]},{level:3,title:"npm 设置仓库源",slug:"npm-设置仓库源",children:[]},{level:3,title:"使 npm 包同时支持多种模块类型",slug:"使-npm-包同时支持多种模块类型",children:[]},{level:3,title:"npm ls --depth=0",slug:"npm-ls-depth-0",children:[]},{level:3,title:"npm list package",slug:"npm-list-package",children:[]},{level:3,title:"npm 查看依赖包版本信息",slug:"npm-查看依赖包版本信息",children:[]},{level:3,title:"package.json 中配置 workspaces",slug:"package-json-中配置-workspaces",children:[]},{level:3,title:"npm home、 npm repo",slug:"npm-home、-npm-repo",children:[]},{level:3,title:"yarn why、npm why",slug:"yarn-why、npm-why",children:[]},{level:3,title:"yarn why-not、npm why-not",slug:"yarn-why-not、npm-why-not",children:[]},{level:3,title:"npm outdated",slug:"npm-outdated",children:[]},{level:3,title:".npmignore",slug:"npmignore",children:[]},{level:3,title:"npm --filter",slug:"npm-filter",children:[]},{level:3,title:"给指定的 scope 配置源",slug:"给指定的-scope-配置源",children:[]},{level:3,title:"单独限制源",slug:"单独限制源",children:[]},{level:3,title:"run-s",slug:"run-s",children:[]}],filePathRelative:"pages/fe-sre/npm/README.md",git:{updatedTime:1742891356e3,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:38}]}}},4067:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<ul><li><a href="./common-use-npm">高频使用的 npm 包</a> <span style="color:#bbb;float:right;">2022-02-10</span></li></ul><h3 id="https-www-npmjs-com-登陆通行-key"><a class="header-anchor" href="#https-www-npmjs-com-登陆通行-key">#</a> https://www.npmjs.com/ 登陆通行 key</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>a10f91d9caceb99b42e02939b65383a24636618d9e8b4d2a4a5aef1ded9f4323 59cb94abf01531e2372ea509815d33b3e0ed920c62b4ebcad70cf71796e10ab0 42048040dc187f85fbbb77027ef3c09ad2f18126e01dacbb1a52275f68a7c785 47a2d47060b6db99ff123bce9d63410d1601d0e0dd41cdf543cf93e2f3fbf9da 2168994a69337937328c3160237fe4afe805db4567a0ef5cbe011a07f6e7fed3</p></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>112278114e8574249c83fb75075ce7a81e61a4d410528022e1e302b7a1e25433 3a7af25fc4f806e33ba616acbbb36fd5bd4eafa9728a32924209fc00aa81cbef 3e97b73765c682c5c011dbb0cdae0ae97de0215cd0c77f2f29cfc49effd8288e 25127cf7808b16164de9604bb15eacc0961c1d804aa7307a98ed550efedf710f afbe64d25823c47593a997ffaecea7c20f59d29d1c1e7fb1c03662e3285d3f54</p></div><h3 id="npm-update"><a class="header-anchor" href="#npm-update">#</a> npm update</h3><p>已经存在 node_modules 时 npm install 不会更新 ^的版本控制，需要使用 npm update. 或者删除 node_modules 进行更新</p><p>npm update 命令的目的是根据您在 package.json 文件中指定的内容更新您的 package-lock.json。这是正常行为。 如果你想更新你的 package.json 文件，你可以使用 npm-check-updates</p><blockquote><p>npm install -g npm-check-updates.</p></blockquote><p>然后可以使用以下命令：</p><ul><li>ncu 检查 package.json 文件中的更新</li><li>ncu -u 更新 package.json 文件</li><li>npm update --save 从 package.json 文件更新 package-lock.json 文件</li></ul><h3 id="yarn-deduplicate"><a class="header-anchor" href="#yarn-deduplicate">#</a> yarn deduplicate</h3><p>Yarn-deduplicate 是一款 npm 包，它可以帮助我们自动解决项目中遇到的同一依赖重复问题，可以有效地保证我们项目的稳定性和安全性。</p><h3 id="npm-设置仓库源"><a class="header-anchor" href="#npm-设置仓库源">#</a> npm 设置仓库源</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry <span class="token punctuation">[</span>https://registry.npmjs.org/<span class="token punctuation">]</span><span class="token punctuation">(</span>https://registry.npmjs.org/<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="使-npm-包同时支持多种模块类型"><a class="header-anchor" href="#使-npm-包同时支持多种模块类型">#</a> 使 npm 包同时支持多种模块类型</h3><p>要使 npm 包同时适配 commonJS 和 esModule，可以在 package.json 的 &quot;main&quot; 字段中指定 commonJS 版本的入口文件，同时在 &quot;module&quot; 字段中指定 esModule 版本的入口文件。例如：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-package&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/cjs/index.js&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/esm/index.js&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>知识点： （1）.mjs 文件总是以 ES6 模块加载，.cjs 文件总是以 CommonJS 模块加载，.js 文件的加载取决于 package.json 里面 type 字段的设置。 （2）ES6 模块与 CommonJS 模块尽量不要混用。require 命令不能加载.mjs 文件，会报错，只有 import 命令才可以加载.mjs 文件。反过来，.mjs 文件里面也不能使用 require 命令，必须使用 import。</p><h3 id="npm-ls-depth-0"><a class="header-anchor" href="#npm-ls-depth-0">#</a> npm ls --depth=0</h3><p>可以使用 npm ls --depth=0 命令查看项目中的幽灵依赖</p><h3 id="npm-list-package"><a class="header-anchor" href="#npm-list-package">#</a> npm list package</h3><p>展示当前 package 的安装情况</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>这个工程位于我们主工程的目录底下， 这里要用到的依赖包，如果本工程没有安装， 则会自动查找上层目录， 也就是，外层安装了的话就可用。 另外，找到根目录也没有的话还会查看全局安装，都没有的时候才会报错</p></div><p>如果通过路径进行安装会出现循环依赖问题 以下安装方式</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/npm-plugin/index.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>因为 demo 工程位于 package 工程目录下， 会导致递归引用。 仅当不在同一路径下创建新工程时可以。</p><p>因此我们可以直接在项目文件中按文件路径引入 或者使用 npx link 引入</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;resolutions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;**/typescript&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.3.3&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 可以用来限制某个开发包的 依赖包版本</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="npm-查看依赖包版本信息"><a class="header-anchor" href="#npm-查看依赖包版本信息">#</a> npm 查看依赖包版本信息</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> list express versions\n<span class="token comment"># 查看express所有版本</span>\n<span class="token function">npm</span> view express versions\n<span class="token comment"># 查询到npm服务器上对应查询包express的版本所有信息‌</span>\n<span class="token function">npm</span> view express version\n<span class="token comment"># 查看express当前安装的版本信息</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="package-json-中配置-workspaces"><a class="header-anchor" href="#package-json-中配置-workspaces">#</a> package.json 中配置 workspaces</h3><p>单个代码库中统一管理多个包（monorepo），在 workspaces 声明目录下的 package 会软链到根目录的 node_modules 中。</p><ol><li>初始化项目 <blockquote><p>npm init -y</p></blockquote></li><li>声明本项目是 workspaces 模式</li></ol><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;private&quot;</span><span class="token operator">:</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;workspaces&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;packages/*&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="3"><li>创建子包 package1</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> init -w packages/package1 -y\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>package-lock.json 中可以看到软链 link</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;packages&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;node_modules/package1&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;resolved&quot;</span><span class="token operator">:</span> <span class="token string">&quot;packages/package1&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;link&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="4"><li>创建子包 package2</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> init -w packages/package2 -y\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="5"><li>将子包 package1 添加到 package2 中</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> i p1 -w p2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>workspaces 功能与 lerna 类似，如果只需简单地管理多个包，workspaces 足够了。lerna 具有版本管理，发包提示，简化多包项目发布流程等更多功能。</p><h3 id="npm-home、-npm-repo"><a class="header-anchor" href="#npm-home、-npm-repo">#</a> npm home、 npm repo</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># npm home 查看官网</span>\n<span class="token function">npm</span> home express\n<span class="token comment"># npm repo 打开代码仓库</span>\n<span class="token function">npm</span> repo react\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="yarn-why、npm-why"><a class="header-anchor" href="#yarn-why、npm-why">#</a> yarn why、npm why</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># yarn why命令的输出结果通常包括以下几个部分：</span>\n<span class="token comment"># ‌包名‌：你查询的包名。</span>\n<span class="token comment"># ‌版本‌：安装的包版本。</span>\n<span class="token comment"># ‌原因‌：显示了哪个包（及其版本）依赖于这个包。如果有多个依赖路径，它会列出所有路径。</span>\n<span class="token comment"># ‌依赖树‌：有时，Yarn还会显示一个简化的依赖树，帮助你更直观地理解依赖关系。</span>\n<span class="token function">yarn</span> why express\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="yarn-why-not、npm-why-not"><a class="header-anchor" href="#yarn-why-not、npm-why-not">#</a> yarn why-not、npm why-not</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># npm why-not命令的输出结果通常包括以下几个部分：</span>\n<span class="token comment"># ‌包名和版本‌：你查询的包名及其特定版本。</span>\n<span class="token comment"># ‌当前安装版本‌：项目中实际安装的包版本。</span>\n<span class="token comment"># ‌依赖路径‌：显示了哪个包（及其版本）依赖于该包的另一个版本，以及这个依赖关系是如何在依赖树中形成的。</span>\n<span class="token comment"># ‌版本解析信息‌：有时，npm还会提供关于为什么选择了当前版本而不是你查询的版本的信息，比如版本冲突、语义化版本控制规则等。</span>\n<span class="token function">npm</span> why-not lodash@5.0.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="npm-outdated"><a class="header-anchor" href="#npm-outdated">#</a> npm outdated</h3><p>检查项目中哪些包已经过时，有可用的更新版本。</p><h3 id="npmignore"><a class="header-anchor" href="#npmignore">#</a> .npmignore</h3><p>发布 npm 时指定需要上传的文件或者目录。如果你有少数不上传的文件，那可以创建一个.npmignore 文件（类似于.gitignore，但该文件不会上传 npm），去掉你不需要上传的文件。</p><ul><li>注意 package.json 的 files 字段可以覆盖.npmignore。</li></ul><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;dist/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;package.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;README.md&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="npm-filter"><a class="header-anchor" href="#npm-filter">#</a> npm --filter</h3><p>使用通配符时匹配批量操作</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --filter @my/*\n<span class="token comment"># 安装所有符合 @my/* 模式的包</span>\n<span class="token function">npm</span> update --filter react-*\n<span class="token comment"># 更新所有符合 react-* 模式的包</span>\n<span class="token function">npm</span> --filter <span class="token punctuation">\\</span>&quot;./packages/*<span class="token punctuation">\\</span>&quot; run build\n<span class="token comment"># 子包目录执行build</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="给指定的-scope-配置源"><a class="header-anchor" href="#给指定的-scope-配置源">#</a> 给指定的 scope 配置源</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>@afa:registry <span class="token operator">=</span> https://registry.npmmirror.com\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="单独限制源"><a class="header-anchor" href="#单独限制源">#</a> 单独限制源</h3><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;resolutions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;globby&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm:@nat/globby@^11.1.0&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="run-s"><a class="header-anchor" href="#run-s">#</a> run-s</h3><p>用于顺序执行多个在 <code>package.json</code> 文件的 <code>scripts</code> 部分定义的脚本命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;test&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;run-s test:*&quot;</span>,\n  <span class="token comment"># 执行test前缀的所有命令</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',65),p={render:function(n,s){return e}}}}]);