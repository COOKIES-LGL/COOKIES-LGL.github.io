(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[5813],{118:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-57d8cc3a",path:"/pages/backend/Nestjs/quick-learn/",title:"",lang:"zh-CN",frontmatter:{home:!1,sidebar:!0},excerpt:"",headers:[{level:3,title:"创建项目",slug:"创建项目",children:[]},{level:3,title:"目录结构",slug:"目录结构",children:[]},{level:3,title:"创建完整的模块",slug:"创建完整的模块",children:[]},{level:3,title:"创建单独模块",slug:"创建单独模块",children:[]},{level:3,title:"创建控制器",slug:"创建控制器",children:[]},{level:3,title:"创建服务",slug:"创建服务",children:[]},{level:3,title:"创建中间件",slug:"创建中间件",children:[]},{level:3,title:"配置守卫",slug:"配置守卫",children:[]},{level:3,title:"配置环境变量",slug:"配置环境变量",children:[]},{level:3,title:"配置 session",slug:"配置-session",children:[]},{level:3,title:"拦截器",slug:"拦截器",children:[]},{level:3,title:"配置全局响应格式拦截器",slug:"配置全局响应格式拦截器",children:[]},{level:3,title:"配置全局异常拦截器",slug:"配置全局异常拦截器",children:[]},{level:3,title:"配置元数据",slug:"配置元数据",children:[]},{level:3,title:"配置 JWT 策略",slug:"配置-jwt-策略",children:[]},{level:3,title:"连接数据库",slug:"连接数据库",children:[]},{level:3,title:"管道的使用",slug:"管道的使用",children:[]},{level:3,title:"基于 class 的验证",slug:"基于-class-的验证",children:[]},{level:3,title:"接口文档",slug:"接口文档",children:[]},{level:3,title:"配置跨域",slug:"配置跨域",children:[]}],filePathRelative:"pages/backend/Nestjs/quick-learn/README.md",git:{updatedTime:174524677e4,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:4}]}}},2933:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>x});var p=a(6252);const t=(0,p.uE)('<h3 id="创建项目"><a class="header-anchor" href="#创建项目">#</a> 创建项目</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> i -g @nestjs/cli\n<span class="token comment"># 全局安装脚手架</span>\nnest new 你的项目名称\nnest new 你的项目名称 --strict\n<span class="token comment"># 严格模式创建项目</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="目录结构"><a class="header-anchor" href="#目录结构">#</a> 目录结构</h3><p>目录结构很简洁，现在只有一个根模块（App），后续会创建出很多各种模块 User/Order/... 等等，NestJS 可以说是通过&quot;模块&quot;来管理整个应用的。</p><ul><li>main.ts 入口文件，后续全局性的配置会在这里配置。</li><li>app.controller.ts 定义接口的地方，前端请求过来，最先到达这里。</li><li>app.module.ts 应用的根模块，后续会创建很多模块，都要在此进行管理</li><li>app.service.ts 管理数据库的 CRUD 操作</li><li>app.controller.spec.ts 单元测试。</li></ul><h3 id="创建完整的模块"><a class="header-anchor" href="#创建完整的模块">#</a> 创建完整的模块</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>nest generate module user\n<span class="token comment"># 创建模块</span>\nnest g res modules/user\n<span class="token comment"># 简写在 modules 文件夹下创建 user 模块 包含 module、service、controller</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="创建单独模块"><a class="header-anchor" href="#创建单独模块">#</a> 创建单独模块</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>nest g mo user\n<span class="token comment"># 分开单独生成user.module文件</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="module-元数据如何组织模块"><a class="header-anchor" href="#module-元数据如何组织模块">#</a> @Module()元数据如何组织模块</h4><ul><li>providers 注册订单提供者模块，如：负责订单 CRUD 的服务；</li><li>controllers 注册订单控制器模块，如：负责订单 CRUD 的路由处理；</li><li>imports 注册与订单相关联的模块，如：与订单关联的用户查询服务；</li><li>exports 导出订单提供者模块，如：用户查询需要订单提供者统计订单数量；</li></ul><h4 id="模块再导出"><a class="header-anchor" href="#模块再导出">#</a> 模块再导出</h4><p>一个模块仅负责将一系列相关联的模块通过<code>imports</code>导入，紧接着就通过<code>exports</code>全部导出的行为就是模块在导出， 利用模块再导出的能力，可以减少大量关联模块重复导入造成的负担.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>@<span class="token function">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>DatabaseModule<span class="token punctuation">,</span> RedisModule<span class="token punctuation">,</span> MongoModule<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  exports<span class="token operator">:</span> <span class="token punctuation">[</span>DatabaseModule<span class="token punctuation">,</span> RedisModule<span class="token punctuation">,</span> MongoModule<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ConnectionModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// 同时使用数据库连接、Redis连接、Mongo连接的情况下仅需要导 ConnectionModule 模块即可。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="全局模块"><a class="header-anchor" href="#全局模块">#</a> 全局模块</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>@<span class="token function">Global</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n@<span class="token function">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>DatabaseModule<span class="token punctuation">,</span> RedisModule<span class="token punctuation">,</span> MongoModule<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  exports<span class="token operator">:</span> <span class="token punctuation">[</span>DatabaseModule<span class="token punctuation">,</span> RedisModule<span class="token punctuation">,</span> MongoModule<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ConnectionModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// 增加 @Global() 装饰器</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="创建控制器"><a class="header-anchor" href="#创建控制器">#</a> 创建控制器</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>@<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;detail/:id&#39;</span><span class="token punctuation">)</span>\n<span class="token function">findById</span><span class="token punctuation">(</span>@<span class="token function">Param</span><span class="token punctuation">(</span><span class="token punctuation">)</span> param<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">获取 ID 为 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>param<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 的订单详情</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="更多控制器装饰器"><a class="header-anchor" href="#更多控制器装饰器">#</a> 更多控制器装饰器</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// @Header(key, value)：</span>\n<span class="token comment">// @Redirect(&#39;https://nestjs.com/&#39;, 301)</span>\n@<span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n@<span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">&#39;Cache-Control&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">)</span>\n@<span class="token function">Redirect</span><span class="token punctuation">(</span><span class="token string">&#39;https://nestjs.com/&#39;</span><span class="token punctuation">,</span> <span class="token number">301</span><span class="token punctuation">)</span>\n<span class="token function">create</span><span class="token punctuation">(</span>@<span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> createOrderDto<span class="token operator">:</span> CreateOrderDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ordersService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>createOrderDto<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',20),e=(0,p.Wm)("strong",null,"参数获取",-1),o=(0,p.uE)('<h3 id="创建服务"><a class="header-anchor" href="#创建服务">#</a> 创建服务</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>nest generate <span class="token function">service</span> orders；\nnest g s orders；\n<span class="token comment"># 简写命令：</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>服务是典型的提供者，HTTP 请求在经过控制器处理后应该将复杂的任务交由服务层进行处理, 提供者生命周期同应用的生命周期.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CreateOrderDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./dto/create-order.dto&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> UpdateOrderDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./dto/update-order.dto&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrdersService</span> <span class="token punctuation">{</span>\n  <span class="token function">create</span><span class="token punctuation">(</span>createOrderDto<span class="token operator">:</span> CreateOrderDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;This action adds a new order&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">This action returns all orders</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">This action returns a #</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> order</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">update</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> updateOrderDto<span class="token operator">:</span> UpdateOrderDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">This action updates a #</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> order</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">This action removes a #</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> order</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="service-通过构造函数注入-controller"><a class="header-anchor" href="#service-通过构造函数注入-controller">#</a> Service 通过构造函数注入 Controller</h4><p>将 OrdersService 通过构造函数注入到 OrdersController 控制器，这样就得到了初始化后的 ordersService 成员，<br> 接着就可以在不同的处理函数调用服务中提供的能力</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> Post<span class="token punctuation">,</span> Body<span class="token punctuation">,</span> Param <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> OrdersService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./orders.service&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CreateOrderDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./dto/create-order.dto&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&quot;orders&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrdersController</span> <span class="token punctuation">{</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> ordersService<span class="token operator">:</span> OrdersService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  @<span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">create</span><span class="token punctuation">(</span>@<span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> createOrderDto<span class="token operator">:</span> CreateOrderDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ordersService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>createOrderDto<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ordersService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;:id&quot;</span><span class="token punctuation">)</span>\n  <span class="token function">findOne</span><span class="token punctuation">(</span>@<span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ordersService<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 除构造函数注入的这种方式外，还可以通过属性注入</span>\n<span class="token comment">// @Inject()</span>\n<span class="token comment">// private readonly ordersService: OrdersService;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="创建中间件"><a class="header-anchor" href="#创建中间件">#</a> 创建中间件</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>nest generate middleware <span class="token operator">&lt;</span>middleware-name<span class="token operator">&gt;</span>\nnest g mi <span class="token operator">&lt;</span>middleware-name<span class="token operator">&gt;</span>\n简写命令：\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>中间件是一个使用@Injectable()装饰器注释且实现 NestMiddleware 接口的类</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable<span class="token punctuation">,</span> NestMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Request<span class="token punctuation">,</span> Response <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LoggerMiddleware</span> <span class="token keyword">implements</span> <span class="token class-name">NestMiddleware</span> <span class="token punctuation">{</span>\n  <span class="token function">use</span><span class="token punctuation">(</span>req<span class="token operator">:</span> Request<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">,</span> <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> start <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">hrtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;finish&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> diff <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">hrtime</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token punctuation">(</span>diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">1e3</span> <span class="token operator">+</span> diff<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">1e-6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="注册中间件"><a class="header-anchor" href="#注册中间件">#</a> 注册中间件</h4><p>需要在消费中间件的模块通过继承 NestModule 并实现 configure 接口</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> MiddlewareConsumer<span class="token punctuation">,</span> Module<span class="token punctuation">,</span> NestModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> OrdersService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./orders.service&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> OrdersController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./orders.controller&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> LoggerMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;src/logger/logger.middleware&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>OrdersController<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span>OrdersService<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrdersModule</span> <span class="token keyword">implements</span> <span class="token class-name">NestModule</span> <span class="token punctuation">{</span>\n  <span class="token function">configure</span><span class="token punctuation">(</span>consumer<span class="token operator">:</span> MiddlewareConsumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">consumer</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>LoggerMiddleware<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forRoutes</span><span class="token punctuation">(</span><span class="token string">&quot;orders&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// forRoutes()支持多种形式的参数来表示生效的范围，如：单字符串、多个字符串、RouteInfo对象、单个控制器类或多个控制器类</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="范围控制"><a class="header-anchor" href="#范围控制">#</a> 范围控制</h4><p>MiddlewareConsumer 提供了 exclude 函数来按规则排除一些不应用中间件的路由,</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 基于具体路由配置及模式匹配的排除方案</span>\n<span class="token function">consumer</span>\n  <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>LoggerMiddleware<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">exclude</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;orders&quot;</span><span class="token punctuation">,</span> method<span class="token operator">:</span> RequestMethod<span class="token punctuation">.</span><span class="token constant">GET</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;orders&quot;</span><span class="token punctuation">,</span> method<span class="token operator">:</span> RequestMethod<span class="token punctuation">.</span><span class="token constant">POST</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;orders/(.*)&quot;</span>\n  <span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">forRoutes</span><span class="token punctuation">(</span><span class="token string">&quot;orders&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>MiddlewareConsumer 提供的 forRoutes 支持下面这种模式匹配</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">forRoutes</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;ab*cd&quot;</span><span class="token punctuation">,</span> method<span class="token operator">:</span> RequestMethod<span class="token punctuation">.</span><span class="token constant">ALL</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="中间件串联"><a class="header-anchor" href="#中间件串联">#</a> 中间件串联</h4><p>当一个中间件处理完成后，如果请求还没有结束将有 next()函数将控制权向下传递。<br> 如下面这个示例：为了允许客户端发起跨域访问，在 Cors 中间件中为每一个请求添加特殊的请求头后再交由 Logger 中间件继续执行。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// CorsMiddleware.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable<span class="token punctuation">,</span> NestMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Request<span class="token punctuation">,</span> Response <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CorsMiddleware</span> <span class="token keyword">implements</span> <span class="token class-name">NestMiddleware</span> <span class="token punctuation">{</span>\n  <span class="token function">use</span><span class="token punctuation">(</span>req<span class="token operator">:</span> Request<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">,</span> <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 允许所有来源</span>\n    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Headers&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Content-Type,Authorization&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 允许指定的请求头</span>\n    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Methods&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;GET, POST, PUT, DELETE, OPTIONS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 允许指定的请求方法</span>\n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrdersModule</span> <span class="token keyword">implements</span> <span class="token class-name">NestModule</span> <span class="token punctuation">{</span>\n  <span class="token function">configure</span><span class="token punctuation">(</span>consumer<span class="token operator">:</span> MiddlewareConsumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">consumer</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>CorsMiddleware<span class="token punctuation">,</span> LoggerMiddleware<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forRoutes</span><span class="token punctuation">(</span><span class="token string">&quot;orders&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="全局中间件"><a class="header-anchor" href="#全局中间件">#</a> 全局中间件</h4><p>全局注册 类中间件，可以在根模块 AppModule 中注册，使用通配符的形式表示 forRoutes(&#39;*&#39;)</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token keyword">implements</span> <span class="token class-name">NestModule</span> <span class="token punctuation">{</span>\n  <span class="token function">configure</span><span class="token punctuation">(</span>consumer<span class="token operator">:</span> MiddlewareConsumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">consumer</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>CorsMiddleware<span class="token punctuation">,</span> LoggerMiddleware<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forRoutes</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果需要全局注册 功能类中间件 ，那么就可以在创建 app 实例后，通过 app.use(&#39;&#39;) 函数注册</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="配置守卫"><a class="header-anchor" href="#配置守卫">#</a> 配置守卫</h3><p>守卫依据服务运行期间的权限、角色及访问控制列表等条件来确定客户端的访问是否交由路由处理程序处理。</p><h4 id="创建守卫"><a class="header-anchor" href="#创建守卫">#</a> 创建守卫</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>nest generate guard <span class="token operator">&lt;</span>guard-name<span class="token operator">&gt;</span>\nnest g gu <span class="token operator">&lt;</span>guard-name<span class="token operator">&gt;</span>\n<span class="token comment"># 简写命令</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>守卫也是一个使用@Injectable()装饰器注释的类，它需要实现 CanActivate 接口：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> CanActivate<span class="token punctuation">,</span> ExecutionContext<span class="token punctuation">,</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;rxjs&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RolesGuard</span> <span class="token keyword">implements</span> <span class="token class-name">CanActivate</span> <span class="token punctuation">{</span>\n  <span class="token function">canActivate</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ExecutionContext<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">|</span> Observable<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="角色守卫"><a class="header-anchor" href="#角色守卫">#</a> 角色守卫</h4><p>使用 Reflector 创建一个用来分配角色的装饰器，然后在对应的路由处理函数上添加这个装饰器并分配权限；</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Reflector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/core&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> Roles <span class="token operator">=</span> Reflector<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">createDecorator</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>@<span class="token function">Roles</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;admin&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n@<span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">create</span><span class="token punctuation">(</span>@<span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> createOrderDto<span class="token operator">:</span> CreateOrderDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ordersService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>createOrderDto<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>RolesGuard 中通过 执行上下文类 获取被调用处理函数的引用，并注入 Reflector 来提取处理函数被分配的角色</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> CanActivate<span class="token punctuation">,</span> ExecutionContext<span class="token punctuation">,</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Reflector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/core&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;rxjs&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Roles <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./roles.decorator&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RolesGuard</span> <span class="token keyword">implements</span> <span class="token class-name">CanActivate</span> <span class="token punctuation">{</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> reflector<span class="token operator">:</span> Reflector<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token function">canActivate</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ExecutionContext<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">|</span> Observable<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> handler <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> roles <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reflector<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>Roles<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output [&#39;admin&#39;]</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>案例</strong> 客户端协商通过 Header 中添加 role 属性来传递角色信息，那么在 RolesGuard 中可以通过执行上下文获取 Request 对象中的请求头数据，<br> 最后对比角色列表，并返回是否包含角色的结果</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> CanActivate<span class="token punctuation">,</span> ExecutionContext<span class="token punctuation">,</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Reflector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/core&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;rxjs&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Roles <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./roles.decorator&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RolesGuard</span> <span class="token keyword">implements</span> <span class="token class-name">CanActivate</span> <span class="token punctuation">{</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> reflector<span class="token operator">:</span> Reflector<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token function">canActivate</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ExecutionContext<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">|</span> Observable<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> handler <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> roles <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reflector<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>Roles<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> request<span class="token operator">:</span> Request <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">switchToHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> role <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;role&quot;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> roles<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>role <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="绑定守卫"><a class="header-anchor" href="#绑定守卫">#</a> 绑定守卫</h4><p><strong>控制器范围绑定</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&quot;orders&quot;</span><span class="token punctuation">)</span>\n@<span class="token function">UseGuards</span><span class="token punctuation">(</span>RolesGuard<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrdersController</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// or</span>\n@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&quot;orders&quot;</span><span class="token punctuation">)</span>\n@<span class="token function">UseGuards</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RolesGuard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrdersController</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>全局范围绑定</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">useGlobalGuards</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RolesGuard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// or</span>\n@<span class="token function">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      provide<span class="token operator">:</span> <span class="token constant">APP_GUARD</span><span class="token punctuation">,</span>\n      useClass<span class="token operator">:</span> RolesGuard<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="配置环境变量"><a class="header-anchor" href="#配置环境变量">#</a> 配置环境变量</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @nestjs/config cross-env -D\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// utils/env.ts 文件中配置：</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">DEV</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">PROD</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> envFilePath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;.env&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DEV</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  envFilePath<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">&quot;.env.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  envFilePath<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">&quot;.env.prod&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> envFilePath<span class="token punctuation">,</span> <span class="token constant">DEV</span><span class="token punctuation">,</span> <span class="token constant">PROD</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 在 app.module.ts 文件中配置：</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ConfigModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/config&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> env <span class="token keyword">from</span> <span class="token string">&quot;@/utils/env&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 配置环境变量</span>\n    ConfigModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      isGlobal<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      envFilePath<span class="token operator">:</span> env<span class="token punctuation">.</span>envFilePath<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    UserModule<span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span>AppService<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// 配置 NODE_ENV</span>\n<span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=development nest start --watch&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=production nest build&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>再创建三个配置文件。 .env 文件、 .env.dev 文件、.env.prod 文件</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 项目中就可以获取配置的环境变量了。</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;环境变量&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;环境变量&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="配置-session"><a class="header-anchor" href="#配置-session">#</a> 配置 session</h3><p><strong>安装 express-session</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> express-session -S\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>main.ts 文件中配置</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// main.ts：</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> NestFactory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/core&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> session <span class="token keyword">from</span> <span class="token string">&quot;express-session&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">PROD</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/utils/env&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// session</span>\n  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n    <span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&quot;connect.sid&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 设置cookie中存储sessionId的key，默认为connect.sid，在浏览器控制台的 Application-Cookies-Name 能看到这个名称</span>\n      secret<span class="token operator">:</span> <span class="token string">&quot;密钥&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 必填，最好存在比较安全的地方，比如环境变量</span>\n      resave<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否强制保存会话，即使未被修改也要保存。默认为true</span>\n      cookie<span class="token operator">:</span> <span class="token punctuation">{</span>\n        maxAge<span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token comment">// Cookie的过期时间(毫秒)</span>\n        httpOnly<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否只以http(s)的形式发送cookie，对客户端js不可用（默认为true，也就是客户端不能以document.cookie查看cookie）</span>\n        secure<span class="token operator">:</span> <span class="token constant">PROD</span><span class="token punctuation">,</span> <span class="token comment">// 仅在生产环境下开启，增加安全性</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p><strong>具体使用</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>@<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;/test&#39;</span><span class="token punctuation">)</span>\n<span class="token function">getHello</span><span class="token punctuation">(</span>@<span class="token function">Req</span><span class="token punctuation">(</span><span class="token punctuation">)</span> req<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;req.session.count&#39;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>count<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>持久化 session</strong> 经常会持久化 session，所以一般会将它存在数据库或者 Redis 上，这其实也能很简单就配置完成。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> connect-redis redis\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// main.ts 配置</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> NestFactory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/core&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> redis <span class="token keyword">from</span> <span class="token string">&quot;redis&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> connectRedis <span class="token keyword">from</span> <span class="token string">&quot;connect-redis&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// session</span>\n  <span class="token keyword">const</span> RedisStore <span class="token operator">=</span> <span class="token function">connectRedis</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> redisClient <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n    <span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      store<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RedisStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span> client<span class="token operator">:</span> redisClient <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="拦截器"><a class="header-anchor" href="#拦截器">#</a> 拦截器</h3><p>通过拦截器可以扩展下面这些能力：</p><ul><li>在方法执行之前/之后绑定额外的逻辑</li><li>转换函数返回的结果</li><li>转换函数抛出的异常</li><li>扩展基本功能行为</li><li>根据特定条件完全覆盖函数（例如，缓存）</li></ul><h4 id="绑定拦截器"><a class="header-anchor" href="#绑定拦截器">#</a> 绑定拦截器</h4><p>控制器范围绑定</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>@<span class="token function">UseInterceptors</span><span class="token punctuation">(</span>TimerInterceptor<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrdersController</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// or</span>\n@<span class="token function">UseInterceptors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OrdersController</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>全局范围绑定</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">useGlobalInterceptors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// or</span>\n@<span class="token function">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      provide<span class="token operator">:</span> <span class="token constant">APP_INTERCEPTOR</span><span class="token punctuation">,</span>\n      useClass<span class="token operator">:</span> TimerInterceptor<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="配置全局响应格式拦截器"><a class="header-anchor" href="#配置全局响应格式拦截器">#</a> 配置全局响应格式拦截器</h3><p>后端接口会返回具有统一格式的响应数据。这种做法不仅便于前端开发人员进行操作，还能够保持接口返回数据的规范性和一致性。</p><p><strong>命令行创建拦截器</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>nest generate interceptor <span class="token operator">&lt;</span>interceptor-name<span class="token operator">&gt;</span>\nnest g itc <span class="token operator">&lt;</span>interceptor-name<span class="token operator">&gt;</span>\n<span class="token comment"># 简写命令</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>创建 utils/response.ts 文件</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable<span class="token punctuation">,</span> NestInterceptor<span class="token punctuation">,</span> CallHandler <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Observable<span class="token punctuation">,</span> map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;rxjs&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Reflector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/core&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Data<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/** <span class="token keyword">@name</span> 通过拦截器统一响应格式 **/</span>\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ResponseSuccess<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">NestInterceptor</span> <span class="token punctuation">{</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> reflector<span class="token operator">:</span> Reflector<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token function">intercept</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token operator">:</span> CallHandler<span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>Data<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> next<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>\n      <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 在具体业务中也可以自行定制code</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> <span class="token punctuation">{</span> code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> message <span class="token punctuation">}</span> <span class="token operator">=</span> response<span class="token punctuation">;</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            data<span class="token punctuation">,</span>\n            code<span class="token punctuation">,</span>\n            message<span class="token punctuation">,</span>\n            success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> message <span class="token punctuation">}</span> <span class="token operator">=</span> response<span class="token punctuation">;</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            data<span class="token operator">:</span> message <span class="token operator">?</span> data <span class="token operator">:</span> response<span class="token punctuation">,</span>\n            code<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            message<span class="token operator">:</span> message <span class="token operator">||</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>\n            success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p><strong>配置 main.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Reflector<span class="token punctuation">,</span> NestFactory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/core&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ResponseSuccess <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./utils/response&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 响应格式拦截器</span>\n  app<span class="token punctuation">.</span><span class="token function">useGlobalInterceptors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResponseSuccess</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Reflector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// 配置成功后 接口返回格式</span>\n<span class="token punctuation">{</span>\n  code<span class="token operator">:</span> number<span class="token punctuation">,</span>\n  message<span class="token operator">:</span> string<span class="token punctuation">,</span>\n  success<span class="token operator">:</span> boolean<span class="token punctuation">,</span>\n  data<span class="token operator">:</span> any<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="配置全局异常拦截器"><a class="header-anchor" href="#配置全局异常拦截器">#</a> 配置全局异常拦截器</h3><p>还是在 utils/response.ts 文件</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// utils/response.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  Injectable<span class="token punctuation">,</span>\n  NestInterceptor<span class="token punctuation">,</span>\n  CallHandler<span class="token punctuation">,</span>\n  Catch<span class="token punctuation">,</span>\n  ExceptionFilter<span class="token punctuation">,</span>\n  ArgumentsHost<span class="token punctuation">,</span>\n  HttpException<span class="token punctuation">,</span>\n  HttpStatus<span class="token punctuation">,</span>\n  Logger<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Observable<span class="token punctuation">,</span> map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;rxjs&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Reflector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/core&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Request<span class="token punctuation">,</span> Response <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/** <span class="token keyword">@name</span> 通过异常过滤器统一异常格式 **/</span>\n@<span class="token function">Catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ResponseFail</span> <span class="token keyword">implements</span> <span class="token class-name">ExceptionFilter</span> <span class="token punctuation">{</span>\n  <span class="token keyword">catch</span><span class="token punctuation">(</span>exception<span class="token operator">:</span> HttpException<span class="token punctuation">,</span> host<span class="token operator">:</span> ArgumentsHost<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 创建一个日志</span>\n    <span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 在后台输出日志</span>\n    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> ctx <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">switchToHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> request <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">getRequest</span><span class="token generic class-name"><span class="token operator">&lt;</span>Request<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> response <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">getResponse</span><span class="token generic class-name"><span class="token operator">&lt;</span>Response<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> status <span class="token operator">=</span> HttpStatus<span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&quot;Internal server error&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">HttpException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 正常抛出错误</span>\n      status <span class="token operator">=</span> exception<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>exception<span class="token punctuation">.</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        message <span class="token operator">=</span> exception<span class="token punctuation">.</span>message<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      status<span class="token punctuation">,</span>\n      message<span class="token punctuation">,</span>\n      success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      path<span class="token operator">:</span> request<span class="token punctuation">.</span>url<span class="token punctuation">,</span>\n      timestamp<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p><strong>main.ts 配置</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// main.ts配置</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ResponseSuccess<span class="token punctuation">,</span> ResponseFail <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./utils/response&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Reflector<span class="token punctuation">,</span> NestFactory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/core&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 异常过滤器</span>\n  app<span class="token punctuation">.</span><span class="token function">useGlobalFilters</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResponseFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// 配置成功后 接口返回格式</span>\n<span class="token punctuation">{</span>\n    status<span class="token operator">:</span> number<span class="token punctuation">,</span>\n    message<span class="token operator">:</span> string<span class="token punctuation">,</span>\n    success<span class="token operator">:</span> boolean<span class="token punctuation">,</span>\n    path<span class="token operator">:</span> request.url<span class="token punctuation">,</span>\n    timestamp<span class="token operator">:</span> number\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="配置元数据"><a class="header-anchor" href="#配置元数据">#</a> 配置元数据</h3><p>元数据是一种在运行时用于存储和检索额外信息的数据结构，它可以帮助 Nest 框架执行各种操作，比如<code>依赖注入</code>、<code>参数解析</code>、<code>中间件执行</code>、<code>路由处理</code>等。</p><p><strong>创建 utils/metadata.ts 文件</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> SetMetadata <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SKIP_RS_INTERCEPTOR</span> <span class="token operator">=</span> <span class="token string">&quot;skip_response_success_interceptor&quot;</span><span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@name</span> 跳过全局成功响应格式拦截器\n * <span class="token keyword">@description</span> 通过Metadata添加自定义的元数据、Reflector检索和解析元数据\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">SkipResponseSuccessInterceptor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">SetMetadata</span><span class="token punctuation">(</span><span class="token constant">SKIP_RS_INTERCEPTOR</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// modules/user/user.controller.ts文件中使用</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> SkipResponseSuccessInterceptor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/utils/metadata&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> userService<span class="token operator">:</span> UserService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token doc-comment comment">/** <span class="token keyword">@name</span> 验证码 **/</span>\n  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;captcha&quot;</span><span class="token punctuation">)</span>\n  <span class="token comment">// 跳过响应格式化</span>\n  @<span class="token function">SkipResponseSuccessInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">captcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;abcd&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 增加了一个http://localhost:3001/user/captcha 验证码接口，并且多了一个 @SkipResponseSuccessInterceptor() 的装饰器</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// utils/response.ts</span>\n<span class="token doc-comment comment">/** <span class="token keyword">@name</span> 通过拦截器统一响应格式 **/</span>\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ResponseSuccess<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">NestInterceptor</span> <span class="token punctuation">{</span>\n  <span class="token function">intercept</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token operator">:</span> CallHandler<span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>Data<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获取Metadata自定义元数据</span>\n    <span class="token keyword">const</span> skipInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reflector<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token constant">SKIP_RS_INTERCEPTOR</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>skipInterceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 特殊的请求直接跳过拦截器</span>\n      <span class="token keyword">return</span> next<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>为了看到完整效果 安装了 svg-captcha 包 然后在 controller 中使用</p><blockquote><p>npm install svg-captcha</p></blockquote><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// modules/user/user.controller.ts</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> svgCaptcha <span class="token keyword">from</span> <span class="token string">&quot;svg-captcha&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> userService<span class="token operator">:</span> UserService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/** <span class="token keyword">@name</span> 验证码 **/</span>\n  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;captcha&quot;</span><span class="token punctuation">)</span>\n  <span class="token comment">// 跳过响应格式化</span>\n  @<span class="token function">SkipResponseSuccessInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">captcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> captcha <span class="token operator">=</span> svgCaptcha<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      size<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n      fontSize<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>\n      ignoreChars<span class="token operator">:</span> <span class="token string">&quot;0o1i&quot;</span><span class="token punctuation">,</span>\n      color<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// session上面咱们可讲过了哦，别忘了</span>\n    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>captcha <span class="token operator">=</span> captcha<span class="token punctuation">.</span>text<span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">(</span><span class="token string">&quot;image/svg+xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>captcha<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>',96),c=(0,p.Uk)("访问 "),l=(0,p.Wm)("code",null,"http://localhost:3001/user/captcha",-1),u=(0,p.Uk)(" 验证码接口，"),r=(0,p.Wm)("br",null,null,-1),i=(0,p.Uk)(" 会得一个 SVG 验证码图片数据，就不会是我们接口响应的统一格式的数据了。 "),k=(0,p.Wm)("h3",{id:"配置-jwt-策略"},[(0,p.Wm)("a",{class:"header-anchor",href:"#配置-jwt-策略"},"#"),(0,p.Uk)(" 配置 JWT 策略")],-1),b=(0,p.uE)('<p><strong>安装依赖</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @nestjs/jwt passport-jwt @nestjs/passport\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>创建 utils/jwt/jwt.strategy.ts 文件</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ConfigService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/config&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> PassportStrategy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/passport&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ExtractJwt<span class="token punctuation">,</span> Strategy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;passport-jwt&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">JwtStrategy</span> <span class="token keyword">extends</span> <span class="token class-name">PassportStrategy</span><span class="token punctuation">(</span>Strategy<span class="token punctuation">,</span> <span class="token string">&quot;jwt&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> configService<span class="token operator">:</span> ConfigService<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 校验前端传递的token</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      jwtFromRequest<span class="token operator">:</span> ExtractJwt<span class="token punctuation">.</span><span class="token function">fromAuthHeaderAsBearerToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//校验逻辑token 已封装</span>\n      ignoreExpiration<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      secretOrKey<span class="token operator">:</span> <span class="token string">&quot;密钥....&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">async</span> <span class="token function">validate</span><span class="token punctuation">(</span>payload<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// token验证成功后, 会从token里面解析出用户信息, return的信息会被赋值到express的request对象上, 并且属性固定为user</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> payload<span class="token punctuation">.</span>id<span class="token punctuation">,</span> username<span class="token operator">:</span> payload<span class="token punctuation">.</span>username <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>创建 utils/jwt/jwt.guard.ts 文件</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>\n  ExecutionContext<span class="token punctuation">,</span>\n  Injectable<span class="token punctuation">,</span>\n  UnauthorizedException<span class="token punctuation">,</span>\n  NotFoundException<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AuthGuard <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/passport&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Reflector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/core&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;rxjs&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">SKIP_PUBLIC_TOKEN_GUARD</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/utils/metadata&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">JwtAuthGuard</span> <span class="token keyword">extends</span> <span class="token class-name">AuthGuard</span><span class="token punctuation">(</span><span class="token string">&quot;jwt&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> reflector<span class="token operator">:</span> Reflector<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/**\n   * <span class="token keyword">@name</span>: 该守护用于验证token\n   * <span class="token keyword">@description</span>: 每个守护必须实现该方法，返回一个布尔值，是否允许当前请求。https://nest.nodejs.cn/guards\n   */</span>\n  <span class="token function">canActivate</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ExecutionContext<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">|</span> Observable<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 校验是否是公共路由</span>\n    <span class="token keyword">const</span> isPublic <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reflector<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">getAllAndOverride</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token constant">SKIP_PUBLIC_TOKEN_GUARD</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n      context<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      context<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 公共路由直接跳过</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>isPublic<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token comment">// 校验token</span>\n    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">canActivate</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/**\n   * <span class="token keyword">@name</span>: super.canActivate(context)验完成后调用\n   * <span class="token keyword">@description</span>: 验完成后调用\n   * <span class="token keyword">@param</span> <span class="token punctuation">{</span>*<span class="token punctuation">}</span> error 这是 Passport 策略执行过程中发生的任何潜在错误。如果在验证过程中没有错误发生，这个值通常是 null\n   * <span class="token keyword">@param</span> <span class="token punctuation">{</span>*<span class="token punctuation">}</span> user 这是 Passport 策略验证成功后返回的用户对象。如果验证失败，这个值可能是 false 或 null，具体取决于你使用的 Passport 策略\n   * <span class="token keyword">@param</span> <span class="token punctuation">{</span>*<span class="token punctuation">}</span> info 如果验证失败，info通常是一个error对象\n   */</span>\n  <span class="token function">handleRequest</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> user<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>info <span class="token operator">||</span> error<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnauthorizedException</span><span class="token punctuation">(</span><span class="token string">&quot;token校验失败，token已经过期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">(</span><span class="token string">&quot;用户不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> user<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>utils/metadata.ts 文件中进行元数据配置</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// metadata.ts  所有元数据可以保存在一个文件里</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> SetMetadata <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SKIP_PUBLIC_TOKEN_GUARD</span> <span class="token operator">=</span> <span class="token string">&quot;skip_public_token_guard&quot;</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@name</span> 跳过全局Jwt守护\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">SkipPublicTokenGuard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">SetMetadata</span><span class="token punctuation">(</span><span class="token constant">SKIP_PUBLIC_TOKEN_GUARD</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// app.module.ts 使用Jwt</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">APP_GUARD</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/core&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// JWT</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> JwtModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/jwt&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> JwtStrategy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/utils/jwt/jwt.strategy&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> JwtAuthGuard <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/utils/jwt/jwt.guard&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 注册Jwt</span>\n    JwtModule<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      global<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      secret<span class="token operator">:</span> config<span class="token punctuation">.</span>token<span class="token punctuation">.</span>secret<span class="token punctuation">,</span>\n      signOptions<span class="token operator">:</span> <span class="token punctuation">{</span> expiresIn<span class="token operator">:</span> config<span class="token punctuation">.</span>token<span class="token punctuation">.</span>expiresIn <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span>\n    AppService<span class="token punctuation">,</span>\n    <span class="token comment">// 全局注入Jwt策略</span>\n    JwtStrategy<span class="token punctuation">,</span>\n    <span class="token comment">// 全局注册jwt验证守卫</span>\n    <span class="token punctuation">{</span>\n      provide<span class="token operator">:</span> <span class="token constant">APP_GUARD</span><span class="token punctuation">,</span>\n      useClass<span class="token operator">:</span> JwtAuthGuard<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>现在访问接口已经无法正常访问了，因为需要验证 token<br> 而要想正常访问接口，只能有两种形式，</p><ul><li>其一，携带正确的 Token 进行访问，</li><li>其二，特殊的接口可以通过上面定义的 @SkipPublicTokenGuard() 装饰器跳过 Token 的验证。</li></ul><p><strong>看看正常 Token 进行访问的流程</strong> modules/user/user.controller.ts</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// modules/user/user.controller.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> SkipResponseSuccessInterceptor<span class="token punctuation">,</span> SkipPublicTokenGuard <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/utils/metadata&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> userService<span class="token operator">:</span> UserService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token doc-comment comment">/** <span class="token keyword">@name</span> 验证码 **/</span>\n  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;captcha&quot;</span><span class="token punctuation">)</span>\n  <span class="token comment">// 跳过token验证</span>\n  @<span class="token function">SkipPublicTokenGuard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// 跳过响应格式化</span>\n  @<span class="token function">SkipResponseSuccessInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">captcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> captcha <span class="token operator">=</span> svgCaptcha<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      size<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n      fontSize<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>\n      ignoreChars<span class="token operator">:</span> <span class="token string">&quot;0o1i&quot;</span><span class="token punctuation">,</span>\n      color<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// session上面咱们可讲过了哦，别忘了</span>\n    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>captcha <span class="token operator">=</span> captcha<span class="token punctuation">.</span>text<span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">(</span><span class="token string">&quot;image/svg+xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>captcha<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>配置后，再去访问验证码接口就应该是能正确看到验证码图片返回了。 定义登陆接口</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// modules/user/user.controller.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> JwtService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/jwt&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> userService<span class="token operator">:</span> UserService<span class="token punctuation">,</span>\n    <span class="token comment">// 注入JWT</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> jwtService<span class="token operator">:</span> JwtService\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token doc-comment comment">/** <span class="token keyword">@name</span> PC登录 **/</span>\n  @<span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">)</span>\n  <span class="token comment">// 跳过token验证</span>\n  @<span class="token function">SkipPublicTokenGuard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span>@<span class="token function">Req</span><span class="token punctuation">(</span><span class="token punctuation">)</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 生成token</span>\n    <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jwtService<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      username<span class="token operator">:</span> <span class="token string">&quot;橙某人&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 存储session</span>\n    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>token <span class="token operator">=</span> token<span class="token punctuation">;</span>\n    <span class="token comment">// 返回token给前端</span>\n    <span class="token keyword">return</span> token<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p><strong>前端代码</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 前端部分代码</span>\naxios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span>headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        config<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> config<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',17),m=(0,p.Uk)("为什么前端需要在 Token 前面增加一个 Bearer 单词呢 "),d={href:"https://www.jianshu.com/p/61d592ae33ee",target:"_blank",rel:"noopener noreferrer"},g=(0,p.Uk)("详解"),y=(0,p.Uk)(" type 的作用，就是告诉服务器如何去认证访问者的身份。如果服务器事先就已经知道了认证方式，那么有无 Bearer 都不影响认证结果"),w=(0,p.uE)('<h3 id="连接数据库"><a class="header-anchor" href="#连接数据库">#</a> 连接数据库</h3><p><strong>安装依赖</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>npm install @nestjs<span class="token operator">/</span>typeorm typeorm mysql2 <span class="token operator">-</span><span class="token constant">S</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>app.module.ts 配置数据库链接</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// app.module.ts</span>\n@<span class="token function">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 配置数据库连接</span>\n    TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span>\n      host<span class="token operator">:</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span>\n      port<span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>\n      username<span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>\n      password<span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>\n      database<span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 数据库名</span>\n      <span class="token comment">// 自动加载所有的实体类</span>\n      entities<span class="token operator">:</span> <span class="token punctuation">[</span>__dirname <span class="token operator">+</span> <span class="token string">&quot;/**/*.entity{.ts,.js}&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token comment">// 同步实体类与数据库信息, 这个操作很危险，可能把数据给干没了</span>\n      synchronize<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>注意 <code>synchronize</code> 属性，它用于同步实体类与数据库信息，官网与网上很多都介绍说可以在开发环境开启这个选项，在生产环境再关闭。<br> 你可以去这么做，但是，最好在你足够了解实体类与数据库关系的基础下再去开启这个选项；否则，还是建议你关闭这个选项，老老实实写实体类.<br><strong>user.module.ts 文件中将实体类导入</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// modules/user/user.module.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./user.service&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> UserController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./user.controller&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> TypeOrmModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/typeorm&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// 实例类</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./entities/user.entity&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 将orm与表关联起来</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>TypeOrmModule<span class="token punctuation">.</span><span class="token function">forFeature</span><span class="token punctuation">(</span><span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>UserController<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span>UserService<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>&quot;实体类&quot; 是数据库的表在 Nest 中的描述</p></div><p><strong>编写实体类</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// modules/user/entity/user.entity.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> AfterLoad <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 关联y_user表</span>\n@<span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;y_user&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  @<span class="token function">PrimaryGeneratedColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n  @<span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="管道的使用"><a class="header-anchor" href="#管道的使用">#</a> 管道的使用</h3><p>管道有两个典型的应用场景，</p><ul><li>其一是转换(将输入数据转换为所需要的形式，如，将字符串转为数字类型)，</li><li>其二是校验(校验传入数据是否有效，无效时将抛出异常)数据是否有效。<br> 因此管道将运行在路由处理函数的 arguments 上。 NestJs 提供了 9 个开箱即用的内置管道 <code>(ValidationPipe，ParseIntPipe，ParseFloatPipe，ParseBoolPipe，ParseArrayPipe，ParseUUIDPipe，ParseEnumPipe，DefaultValuePipe，ParseFilePipe)</code> 接着就尝试绑定 ParseIntPipe 到 findOne 处理函数 函数</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>@<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;:id&#39;</span><span class="token punctuation">)</span>\n<span class="token function">findOne</span><span class="token punctuation">(</span>@<span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> ParseIntPipe<span class="token punctuation">)</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ordersService<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="基于-schema-的验证"><a class="header-anchor" href="#基于-schema-的验证">#</a> 基于 schema 的验证</h4><p>zod 是用来定义 schema 和 进行验证的模块，基于管道可以很好的时间路由处理函数参数的验证</p><ol><li>安装 zod：npm install --save zod ；</li><li>创建管道：nest generate pipe zod-validation or nest g pi zod-validation；</li><li>完善管道：利用注入的 ZodObject 解析参数数据格式；</li></ol><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ArgumentMetadata<span class="token punctuation">,</span> BadRequestException<span class="token punctuation">,</span> Injectable<span class="token punctuation">,</span> PipeTransform <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ZodObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zod&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ZodValidationPipe</span> <span class="token keyword">implements</span> <span class="token class-name">PipeTransform</span> <span class="token punctuation">{</span>\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> schema<span class="token operator">:</span> ZodObject<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token function">transform</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> metadata<span class="token operator">:</span> ArgumentMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>schema<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">&quot;Validation failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><strong>定义 schema</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> z <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zod&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> createOrderSchema <span class="token operator">=</span> z\n  <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    orderId<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    orderNo<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    orderName<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    orderStatus<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    orderAmount<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    createTime<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    updateTime<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">CreateOrderDto</span> <span class="token operator">=</span> z<span class="token punctuation">.</span>infer<span class="token operator">&lt;</span><span class="token keyword">typeof</span> createOrderSchema<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>绑定管道</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>@<span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n@<span class="token function">UsePipes</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ZodValidationPipe</span><span class="token punctuation">(</span>createOrderSchema<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token function">create</span><span class="token punctuation">(</span>@<span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> createOrderDto<span class="token operator">:</span> CreateOrderDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ordersService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>createOrderDto<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="基于-class-的验证"><a class="header-anchor" href="#基于-class-的验证">#</a> 基于 class 的验证</h3><p>在 NestJS 中可以使用 class-validator 模块实现基于类和装饰器的形式进行参数验证。</p><ul><li>安装 class-validator：npm i --save class-validator class-transformer ;</li><li>创建管道：nest generate pipe validation or nest g pi validation；</li><li>完善管道：利用 metatype 提供的参数元类型验证参数；</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ArgumentMetadata<span class="token punctuation">,</span> BadRequestException<span class="token punctuation">,</span> Injectable<span class="token punctuation">,</span> PipeTransform <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> validate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;class-validator&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> plainToInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;class-transformer&quot;</span><span class="token punctuation">;</span>\n\n@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ValidationPipe</span> <span class="token keyword">implements</span> <span class="token class-name">PipeTransform</span> <span class="token punctuation">{</span>\n  <span class="token keyword">async</span> <span class="token function">transform</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> metatype <span class="token punctuation">}</span><span class="token operator">:</span> ArgumentMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>metatype <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toValidate</span><span class="token punctuation">(</span>metatype<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token function">plainToInstance</span><span class="token punctuation">(</span>metatype<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> errors <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">validate</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>errors<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">&quot;Validation failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">private</span> <span class="token function">toValidate</span><span class="token punctuation">(</span>metatype<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> types<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Date<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token operator">!</span>types<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>metatype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p><strong>绑定管道</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>@<span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">create</span><span class="token punctuation">(</span>@<span class="token function">Body</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValidationPipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> createOrderDto<span class="token operator">:</span> CreateOrderDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ordersService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>createOrderDto<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>全局绑定管道</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">useGlobalPipes</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValidationPipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// or</span>\n@<span class="token function">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      provide<span class="token operator">:</span> <span class="token constant">APP_PIPE</span><span class="token punctuation">,</span>\n      useClass<span class="token operator">:</span> ValidationPipe<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="接口文档"><a class="header-anchor" href="#接口文档">#</a> 接口文档</h3><p>Swagger 是一个开源的 API 生态系统，用于构建、文档化和使用 RESTful Web 服务。它包括一个广泛的工具集合，用于设计、构建、文档化和测试 API。 Swagger 的主要组件包括： <strong>Swagger Specification</strong> : 这是一个描述 REST API 的格式的规范。它允许你指定 API 的结构，包括端点、方法、参数、请求和响应的类型等。 <strong>Swagger Editor</strong>: 这是一个在线工具，允许你编写和测试 OpenAPI 规范。 <strong>Swagger UI</strong>: 这是一个自动生成的 API 文档和沙箱的工具。它允许用户通过网页界面与 API 进行交互。 <strong>Swagger Codegen</strong>: 这是一个可以根据 OpenAPI 规范生成客户端代码的工具。</p><p>安装依赖</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @nestjs/swagger -S\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>main.ts 文件中配置</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// main.ts 文件中配置</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> SwaggerModule<span class="token punctuation">,</span> DocumentBuilder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/swagger&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 接口文档</span>\n  <span class="token keyword">const</span> docConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">&quot;我的接口文档&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&quot;宾至如归，友情长存。&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>version<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">addTag</span><span class="token punctuation">(</span><span class="token string">&quot;hotel&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> document <span class="token operator">=</span> SwaggerModule<span class="token punctuation">.</span><span class="token function">createDocument</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> docConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  SwaggerModule<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token string">&quot;doc&quot;</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>重启项目，直接访问 <code>http://localhost:3000/doc</code> 就能看到咱们的文档</p><h3 id="配置跨域"><a class="header-anchor" href="#配置跨域">#</a> 配置跨域</h3><p>main.ts 文件中配置</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// main.ts 文件中</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 允许跨域</span>\n  app<span class="token punctuation">.</span><span class="token function">enableCors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',40),f={href:"https://nest.nodejs.cn/security/cors",target:"_blank",rel:"noopener noreferrer"},v=(0,p.Uk)("参考文献"),h={href:"https://juejin.cn/post/7307889500546072595#heading-42",target:"_blank",rel:"noopener noreferrer"},q=(0,p.Uk)("快速入门"),x={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("p",null,[e,(0,p.Wm)("img",{src:n.$withBase("./images/daily-blog/query-params.png"),class:"show-in-center"},null,8,["src"])]),o,(0,p.Wm)("p",null,[c,l,u,r,i,(0,p.Wm)("img",{src:n.$withBase("./images/daily-blog/nest-captcha.png"),class:"show-in-center"},null,8,["src"])]),k,(0,p.Wm)("img",{src:n.$withBase("./images/daily-blog/session-jwt.png"),class:"show-in-center"},null,8,["src"]),b,(0,p.Wm)("p",null,[m,(0,p.Wm)("a",d,[g,(0,p.Wm)(a)]),y]),w,(0,p.Wm)("p",null,[(0,p.Wm)("a",f,[v,(0,p.Wm)(a)]),(0,p.Wm)("a",h,[q,(0,p.Wm)(a)])])],64)}}}}]);