(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[340],{5838:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>p});const p={key:"v-20d64dc7",path:"/pages/typescript/infer/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"或者自身类型",slug:"或者自身类型",children:[]},{level:3,title:"获取函数返回值",slug:"获取函数返回值",children:[]},{level:3,title:"获取数组元素类型",slug:"获取数组元素类型",children:[]},{level:3,title:"获取 Promise 的值类型",slug:"获取-promise-的值类型",children:[]},{level:3,title:"获取函数参数类型",slug:"获取函数参数类型",children:[]}],filePathRelative:"pages/typescript/infer/README.md",git:{updatedTime:172681525e4,contributors:[{name:"COOKIES-LGL",email:"1344714332@qq.com",commits:2}]}}},4412:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>e});const p=(0,a(6252).uE)('<h3 id="或者自身类型"><a class="header-anchor" href="#或者自身类型">#</a> 或者自身类型</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 定义</span>\n<span class="token keyword">type</span> <span class="token class-name">Moment<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">infer</span> <span class="token constant">U</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用</span>\n<span class="token keyword">type</span> <span class="token class-name">StringType</span> <span class="token operator">=</span> Moment<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string</span>\n<span class="token keyword">type</span> <span class="token class-name">NumberType</span> <span class="token operator">=</span> Moment<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// number</span>\n<span class="token keyword">type</span> <span class="token class-name">UnionType</span> <span class="token operator">=</span> Moment<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string | number</span>\n<span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">UserType</span> <span class="token operator">=</span> Moment<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// User</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="获取函数返回值"><a class="header-anchor" href="#获取函数返回值">#</a> 获取函数返回值</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 定义</span>\n<span class="token keyword">type</span> <span class="token class-name">GetReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> infer <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用</span>\n<span class="token keyword">type</span> <span class="token class-name">ExampleFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">ReturnTypeOfExampleFunction</span> <span class="token operator">=</span> GetReturnType<span class="token operator">&lt;</span>ExampleFunction<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="获取数组元素类型"><a class="header-anchor" href="#获取数组元素类型">#</a> 获取数组元素类型</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 定义</span>\n<span class="token keyword">type</span> <span class="token class-name">GetArrayElementType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>infer <span class="token constant">U</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用</span>\n<span class="token keyword">type</span> <span class="token class-name">Moment</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">Example1Array</span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">ElementTypeOfExampleArray</span> <span class="token operator">=</span> GetArrayElementType<span class="token operator">&lt;</span>Moment<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string</span>\n<span class="token keyword">type</span> <span class="token class-name">ElementTypeOfExample1Array</span> <span class="token operator">=</span> GetArrayElementType<span class="token operator">&lt;</span>Example1Array<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">//string</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="获取-promise-的值类型"><a class="header-anchor" href="#获取-promise-的值类型">#</a> 获取 Promise 的值类型</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 定义</span>\n<span class="token keyword">type</span> <span class="token class-name">GetPromiseValueType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span>infer <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用</span>\n<span class="token keyword">type</span> <span class="token class-name">ExamplePromise</span> <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">ValueTypeOfExamplePromise</span> <span class="token operator">=</span> GetPromiseValueType<span class="token operator">&lt;</span>ExamplePromise<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// number</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="获取函数参数类型"><a class="header-anchor" href="#获取函数参数类型">#</a> 获取函数参数类型</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 定义</span>\n<span class="token keyword">type</span> <span class="token class-name">GetParameters<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> infer <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用</span>\n<span class="token keyword">type</span> <span class="token class-name">ExampleFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">Params</span> <span class="token operator">=</span> GetParameters<span class="token operator">&lt;</span>ExampleFunction<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// [number, string]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>简单来说，infer 可以帮助从复杂类型中自动提取出所需的部分类型。</p>',11),e={render:function(s,n){return p}}}}]);